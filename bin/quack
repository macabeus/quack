<?php namespace _0\_1{ class _2{private static $messages=null;public static function message($key,$arguments){if(null ===static::$messages){static::$messages=['SCO010' =>'Duplicated parameter `%s\' in anonymous function','SCO020' =>'Use of undefined variable `%s\'','SCO030' =>'Multiple declarations of type `%s\' for union `%s\'','SCO040' =>'===DELETED===','SCO050' =>'Duplicated object property `%s\'','SCO060' =>'Duplicated parameter `%s\' in function `%s\'','SCO070' =>'Symbol `%s\' is not a variable','SCO080' =>'Symbol `%s\' is immutable','SCO090' =>'Invalid left-hand side in assignment','SCO100' =>'Array destructuring expects all children to be names','SCO110' =>'===DELETED===','SCO120' =>'Duplicated declaration of `%s\' on where clause','SCO130' =>'Symbol `%s\' declared twice','SCO140' =>'Called %s outside a loop','SCO150' =>'Called %s with undefined label `%s\'','SCO160' =>'Called %s with invalid label `%s\'','SCO170' =>'Duplicated declaration of `%s\' for enum `%s\'','SCO180' =>'Same variable name `%s\' for key and value on foreach','SCO190' =>'%s `%s\' not found in implementation','SCO200' =>'`%s\' is not a class in implementation','SCO210' =>'===DELETED===','SCO220' =>'===DELETED===','TYP010' =>'Value passed to while loop should be a `Bool\', not a `%s\'','TYP020' =>'Cannot add element of type `%s\' to array of `%s\'','TYP030' =>'The type of post conditional statement should be a `Bool\', not a `%s\'','TYP040' =>'Expected index of array to be a number. Got `%s\'','TYP050' =>'Expected index of map to be a `%s\'. Got `%s\'','TYP060' =>'Trying to access by index an element of type `%s\' that is not accessible','TYP070' =>'Key on index %d of map expected to be `%s\'. Got `%s\'','TYP080' =>'Value on index %s of map expected to be `%s\'. Got `%s\'','TYP090' =>'Expression of type `%s\' has no property `%s\'','TYP100' =>'Trying to set value of type `%s` to %s','TYP110' =>'No type overload found for operator `%s\' at {%s %s %s}','TYP120' =>'I didn\'t find the type `%s\'. Did you declare it?','TYP130' =>'Why in the world are you trying to compare two expressions of different types? at {%s %s %s}','TYP140' =>'Value passed to if statement should a `Bool\', not a `%s\'','TYP150' =>'Expecting type of case of switch statement to be `%s\'. Got `%s\'','TYP160' =>'More than one else clause for switch statement','TYP170' =>'Expecting type of field `%s\' of foreach statement to be a `number\'. Got `%s\'','TYP180' =>'Condition passed to elif statement should be a `Bool\', not a `%s\'','TYP190' =>'Cannot infer type of non-variable `%s\'','TYP200' =>'Ok, you declared `%s\', but it is not member of a tagged union','TYP210' =>'The type constructor `%s\' receives %d parameters, but you gave %d','TYP220' =>'Expected a `number\' on operand `%s\' of range expression. Got `%s\'','TYP230' =>'No type overload for operator `%s\' on type `%s\'','TYP240' =>'Condition of ternary operator should de `Bool\'. Got `%s\'','TYP250' =>'Both sides of ternary expression must have the same type. Got `%s\' and `%s\'','TYP260' =>'`%s\' is not iterable','TYP270' =>'You forgot to set a value for immutable variable `%s\', my love','TYP280' =>'Found cyclic reference for type `%s\'','TYP290' =>'Caught declaration of free variable `%s\'','TYP300' =>'Cannot assign to variable `%s\' of type `%s\' a value of type `%s\'','TYP310' =>'I\'m sorry, but type `%s\' is not callable','TYP320' =>'Function of type `%s\' expected %d arguments, but received %d','TYP330' =>'Argument number %d of call expected to be a `%s\', but it is a `%s\'','TYP340' =>'On map, cannot match the type of %s `%s\' with `%s\'','TYP350' =>'Bad equation: `%s\' and `%s\', because:
','TYP360' =>'Functions have different number of arguments. One has %d, the other has %d','TYP370' =>'Parameter number %d of function needs to be a `%s\', but it is a `%s\'','TYP380' =>'I was expecting to have a function with return type of `%s\', but you gave me a `%s\'','TYP390' =>'Cannot merge type `%s\' with `%s\', I\'m sorry','TYP400' =>'Ambiguous type for `%s\' & `%s\' because:
     > `%s\' can be either `%s\' or `%s\'','TYP410' =>'A JSX child should be a component or a string, but you gave me `%s\' and I\'m very sad about that','TYP420' =>'The tuples have different sizes, I want %d and you gave me %d','TYP430' =>'The types of tuples don\'t match because element %d should be `%s\', but it is `%s\'','TYP440' =>'I didn\'t find any type named `%s\'. Are you sure you declared it?','TYP450' =>'Argument number %d of constructor `%s\' should be of type `%s\', but it is `%s\'','TYP460' =>'Please, stop trying to declare specialized union member `%s\'. Use `%s\' instead'];} return sprintf(...array_merge([static::$messages[$key]],$arguments));}}} namespace _0\Cli{ use \Exception;use \_0\_3\_14;use \_0\_19\_72;use \_0\_19\_80;use \_0\_87\_90;use \_0\_87\_91;use \_0\_87\_87;class Croak{private $wav=null;public function __construct(){$bytes=[18770,17990,33794,1,16727,17750,28006,8308,16,0,1,2,44100,0,45328,2,4,16,18764,21587,26,0,20041,20294,21321,21574,14,0,24908,26230,14133,14126,11825,12337,48,24932,24948,33724,1,0,65535,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,2,1,1,2,3,2,3,2,2,2,3,3,2,2,2,2,3,2,2,3,3,3,3,3,2,3,2,3,3,2,3,3,3,3,4,3,3,4,4,3,3,4,3,3,4,3,4,4,3,3,4,3,4,4,4,5,5,5,5,5,5,5,5,5,4,5,5,5,4,4,4,5,5,5,4,5,4,4,4,5,5,4,5,5,6,5,6,5,6,6,7,6,6,6,7,7,8,7,7,7,8,8,8,9,9,9,9,9,9,9,9,10,9,10,9,10,10,10,9,9,10,10,11,10,11,11,12,11,13,13,13,13,15,15,16,16,17,16,17,17,17,16,16,15,15,16,16,16,17,17,17,18,18,17,17,17,18,19,21,20,22,22,23,24,23,23,22,22,22,22,23,23,24,24,26,26,26,26,27,27,29,28,30,30,32,33,35,36,36,36,36,36,34,35,33,33,34,33,34,34,34,34,33,34,33,33,34,33,38,37,41,41,43,43,45,45,46,46,48,47,49,49,51,51,50,51,49,49,51,50,50,50,50,50,49,49,48,49,48,48,47,47,47,47,46,46,47,48,51,52,57,56,59,59,60,60,61,61,62,62,65,65,68,68,70,70,72,71,69,68,64,65,61,61,56,56,53,53,53,53,47,47,45,45,47,47,50,49,56,56,63,63,62,62,60,60,55,56,50,50,52,52,56,56,60,59,67,68,74,74,80,79,89,89,96,97,99,100,101,101,101,101,102,102,104,104,105,105,107,106,105,105,101,101,97,97,91,90,84,83,79,79,76,77,75,74,74,73,72,72,70,71,69,69,69,68,69,70,73,72,75,75,80,80,83,84,87,87,94,94,102,102,106,107,108,109,109,109,107,107,103,103,100,101,94,94,87,87,85,85,87,87,89,89,90,91,89,89,83,83,77,77,72,72,69,69,71,70,74,74,78,78,79,79,75,75,70,69,63,63,58,58,56,57,57,57,56,56,54,54,47,47,35,36,26,26,19,19,15,15,15,14,15,15,15,15,14,14,12,12,11,11,14,14,25,25,42,42,58,58,66,66,67,68,66,65,60,60,57,57,56,56,53,54,52,52,53,52,52,52,52,52,53,52,51,52,53,53,54,54,53,54,57,56,58,58,61,61,67,67,69,69,74,74,82,82,87,87,90,90,92,92,90,90,89,89,88,89,81,81,72,73,64,64,56,56,62,62,75,75,88,87,98,98,100,99,91,91,86,87,86,85,90,90,104,104,114,115,119,119,118,118,105,105,93,93,92,92,91,91,92,93,95,95,93,93,95,96,109,109,120,120,125,124,126,126,122,121,118,117,115,115,112,112,114,115,117,117,110,110,98,98,76,76,48,48,35,34,26,26,11,11,6,6,6,6,9,9,26,26,46,46,51,51,52,52,48,48,38,38,37,37,47,47,64,64,82,83,92,92,89,89,79,79,68,68,64,63,64,64,62,62,63,64,64,63,59,59,60,59,59,59,53,53,49,49,41,41,29,29,27,27,24,23,15,16,13,13,12,12,14,14,31,31,44,44,46,45,46,47,43,43,33,33,28,27,19,19,5,6,65532,65532,65522,65522,65507,65507,65492,65492,65478,65478,65472,65472,65472,65473,65479,65479,65489,65489,65490,65490,65485,65485,65484,65484,65476,65476,65465,65465,65462,65462,65450,65451,65436,65436,65434,65434,65431,65431,65424,65424,65428,65427,65434,65434,65447,65448,65475,65474,65500,65500,65509,65509,65500,65500,65483,65482,65467,65468,65451,65452,65439,65439,65432,65432,65417,65417,65406,65405,65408,65407,65404,65405,65400,65400,65405,65405,65407,65407,65407,65407,65413,65413,65411,65411,65398,65397,65381,65382,65363,65362,65350,65349,65344,65344,65343,65344,65347,65347,65347,65346,65350,65349,65359,65359,65365,65364,65374,65374,65390,65391,65401,65401,65412,65412,65422,65422,65411,65410,65392,65392,65384,65384,65372,65373,65366,65366,65366,65367,65357,65358,65353,65352,65360,65360,65364,65364,65369,65370,65377,65377,65377,65377,65379,65380,65385,65385,65384,65385,65385,65384,65384,65383,65375,65375,65375,65374,65386,65386,65405,65405,65430,65431,65443,65443,65437,65437,65423,65423,65406,65406,65402,65402,65414,65413,65423,65424,65434,65433,65436,65436,65410,65410,65380,65381,65359,65358,65330,65330,65312,65313,65302,65302,65278,65277,65266,65266,65282,65282,65300,65300,65321,65321,65340,65341,65343,65344,65345,65345,65352,65352,65355,65355,65368,65368,65387,65387,65402,65402,65415,65415,65412,65413,65399,65399,65397,65397,65396,65395,65387,65387,65382,65382,65371,65372,65364,65364,65383,65384,65408,65408,65424,65424,65436,65437,65430,65429,65411,65410,65401,65401,65395,65395,65402,65402,65426,65426,65440,65441,65442,65442,65434,65433,65406,65406,65382,65382,65375,65375,65372,65372,65381,65381,65395,65394,65399,65399,65410,65411,65424,65424,65428,65428,65433,65434,65431,65432,65421,65422,65422,65422,65422,65421,65416,65415,65414,65414,65409,65409,65404,65403,65404,65404,65400,65401,65395,65394,65392,65392,65386,65386,65383,65383,65381,65382,65376,65376,65375,65375,65376,65377,65371,65372,65376,65375,65391,65390,65410,65409,65433,65432,65441,65442,65424,65423,65392,65392,65359,65359,65331,65331,65315,65315,65303,65302,65287,65287,65269,65270,65247,65247,65220,65220,65198,65198,65183,65182,65177,65178,65188,65187,65198,65198,65203,65203,65203,65204,65195,65194,65183,65182,65179,65180,65183,65183,65193,65193,65208,65208,65217,65217,65213,65213,65202,65202,65190,65191,65186,65186,65190,65190,65203,65202,65218,65218,65223,65223,65218,65219,65210,65210,65197,65197,65191,65192,65204,65204,65218,65219,65227,65227,65243,65244,65262,65263,65280,65280,65303,65302,65317,65317,65312,65312,65308,65307,65307,65306,65297,65297,65286,65286,65273,65272,65255,65254,65242,65243,65233,65234,65224,65224,65221,65221,65213,65214,65204,65204,65196,65197,65183,65183,65176,65177,65191,65190,65207,65206,65223,65223,65246,65245,65262,65262,65278,65277,65292,65292,65303,65304,65326,65327,65353,65354,65381,65381,65407,65407,65407,65407,65400,65400,65403,65403,65389,65389,65364,65364,65343,65342,65305,65305,65284,65284,65300,65300,65319,65318,65340,65339,65352,65353,65325,65326,65289,65289,65258,65258,65225,65225,65215,65216,65214,65214,65198,65198,65199,65199,65218,65218,65237,65237,65262,65262,65280,65279,65280,65279,65280,65279,65282,65282,65287,65287,65299,65299,65316,65316,65337,65337,65342,65343,65323,65323,65294,65294,65267,65267,65246,65246,65235,65235,65222,65222,65208,65208,65201,65200,65201,65201,65206,65205,65208,65209,65214,65214,65236,65236,65265,65266,65287,65288,65314,65314,65342,65342,65365,65365,65394,65393,65409,65410,65386,65386,65349,65348,65322,65322,65292,65292,65265,65265,65247,65247,65221,65220,65208,65209,65238,65238,65279,65278,65316,65317,65345,65345,65334,65335,65309,65309,65291,65291,65275,65275,65281,65281,65303,65303,65312,65313,65331,65331,65362,65363,65388,65388,65424,65424,65447,65447,65428,65427,65393,65393,65360,65359,65335,65335,65343,65343,65365,65364,65377,65378,65383,65383,65375,65374,65361,65361,65355,65354,65347,65347,65342,65343,65344,65343,65337,65337,65336,65337,65350,65351,65363,65363,65372,65373,65386,65386,65394,65394,65402,65401,65418,65419,65423,65423,65399,65400,65369,65368,65341,65341,65313,65314,65304,65305,65307,65307,65300,65300,65292,65293,65287,65286,65274,65273,65260,65260,65253,65253,65255,65255,65262,65262,65269,65268,65276,65276,65277,65278,65270,65270,65271,65270,65268,65268,65256,65255,65251,65250,65242,65241,65236,65236,65255,65255,65279,65279,65298,65299,65319,65319,65323,65323,65321,65322,65331,65330,65332,65332,65330,65330,65329,65328,65321,65321,65320,65320,65321,65322,65324,65323,65333,65332,65328,65329,65311,65311,65293,65293,65264,65264,65256,65256,65291,65292,65339,65339,65386,65386,65424,65424,65425,65425,65408,65408,65398,65397,65393,65393,65409,65409,65436,65436,65458,65458,65473,65473,65468,65469,65453,65453,65444,65445,65433,65432,65415,65414,65404,65404,65392,65392,65381,65381,65379,65378,65378,65378,65372,65372,65370,65371,65385,65385,65404,65403,65416,65417,65431,65431,65443,65443,65446,65446,65457,65456,65463,65464,65449,65449,65429,65430,65415,65414,65400,65401,65399,65399,65405,65406,65408,65408,65417,65417,65439,65438,65466,65466,65495,65494,65509,65510,65504,65504,65488,65488,65475,65476,65466,65465,65457,65456,65450,65451,65442,65442,65436,65435,65443,65444,65455,65456,65462,65461,65468,65469,65471,65472,65467,65467,65469,65469,65469,65469,65461,65460,65456,65455,65449,65449,65440,65440,65444,65443,65455,65455,65465,65465,65474,65474,65473,65473,65458,65459,65447,65447,65442,65442,65437,65437,65436,65435,65438,65438,65433,65434,65421,65421,65406,65405,65386,65387,65371,65372,65375,65376,65386,65387,65391,65390,65401,65401,65419,65419,65439,65439,65463,65462,65473,65474,65458,65457,65433,65434,65414,65414,65399,65398,65393,65393,65388,65388,65380,65380,65376,65377,65377,65376,65379,65379,65381,65382,65377,65377,65372,65371,65365,65364,65356,65355,65350,65350,65338,65339,65322,65321,65310,65310,65297,65298,65284,65285,65275,65275,65260,65260,65250,65250,65259,65259,65272,65272,65288,65287,65292,65292,65268,65268,65241,65240,65216,65217,65194,65194,65206,65206,65233,65233,65250,65249,65278,65279,65305,65305,65318,65318,65348,65347,65356,65356,65314,65314,65257,65258,65199,65199,65159,65159,65167,65167,65194,65195,65215,65215,65227,65227,65224,65223,65213,65212,65202,65202,65197,65197,65220,65220,65253,65253,65282,65282,65315,65314,65333,65333,65344,65343,65371,65372,65381,65381,65363,65363,65343,65343,65319,65319,65304,65304,65313,65314,65329,65328,65338,65338,65343,65343,65343,65343,65336,65336,65324,65324,65321,65321,65337,65337,65358,65358,65383,65382,65402,65402,65398,65399,65387,65387,65381,65382,65377,65377,65384,65384,65401,65401,65414,65414,65420,65420,65409,65410,65389,65390,65373,65372,65362,65362,65366,65366,65378,65378,65386,65386,65396,65396,65413,65412,65427,65426,65441,65441,65452,65452,65455,65455,65454,65454,65454,65454,65450,65450,65440,65440,65429,65429,65421,65421,65411,65411,65407,65408,65406,65406,65394,65395,65394,65394,65411,65410,65428,65429,65453,65453,65468,65468,65445,65444,65409,65409,65383,65383,65355,65355,65347,65346,65354,65354,65350,65350,65346,65347,65350,65350,65346,65345,65339,65338,65340,65341,65353,65352,65370,65371,65390,65389,65402,65403,65397,65397,65384,65383,65378,65377,65370,65371,65359,65359,65354,65354,65349,65349,65342,65342,65342,65342,65338,65338,65327,65327,65328,65329,65345,65346,65373,65372,65403,65403,65420,65420,65405,65405,65373,65374,65346,65347,65331,65331,65334,65335,65351,65352,65361,65361,65368,65369,65382,65382,65394,65394,65405,65406,65417,65416,65422,65422,65429,65429,65436,65435,65440,65440,65455,65455,65473,65473,65489,65488,65504,65505,65501,65501,65485,65485,65478,65478,65469,65470,65453,65453,65444,65444,65433,65433,65419,65419,65418,65417,65417,65417,65409,65409,65413,65412,65437,65436,65466,65465,65492,65493,65512,65511,65511,65511,65498,65498,65489,65490,65485,65486,65490,65490,65510,65511,65530,65530,5,5,11,11,10,10,10,11,18,19,21,21,21,20,23,23,20,20,16,17,14,13,3,2,65533,65533,4,4,16,16,27,26,32,32,24,24,12,11,5,4,2,2,5,5,14,14,20,20,23,24,32,32,39,39,48,48,58,58,57,57,52,52,50,49,44,44,47,47,59,59,60,60,64,64,81,80,94,94,115,115,121,121,82,82,26,27,65512,65512,65474,65474,65475,65475,65495,65495,65504,65504,65512,65513,65516,65515,65511,65512,65520,65520,65528,65528,65526,65526,65526,65525,65521,65521,65520,65521,65534,65534,15,15,29,30,42,42,51,50,60,60,69,69,75,75,83,84,91,92,102,102,115,115,119,119,118,118,120,119,110,111,95,95,77,77,55,55,44,43,51,50,64,63,74,74,82,83,83,83,75,76,71,70,73,72,78,79,93,92,111,111,110,110,92,92,74,73,49,49,38,39,67,66,103,103,134,134,166,166,171,172,155,155,149,150,138,138,112,111,92,92,74,73,51,52,46,46,40,41,27,26,28,27,47,47,72,72,100,100,117,116,109,110,95,95,88,88,82,82,80,81,87,87,90,91,89,88,87,87,79,78,66,67,64,63,65,66,76,75,92,91,105,105,115,115,125,125,129,128,138,137,150,150,159,159,173,173,186,186,189,189,193,193,196,197,194,195,191,191,185,185,179,179,172,173,165,165,162,162,154,154,146,146,154,154,159,160,159,160,174,173,178,179,180,180,194,194,183,184,148,149,116,116,74,75,49,50,68,68,97,97,127,127,151,151,142,141,120,121,106,107,94,93,95,95,100,101,99,99,106,106,117,117,128,127,146,145,151,151,148,147,144,143,131,131,126,126,143,142,164,164,190,189,209,209,210,210,208,207,210,209,213,213,228,227,246,246,259,260,270,270,270,270,258,258,249,249,242,243,235,235,232,233,228,228,229,228,245,245,268,267,285,285,302,302,313,313,318,318,330,329,336,336,332,332,327,328,323,323,317,318,325,325,339,340,348,348,356,356,364,364,369,368,376,375,379,380,364,364,338,338,319,319,303,304,298,298,303,303,299,299,295,295,311,312,326,327,340,341,359,358,359,358,351,351,357,357,352,351,342,343,343,342,333,332,333,334,367,367,406,405,445,445,472,473,461,462,433,433,411,411,395,394,391,392,394,394,391,390,387,387,379,379,367,367,358,357,350,351,355,356,373,373,384,384,389,388,384,384,368,368,354,355,345,345,336,336,332,332,328,329,324,324,326,325,332,331,343,343,354,355,349,349,335,334,321,322,312,313,324,323,346,346,358,358,373,372,393,394,411,412,436,437,456,455,447,448,431,432,419,419,408,407,413,413,425,425,428,428,434,433,442,441,443,444,450,450,454,453,442,442,428,429,417,418,405,405,402,402,405,405,403,403,404,404,416,415,430,430,445,445,460,459,461,460,449,449,442,443,436,435,422,422,417,417,412,411,397,397,392,392,386,386,374,373,376,376,390,390,405,405,427,427,440,440,437,437,429,429,420,420,417,416,414,415,412,412,412,412,403,402,386,386,377,378,359,359,353,354,393,393,443,443,493,493,535,536,524,524,484,484,459,459,432,432,416,415,419,418,409,409,401,400,403,403,395,395,388,387,386,386,383,383,388,388,394,394,396,396,401,401,399,400,397,398,407,406,421,420,446,447,477,477,491,491,486,486,472,472,459,459,447,448,438,438,426,426,411,412,401,401,403,404,409,410,413,413,416,415,407,406,389,390,379,379,371,372,373,373,381,380,383,383,388,387,396,395,402,402,412,413,413,414,406,406,403,402,398,398,394,394,400,400,405,405,410,409,414,414,413,413,406,407,399,400,396,396,398,399,405,404,414,414,423,422,424,424,425,426,426,426,425,425,429,430,436,436,442,441,444,444,436,436,421,421,403,403,392,392,403,402,423,422,437,437,450,450,451,450,442,443,447,446,443,443,424,424,408,409,389,389,376,376,387,388,403,404,417,417,432,432,443,443,455,455,471,471,482,483,487,486,486,486,483,484,482,481,480,481,481,482,483,482,483,484,484,485,480,480,471,472,466,465,459,459,457,457,453,453,446,447,451,452,459,459,463,464,472,472,467,466,454,453,452,452,437,436,408,409,386,386,357,357,338,338,354,353,379,378,398,398,418,418,427,426,428,428,432,432,442,441,450,451,455,454,459,459,463,463,452,452,442,443,438,438,423,423,410,409,399,398,378,378,363,364,360,361,355,355,349,349,347,347,353,352,364,363,374,374,377,377,364,365,340,340,323,324,306,305,283,283,271,271,258,258,241,241,239,239,234,234,221,221,221,221,226,225,231,230,246,246,251,250,234,234,213,212,186,186,173,173,194,193,230,230,263,262,279,279,260,259,219,219,186,186,156,156,135,135,130,131,120,120,111,112,121,121,126,127,127,127,140,140,151,151,162,163,185,186,194,194,177,178,151,152,122,122,97,98,95,96,109,109,120,120,129,128,142,142,152,152,159,158,175,176,193,193,208,209,233,234,242,242,215,215,181,181,147,148,125,124,140,141,168,168,186,185,210,209,221,220,220,220,234,234,233,234,214,214,200,200,172,173,153,153,171,170,191,190,212,213,234,234,222,223,200,200,186,187,169,170,173,172,187,187,186,186,194,194,215,214,236,235,268,268,282,281,256,257,217,216,175,175,147,147,142,142,144,144,149,149,144,145,119,120,87,88,50,50,21,21,19,19,25,25,30,29,31,31,16,15,65535,65534,65519,65519,65511,65512,8,9,63,63,111,110,153,153,160,160,141,140,141,142,133,132,100,99,71,70,32,32,65533,65533,65532,65532,0,1,8,8,10,9,11,12,17,17,18,18,24,25,29,30,30,30,35,35,43,43,54,55,68,68,69,70,61,60,42,41,21,20,11,11,3,3,65535,0,4,4,65530,65530,65521,65521,65513,65512,65492,65492,65492,65492,65523,65523,26,26,77,76,103,104,74,74,23,23,65512,65512,65480,65480,65485,65485,65507,65506,65521,65521,65529,65530,65525,65525,65514,65514,65504,65504,65498,65498,65502,65503,65509,65509,65512,65512,65513,65512,65503,65503,65491,65491,65487,65487,65481,65481,65480,65479,65481,65481,65473,65473,65474,65474,65484,65483,65490,65490,65505,65505,65514,65515,65503,65503,65491,65491,65478,65478,65463,65462,65462,65462,65468,65467,65468,65469,65472,65472,65470,65470,65463,65464,65460,65461,65457,65457,65451,65451,65445,65444,65435,65435,65422,65422,65412,65412,65404,65405,65395,65395,65394,65394,65405,65405,65416,65417,65431,65430,65440,65440,65426,65426,65404,65405,65391,65391,65379,65379,65381,65380,65393,65394,65397,65396,65395,65395,65393,65393,65381,65381,65371,65371,65367,65366,65367,65367,65376,65376,65386,65386,65390,65391,65390,65390,65383,65383,65374,65375,65368,65368,65362,65362,65359,65359,65359,65359,65356,65356,65351,65351,65345,65346,65343,65343,65340,65339,65334,65334,65327,65327,65314,65314,65304,65304,65309,65308,65314,65313,65313,65314,65315,65315,65307,65307,65299,65299,65298,65299,65296,65295,65297,65298,65305,65305,65306,65306,65313,65313,65321,65321,65321,65320,65329,65330,65327,65327,65300,65301,65276,65276,65249,65249,65226,65226,65234,65233,65249,65249,65258,65258,65274,65274,65280,65280,65283,65283,65295,65294,65294,65294,65292,65293,65292,65292,65281,65280,65291,65291,65332,65332,65380,65380,65433,65433,65467,65467,65458,65458,65434,65434,65414,65413,65396,65395,65394,65395,65401,65401,65405,65404,65408,65408,65399,65399,65382,65382,65368,65368,65360,65360,65374,65374,65408,65408,65436,65436,65444,65445,65434,65433,65403,65403,65368,65369,65352,65353,65367,65367,65396,65396,65422,65422,65441,65441,65439,65439,65419,65419,65408,65409,65400,65399,65382,65382,65374,65374,65362,65363,65344,65344,65343,65343,65346,65346,65342,65343,65349,65349,65352,65353,65350,65350,65358,65358,65355,65355,65332,65331,65303,65304,65270,65271,65250,65249,65259,65259,65278,65278,65295,65296,65306,65305,65294,65294,65271,65271,65253,65252,65233,65233,65221,65221,65216,65216,65206,65205,65202,65202,65218,65218,65242,65242,65265,65264,65283,65283,65284,65285,65276,65277,65277,65277,65273,65273,65251,65251,65226,65226,65205,65205,65187,65186,65186,65186,65195,65195,65194,65194,65205,65204,65236,65236,65269,65269,65304,65304,65332,65331,65321,65322,65297,65297,65279,65280,65256,65256,65239,65239,65230,65230,65211,65212,65201,65201,65203,65203,65200,65200,65204,65204,65204,65203,65188,65187,65175,65175,65159,65159,65150,65150,65181,65181,65226,65227,65266,65265,65299,65299,65300,65299,65285,65285,65285,65285,65279,65279,65269,65268,65260,65260,65244,65245,65234,65235,65227,65227,65212,65212,65210,65210,65198,65198,65171,65170,65146,65146,65110,65109,65092,65092,65134,65134,65187,65188,65238,65238,65287,65287,65296,65296,65291,65292,65300,65300,65295,65295,65295,65295,65304,65304,65301,65301,65304,65304,65305,65304,65296,65296,65297,65298,65291,65291,65276,65276,65267,65267,65247,65247,65241,65240,65268,65267,65298,65298,65333,65333,65362,65362,65356,65356,65340,65340,65333,65332,65321,65322,65311,65311,65299,65299,65286,65285,65272,65273,65254,65254,65232,65233,65207,65208,65192,65192,65213,65213,65252,65252,65282,65281,65307,65307,65317,65317,65315,65316,65321,65321,65324,65324,65317,65318,65314,65315,65314,65314,65317,65317,65322,65322,65326,65325,65331,65331,65335,65334,65332,65332,65328,65327,65319,65320,65319,65319,65330,65329,65344,65344,65362,65363,65364,65364,65341,65341,65309,65310,65277,65276,65244,65244,65225,65226,65209,65209,65185,65186,65168,65168,65163,65164,65165,65165,65167,65167,65174,65173,65181,65180,65182,65182,65189,65188,65196,65196,65190,65190,65183,65182,65180,65179,65170,65170,65162,65162,65156,65156,65149,65150,65146,65145,65140,65139,65137,65137,65141,65141,65137,65136,65132,65132,65125,65126,65110,65109,65111,65111,65139,65139,65172,65172,65212,65213,65239,65239,65240,65240,65234,65235,65226,65226,65225,65225,65245,65245,65269,65269,65292,65292,65313,65314,65312,65312,65298,65299,65292,65292,65280,65280,65261,65261,65243,65244,65220,65221,65204,65204,65210,65210,65228,65228,65239,65240,65252,65253,65273,65274,65295,65295,65323,65323,65344,65344,65333,65333,65312,65313,65298,65298,65283,65282,65284,65284,65291,65290,65278,65279,65281,65281,65305,65304,65327,65326,65363,65362,65380,65380,65345,65345,65301,65301,65263,65262,65228,65227,65220,65220,65222,65222,65210,65210,65208,65208,65220,65221,65235,65234,65250,65250,65261,65261,65270,65269,65274,65274,65280,65280,65288,65288,65284,65283,65276,65275,65277,65276,65272,65272,65262,65263,65260,65260,65253,65254,65248,65248,65259,65258,65269,65269,65279,65279,65290,65291,65293,65294,65289,65290,65286,65286,65284,65283,65287,65288,65294,65295,65301,65301,65306,65306,65297,65297,65283,65283,65275,65275,65263,65262,65257,65258,65261,65261,65252,65251,65250,65250,65273,65273,65298,65298,65331,65331,65351,65351,65329,65329,65290,65291,65257,65257,65225,65225,65219,65219,65227,65228,65229,65228,65234,65234,65224,65224,65202,65202,65191,65191,65177,65176,65165,65165,65165,65165,65150,65150,65149,65149,65182,65182,65218,65217,65261,65262,65292,65293,65282,65281,65264,65264,65246,65247,65232,65231,65256,65256,65290,65290,65315,65315,65343,65344,65335,65336,65306,65306,65297,65296,65272,65272,65240,65240,65221,65221,65187,65187,65174,65174,65202,65203,65236,65235,65272,65271,65291,65292,65271,65271,65239,65239,65204,65204,65183,65183,65209,65209,65254,65254,65296,65296,65326,65327,65320,65319,65294,65293,65279,65278,65262,65263,65255,65255,65258,65258,65250,65250,65244,65244,65248,65249,65250,65250,65255,65255,65264,65264,65265,65264,65262,65263,65263,65263,65258,65259,65241,65241,65219,65219,65200,65200,65183,65182,65176,65176,65179,65179,65176,65176,65177,65176,65191,65192,65208,65208,65226,65227,65238,65238,65235,65234,65229,65229,65223,65223,65222,65221,65228,65228,65233,65234,65244,65244,65257,65257,65260,65259,65259,65259,65261,65262,65262,65261,65266,65265,65275,65275,65277,65277,65281,65281,65297,65297,65316,65316,65332,65331,65340,65341,65337,65337,65325,65326,65320,65321,65319,65320,65307,65308,65294,65294,65287,65287,65270,65270,65252,65251,65233,65232,65207,65206,65191,65190,65199,65198,65211,65211,65221,65221,65233,65234,65246,65245,65257,65258,65270,65269,65283,65284,65305,65305,65332,65333,65362,65363,65383,65382,65380,65380,65366,65367,65359,65359,65353,65352,65341,65340,65325,65326,65310,65310,65293,65293,65279,65278,65266,65266,65251,65251,65244,65244,65251,65251,65264,65264,65272,65272,65281,65281,65294,65294,65309,65309,65320,65320,65328,65328,65333,65333,65333,65334,65340,65340,65349,65348,65340,65340,65326,65327,65321,65321,65314,65314,65313,65313,65320,65320,65320,65321,65321,65320,65326,65327,65326,65326,65323,65323,65324,65324,65335,65334,65354,65354,65374,65373,65385,65385,65378,65378,65359,65359,65347,65347,65339,65339,65332,65332,65331,65331,65325,65325,65320,65320,65336,65336,65358,65358,65377,65376,65392,65393,65393,65393,65389,65389,65391,65391,65386,65387,65380,65380,65368,65369,65350,65349,65346,65347,65356,65355,65363,65363,65378,65378,65384,65385,65366,65367,65351,65351,65334,65334,65315,65316,65322,65322,65342,65342,65355,65355,65377,65378,65405,65405,65429,65428,65455,65456,65470,65469,65464,65465,65452,65452,65439,65439,65437,65438,65456,65455,65478,65478,65501,65501,65511,65511,65483,65484,65439,65438,65400,65400,65367,65367,65352,65352,65349,65348,65338,65338,65327,65327,65320,65319,65307,65306,65291,65290,65282,65282,65295,65296,65331,65332,65363,65363,65387,65387,65403,65403,65404,65404,65412,65412,65417,65417,65394,65393,65368,65367,65350,65349,65327,65326,65313,65312,65298,65298,65273,65272,65257,65258,65251,65251,65245,65246,65243,65244,65236,65237,65225,65226,65214,65215,65197,65197,65186,65186,65181,65181,65179,65179,65185,65185,65185,65184,65176,65175,65165,65165,65150,65150,65149,65150,65175,65176,65210,65210,65248,65247,65272,65272,65270,65269,65261,65261,65256,65256,65252,65252,65258,65258,65267,65268,65274,65273,65278,65278,65270,65270,65250,65251,65233,65232,65215,65215,65201,65201,65188,65188,65173,65173,65164,65164,65163,65163,65170,65170,65179,65179,65177,65177,65169,65169,65158,65159,65138,65138,65138,65139,65168,65167,65207,65206,65253,65253,65282,65283,65270,65271,65244,65245,65225,65226,65213,65214,65217,65217,65227,65228,65232,65232,65231,65232,65225,65226,65217,65217,65211,65211,65202,65201,65187,65187,65172,65173,65158,65157,65152,65152,65165,65165,65185,65185,65197,65198,65214,65214,65233,65232,65245,65244,65262,65261,65269,65269,65245,65245,65216,65215,65195,65194,65176,65175,65186,65185,65211,65210,65223,65224,65239,65238,65249,65249,65247,65248,65258,65257,65263,65263,65252,65252,65244,65244,65230,65229,65221,65221,65238,65239,65259,65260,65276,65276,65290,65290,65283,65282,65267,65267,65260,65259,65245,65246,65232,65232,65226,65227,65219,65219,65219,65218,65234,65233,65253,65253,65270,65270,65291,65292,65312,65312,65328,65328,65345,65345,65359,65359,65367,65367,65374,65374,65382,65382,65385,65385,65384,65384,65380,65380,65379,65379,65381,65381,65385,65385,65396,65395,65402,65401,65402,65401,65407,65407,65406,65406,65402,65401,65407,65407,65416,65416,65430,65429,65451,65451,65454,65454,65439,65440,65420,65420,65394,65394,65381,65382,65389,65389,65400,65400,65416,65417,65424,65425,65414,65415,65399,65399,65379,65379,65377,65377,65406,65406,65444,65444,65484,65484,65509,65510,65491,65491,65457,65456,65426,65426,65403,65403,65414,65414,65445,65445,65467,65467,65486,65486,65491,65492,65484,65484,65484,65484,65483,65483,65485,65484,65496,65495,65504,65504,65512,65512,65522,65523,65527,65528,65532,65532,65534,65534,65524,65523,65508,65507,65490,65491,65486,65486,65492,65492,65497,65497,65508,65508,65507,65507,65482,65483,65459,65458,65429,65430,65412,65411,65439,65439,65485,65484,65522,65522,20,20,31,31,31,30,42,41,45,45,37,36,28,28,16,17,6,5,65534,65534,65527,65527,65522,65523,65527,65526,10,11,30,30,42,42,55,55,51,51,35,36,33,33,23,24,9,9,7,8,65528,65528,65515,65515,65531,65532,16,16,40,39,59,60,46,45,25,25,9,9,65524,65525,65527,65528,65535,0,65532,65532,10,11,33,33,53,53,85,85,104,104,96,95,81,80,67,67,62,62,71,72,89,90,111,110,118,119,117,117,118,117,108,108,108,107,137,136,168,167,195,195,220,220,222,222,214,214,211,212,205,205,197,198,190,190,178,178,170,171,168,168,164,163,161,162,159,158,155,155,157,157,160,161,160,159,161,160,166,166,172,171,174,175,181,181,183,184,183,183,189,189,193,193,194,194,202,202,207,207,206,207,203,202,192,192,187,187,199,198,214,213,229,229,234,234,219,220,198,198,176,176,165,164,178,177,201,201,226,225,241,241,234,233,222,222,217,217,205,205,198,199,199,198,192,192,198,199,215,215,222,222,234,234,239,239,226,226,212,213,195,195,181,182,198,198,220,221,232,233,259,258,283,283,304,304,344,343,360,360,330,331,292,292,251,252,224,224,240,241,278,278,308,307,327,327,322,322,302,302,284,284,274,275,282,282,303,303,316,316,327,327,331,330,323,323,322,322,327,327,330,330,341,341,353,353,356,356,357,357,351,350,340,340,337,336,331,331,325,325,322,322,318,319,321,322,333,333,338,337,342,341,350,351,362,362,375,375,386,386,386,387,380,379,374,375,369,369,361,361,353,353,347,347,338,338,330,330,326,326,317,316,312,312,320,320,327,327,334,333,337,338,331,330,319,319,309,310,305,306,313,312,326,325,339,340,348,347,344,344,336,335,328,327,318,319,317,317,322,322,324,323,323,323,322,321,319,318,318,317,319,320,318,318,314,314,308,308,309,309,317,317,330,329,346,346,356,357,355,356,350,351,344,344,338,338,337,338,340,339,338,338,340,341,348,349,361,361,372,373,374,373,356,356,325,325,296,295,274,274,267,267,271,271,269,269,268,268,279,279,292,292,307,307,319,319,308,309,290,289,278,277,262,263,256,256,257,257,248,248,251,251,272,272,294,294,326,326,351,351,341,341,323,323,308,308,286,287,279,278,277,278,265,265,263,263,276,276,291,291,312,312,324,324,326,325,326,326,320,320,320,321,334,334,350,350,370,370,387,387,379,379,363,363,349,349,337,337,345,345,362,362,372,372,384,384,394,394,394,393,401,401,404,404,392,392,381,382,371,371,356,356,349,349,344,344,337,337,335,335,334,334,332,332,329,329,326,326,335,335,351,351,365,365,380,380,387,387,389,389,396,396,398,398,393,393,389,389,383,383,387,387,402,402,424,424,448,448,456,456,440,440,416,416,386,386,366,366,374,374,382,382,383,383,397,397,407,407,413,413,431,431,432,432,415,415,399,399,382,382,367,367,362,362,367,367,375,375,374,374,364,364,349,349,329,329,322,322,342,342,366,367,393,392,410,410,399,399,377,377,360,360,343,343,343,343,352,352,352,352,358,358,372,372,376,376,387,387,396,396,377,376,350,351,333,333,312,312,297,297,289,289,276,276,268,267,279,279,299,299,313,313,333,333,357,357,379,380,408,408,424,424,409,409,382,382,353,353,332,332,338,338,358,358,373,373,384,383,383,383,369,369,362,362,357,357,348,348,342,342,337,338,331,331,325,325,320,320,314,314,308,308,305,305,305,305,302,302,302,302,315,315,329,329,343,343,359,359,365,364,367,367,375,375,374,374,361,361,344,344,325,325,317,317,329,329,349,349,369,369,380,380,371,371,352,353,336,336,319,319,310,310,312,312,310,310,308,308,310,310,311,311,311,311,314,314,312,312,310,310,311,311,310,309,302,302,291,291,277,277,275,275,295,295,326,325,352,352,375,375,382,383,381,380,386,386,387,387,374,374,360,360,346,346,328,328,321,322,320,320,314,314,316,316,325,325,333,333,344,345,349,349,341,341,331,331,320,320,310,310,307,307,303,303,301,301,302,302,303,303,306,306,310,310,314,314,328,328,344,344,353,353,370,370,393,393,415,415,443,443,464,464,463,463,456,456,454,454,447,447,442,442,441,441,430,430,422,422,421,421,419,419,417,417,422,422,425,425,428,428,436,436,435,435,420,420,404,404,387,386,373,373,372,372,377,377,380,380,382,382,382,383,382,383,382,382,387,387,402,402,418,417,431,431,450,450,471,472,493,493,523,523,537,536,517,516,484,484,456,456,434,434,428,428,431,431,430,430,422,423,409,409,386,386,361,361,348,349,355,355,371,371,387,387,400,400,404,405,402,402,398,398,394,395,392,391,401,401,411,411,407,407,389,389,360,360,329,329,314,314,315,315,322,322,337,337,336,336,308,308,268,268,227,227,202,202,219,218,253,253,280,280,307,307,323,323,324,323,335,335,338,339,319,319,301,301,284,284,267,267,279,279,301,301,314,314,326,326,329,328,319,319,320,320,316,316,299,299,287,287,273,273,260,260,257,257,251,251,243,243,244,244,246,246,248,249,256,256,257,257,249,249,237,237,226,226,219,219,225,225,240,239,255,255,262,262,262,262,254,254,239,239,240,240,267,267,307,307,351,351,379,379,377,377,361,361,350,349,341,341,335,335,333,333,328,328,320,320,305,305,284,284,266,266,248,249,237,237,232,232,221,221,215,215,236,236,263,263,286,286,308,308,316,316,312,312,316,316,314,315,309,308,305,305,296,296,292,292,299,299,305,305,317,317,320,320,296,296,268,268,243,243,219,219,223,223,236,237,235,235,245,244,262,262,275,275,299,299,309,309,285,285,255,255,224,224,195,195,183,183,176,176,168,168,161,161,155,155,153,153,149,149,146,146,157,157,167,167,174,174,186,185,193,193,198,198,210,209,209,210,195,195,174,174,147,147,136,136,144,143,157,157,176,176,179,179,154,154,121,122,93,93,69,69,64,64,69,68,70,70,75,76,82,82,85,85,91,92,95,95,92,92,91,91,86,86,81,81,82,82,82,82,76,76,78,78,91,91,105,105,119,119,130,130,125,125,119,120,122,122,119,119,104,105,90,91,75,75,61,60,53,52,44,44,30,30,20,19,16,16,14,14,13,13,10,10,65532,65532,65512,65512,65493,65493,65478,65478,65480,65480,65493,65493,65500,65500,65508,65508,65520,65520,65526,65527,3,3,12,11,65535,65535,65519,65519,65510,65510,65496,65496,65488,65488,65488,65489,65487,65487,65484,65484,65477,65477,65466,65466,65456,65456,65451,65451,65460,65460,65471,65471,65475,65475,65489,65488,65511,65511,65528,65528,15,15,32,32,29,29,20,20,14,15,10,9,10,10,15,15,19,19,19,19,12,12,5,5,65533,65533,65526,65526,65522,65522,65521,65521,65519,65519,65516,65516,65515,65515,65512,65512,65509,65509,65510,65509,65517,65517,65529,65529,7,7,19,19,20,20,12,12,8,9,6,6,0,65532,65532,65528,65528,65527,65527,65534,65534,12,12,22,22,26,26,23,23,11,11,65531,65531,65530,65530,17,17,51,50,86,86,109,109,95,95,62,62,40,40,13,13,65515,65515,65486,65486,65448,65449,65416,65416,65418,65417,65431,65431,65437,65437,65447,65447,65453,65453,65454,65455,65466,65465,65469,65469,65455,65455,65436,65436,65415,65415,65395,65395,65384,65384,65376,65376,65366,65366,65355,65355,65337,65338,65317,65317,65300,65300,65286,65286,65277,65277,65272,65272,65265,65265,65258,65258,65254,65254,65251,65251,65248,65249,65248,65248,65241,65241,65232,65232,65229,65229,65217,65217,65193,65193,65169,65169,65138,65139,65119,65119,65141,65141,65176,65176,65208,65208,65235,65235,65237,65237,65230,65230,65237,65236,65231,65231,65216,65216,65201,65201,65176,65176,65166,65166,65176,65176,65189,65189,65206,65205,65214,65214,65198,65197,65170,65170,65142,65142,65124,65125,65135,65135,65157,65157,65178,65178,65196,65196,65205,65205,65213,65213,65222,65222,65229,65229,65241,65241,65255,65254,65261,65261,65265,65265,65256,65257,65241,65241,65236,65236,65230,65230,65224,65224,65223,65223,65215,65215,65209,65209,65206,65206,65197,65196,65189,65189,65186,65186,65186,65186,65192,65193,65198,65198,65199,65199,65192,65192,65179,65179,65173,65174,65165,65165,65144,65144,65123,65123,65096,65095,65084,65084,65117,65117,65165,65165,65210,65210,65250,65250,65257,65257,65250,65250,65254,65255,65249,65249,65248,65248,65258,65258,65253,65253,65263,65263,65297,65297,65330,65330,65372,65372,65397,65398,65369,65369,65323,65323,65281,65280,65242,65242,65231,65231,65236,65236,65232,65231,65227,65227,65223,65222,65213,65213,65202,65202,65197,65197,65201,65201,65213,65214,65227,65227,65237,65237,65231,65231,65214,65214,65202,65202,65195,65195,65194,65194,65199,65199,65202,65203,65201,65201,65198,65198,65192,65192,65183,65183,65180,65180,65191,65191,65209,65209,65227,65227,65242,65241,65238,65238,65225,65225,65220,65220,65204,65204,65176,65176,65150,65151,65121,65120,65098,65098,65103,65102,65111,65111,65111,65111,65115,65115,65109,65109,65098,65098,65094,65094,65089,65089,65076,65076,65059,65059,65040,65040,65026,65026,65021,65021,65025,65025,65032,65032,65035,65035,65033,65033,65028,65028,65023,65023,65021,65021,65022,65022,65027,65027,65034,65034,65035,65035,65040,65040,65048,65048,65048,65048,65053,65053,65066,65066,65080,65081,65097,65097,65112,65112,65114,65114,65106,65106,65099,65100,65104,65104,65114,65114,65129,65129,65152,65152,65155,65154,65118,65118,65068,65068,65016,65017,64982,64981,65000,65000,65041,65041,65069,65070,65105,65105,65143,65143,65175,65175,65216,65216,65241,65241,65238,65238,65230,65230,65221,65222,65217,65217,65231,65231,65249,65249,65262,65261,65270,65270,65261,65261,65248,65248,65244,65243,65229,65229,65201,65201,65164,65164,65119,65119,65092,65092,65099,65098,65114,65114,65129,65129,65144,65144,65153,65153,65164,65164,65181,65181,65186,65186,65178,65178,65166,65166,65155,65155,65145,65145,65142,65142,65141,65141,65138,65138,65135,65135,65139,65139,65145,65145,65146,65146,65150,65150,65159,65159,65168,65169,65178,65178,65187,65187,65189,65189,65185,65185,65187,65187,65185,65185,65175,65175,65162,65162,65151,65151,65139,65139,65126,65126,65113,65114,65099,65099,65092,65092,65109,65109,65136,65136,65153,65153,65172,65172,65187,65187,65195,65195,65214,65214,65223,65223,65200,65200,65170,65170,65141,65141,65117,65117,65123,65123,65148,65148,65164,65164,65180,65179,65187,65187,65186,65186,65191,65191,65195,65195,65194,65194,65193,65193,65190,65191,65191,65190,65191,65191,65184,65185,65176,65176,65172,65172,65172,65172,65179,65179,65185,65185,65180,65180,65166,65166,65145,65145,65125,65125,65113,65114,65118,65118,65139,65139,65161,65161,65170,65170,65169,65169,65159,65158,65148,65148,65148,65148,65155,65155,65163,65163,65172,65172,65170,65170,65154,65154,65129,65129,65100,65100,65091,65090,65101,65101,65117,65117,65136,65136,65141,65141,65126,65125,65107,65107,65088,65087,65075,65075,65089,65090,65123,65123,65153,65153,65174,65174,65167,65168,65144,65143,65126,65126,65106,65106,65083,65083,65066,65066,65044,65044,65032,65032,65047,65047,65066,65066,65082,65082,65103,65103,65122,65122,65137,65137,65155,65155,65162,65162,65157,65156,65149,65149,65142,65142,65139,65140,65142,65142,65146,65147,65152,65152,65153,65153,65147,65147,65138,65138,65128,65128,65117,65116,65115,65116,65120,65119,65121,65121,65123,65123,65125,65125,65120,65120,65116,65117,65114,65114,65106,65106,65100,65100,65096,65096,65090,65090,65091,65091,65093,65093,65090,65089,65101,65101,65129,65129,65166,65166,65211,65211,65233,65233,65214,65214,65180,65180,65143,65144,65122,65122,65135,65135,65160,65160,65181,65181,65194,65194,65177,65177,65147,65147,65129,65129,65108,65108,65099,65099,65105,65105,65096,65096,65099,65099,65127,65127,65151,65151,65180,65180,65204,65204,65203,65203,65201,65201,65201,65202,65199,65199,65216,65216,65240,65240,65261,65261,65280,65280,65273,65273,65249,65249,65238,65238,65229,65229,65226,65226,65231,65231,65228,65228,65224,65224,65224,65224,65219,65219,65216,65215,65210,65211,65205,65205,65206,65206,65198,65199,65202,65202,65234,65234,65268,65268,65301,65301,65328,65328,65323,65323,65306,65306,65297,65298,65284,65285,65275,65276,65275,65275,65270,65269,65264,65265,65268,65267,65269,65268,65271,65270,65271,65271,65266,65266,65260,65260,65255,65255,65250,65250,65232,65232,65206,65206,65182,65181,65163,65163,65161,65161,65173,65172,65178,65178,65183,65183,65189,65189,65188,65189,65192,65193,65197,65197,65194,65194,65188,65188,65184,65183,65185,65185,65207,65207,65239,65240,65270,65270,65291,65291,65299,65299,65310,65310,65323,65323,65335,65335,65349,65349,65358,65358,65366,65366,65381,65380,65382,65382,65374,65374,65374,65374,65364,65365,65342,65342,65324,65324,65297,65296,65278,65277,65296,65296,65326,65326,65350,65351,65379,65378,65396,65396,65401,65402,65411,65411,65418,65418,65411,65411,65401,65401,65394,65394,65383,65383,65371,65371,65364,65364,65356,65355,65345,65345,65345,65346,65346,65346,65341,65341,65348,65348,65367,65366,65392,65392,65426,65426,65448,65449,65446,65446,65434,65434,65421,65421,65414,65414,65422,65422,65440,65440,65458,65458,65471,65470,65474,65474,65470,65470,65466,65467,65465,65464,65462,65463,65458,65458,65452,65452,65446,65446,65447,65447,65452,65452,65452,65452,65458,65458,65472,65471,65482,65482,65495,65495,65501,65501,65492,65492,65481,65481,65473,65473,65464,65464,65468,65468,65481,65481,65488,65488,65497,65497,65506,65506,65513,65514,65528,65528,65534,65534,65527,65527,65517,65517,65509,65509,65504,65504,65508,65507,65510,65510,65507,65507,65506,65506,65510,65510,65514,65515,65517,65517,65519,65519,65518,65519,65512,65512,65507,65507,65502,65502,65483,65482,65461,65461,65439,65439,65421,65420,65416,65416,65422,65422,65423,65423,65427,65427,65442,65442,65460,65460,65483,65484,65494,65494,65476,65476,65445,65446,65418,65418,65400,65400,65406,65405,65425,65425,65438,65438,65448,65447,65455,65455,65456,65456,65459,65459,65465,65465,65469,65469,65472,65472,65477,65477,65481,65481,65480,65480,65474,65474,65472,65472,65465,65465,65447,65448,65431,65431,65413,65413,65395,65395,65394,65394,65395,65395,65390,65390,65393,65392,65401,65402,65413,65412,65429,65430,65437,65437,65428,65427,65414,65414,65399,65399,65389,65389,65390,65390,65396,65396,65402,65402,65405,65405,65403,65403,65401,65401,65396,65396,65395,65395,65399,65399,65400,65400,65402,65402,65408,65407,65406,65405,65403,65403,65408,65408,65401,65401,65381,65381,65360,65360,65336,65336,65320,65320,65323,65323,65335,65335,65347,65347,65356,65356,65360,65360,65359,65359,65355,65355,65356,65356,65364,65364,65370,65370,65375,65374,65381,65382,65391,65391,65403,65404,65415,65416,65422,65422,65419,65419,65412,65412,65409,65409,65402,65402,65385,65384,65369,65368,65356,65355,65342,65342,65340,65339,65339,65340,65334,65334,65340,65339,65355,65356,65377,65377,65401,65402,65415,65415,65412,65412,65400,65401,65385,65386,65381,65380,65391,65390,65407,65407,65423,65423,65430,65430,65424,65423,65412,65412,65400,65401,65399,65398,65412,65412,65434,65435,65462,65462,65479,65480,65465,65466,65435,65435,65406,65405,65383,65384,65388,65388,65408,65409,65420,65420,65432,65432,65446,65447,65456,65456,65468,65468,65480,65480,65482,65482,65485,65484,65489,65490,65487,65488,65480,65479,65467,65468,65453,65453,65448,65447,65462,65462,65489,65489,65517,65516,2,2,10,11,8,7,3,4,1,1,65531,65530,65526,65526,65523,65523,65519,65518,65517,65517,65520,65519,65521,65521,65519,65519,65510,65510,65497,65498,65484,65484,65476,65475,65477,65477,65477,65477,65475,65474,65479,65479,65486,65485,65494,65493,65508,65509,65518,65518,65517,65517,65516,65515,65510,65511,65509,65509,65519,65520,65533,65533,10,9,17,17,15,16,16,16,15,16,12,13,19,19,29,29,35,35,45,45,48,48,42,42,46,46,47,46,32,32,16,17,0,65535,65519,65518,65512,65513,65506,65506,65493,65494,65491,65491,65503,65503,65518,65517,65531,65531,8,8,15,15,24,24,39,39,44,44,37,36,28,29,18,18,11,11,26,26,49,49,65,65,86,86,103,102,113,113,130,131,139,139,126,126,109,109,92,93,80,79,77,78,83,82,87,87,91,91,94,94,93,94,90,89,90,89,100,101,112,111,119,120,130,129,134,134,137,138,147,147,149,148,142,141,135,136,125,125,122,122,141,141,169,169,195,196,219,219,228,228,228,228,234,233,230,231,204,204,171,171,139,140,114,114,120,120,144,144,155,154,170,170,192,192,206,207,228,227,243,243,230,230,215,215,204,204,192,193,196,195,199,198,193,194,199,199,204,205,209,209,221,221,221,221,216,216,215,215,207,207,206,206,220,220,237,236,256,257,268,268,260,260,245,245,228,227,218,218,226,227,240,239,253,254,257,258,231,232,194,195,160,161,140,139,155,155,188,188,213,213,243,243,265,266,279,279,301,301,306,306,286,286,264,264,240,239,221,222,224,224,233,233,242,242,247,246,237,236,219,218,200,199,191,191,206,206,229,229,253,253,269,269,257,257,232,232,213,213,200,201,206,206,225,224,236,235,243,242,239,239,224,225,218,218,212,213,212,212,223,224,228,227,233,233,252,251,269,269,287,286,305,305,311,310,312,313,318,319,315,316,306,307,293,292,278,277,269,270,264,264,260,259,255,255,244,245,234,234,223,222,207,207,202,202,215,216,237,238,264,264,282,282,278,279,271,270,266,266,258,258,253,252,248,248,239,238,240,241,260,260,282,283,306,306,326,326,330,330,330,330,336,335,336,336,334,333,332,332,327,326,327,328,339,340,352,351,362,362,376,376,392,392,412,412,433,434,442,443,437,438,425,425,411,411,404,405,413,414,432,431,445,446,457,457,468,468,475,474,482,483,493,493,491,491,485,486,488,487,478,478,450,450,416,415,378,378,351,351,357,356,373,372,378,377,388,388,406,406,421,421,443,443,459,458,453,453,447,447,445,444,434,433,425,425,418,419,405,406,403,403,414,413,426,426,441,441,448,448,432,431,408,408,389,388,371,372,358,358,345,345,328,328,320,320,328,329,345,346,362,361,375,374,385,385,394,394,404,405,411,411,406,407,394,394,383,383,378,378,382,381,391,391,401,401,406,406,405,404,398,398,392,392,391,391,402,402,422,422,442,441,451,451,450,450,443,443,434,435,435,434,447,448,464,463,479,480,492,492,482,483,461,461,449,449,438,438,431,431,436,436,433,434,435,434,459,460,488,489,513,512,532,532,527,528,511,511,503,503,489,488,464,464,434,435,399,400,377,378,382,382,397,398,411,412,421,422,427,428,434,435,444,443,450,450,451,450,448,447,447,446,439,438,416,415,384,384,355,354,334,333,332,331,341,342,350,350,354,355,355,354,348,348,341,341,340,340,349,349,366,367,387,386,399,398,391,391,370,370,350,350,334,335,325,324,325,324,323,323,320,321,327,328,336,336,341,341,351,350,364,364,380,379,400,400,413,413,409,410,397,397,384,384,380,380,389,389,405,405,422,423,430,430,422,422,408,408,391,391,380,381,393,393,416,416,433,433,450,450,461,460,462,462,469,469,473,473,468,468,466,466,466,465,456,456,435,435,406,406,377,377,357,357,352,352,356,356,355,356,358,358,361,361,356,356,352,352,353,354,358,358,371,372,382,382,386,385,395,396,412,411,429,428,440,441,433,434,419,419,411,411,410,409,421,420,437,436,448,447,463,464,478,478,489,490,509,508,513,513,494,495,471,470,440,440,421,422,438,438,463,462,483,484,507,507,518,517,520,520,528,528,526,527,509,510,489,490,470,471,454,453,443,443,435,434,423,423,415,415,422,423,439,439,453,452,460,460,458,457,449,448,441,441,435,436,428,429,426,425,425,425,421,422,409,409,394,393,378,379,365,365,361,361,358,358,350,350,350,350,355,355,361,360,374,374,375,375,349,350,316,317,282,282,261,262,276,275,305,304,325,324,340,341,349,348,350,349,354,355,358,358,354,354,347,348,343,343,338,337,326,325,318,318,311,310,297,298,296,295,300,300,297,297,305,305,321,322,331,331,349,349,357,357,332,333,296,297,261,261,230,230,222,222,228,228,229,228,220,220,199,200,168,168,137,137,120,120,124,123,138,138,156,155,170,171,170,171,163,162,157,158,152,153,158,158,172,173,182,183,189,190,191,191,185,186,184,185,181,180,171,171,167,166,160,159,153,152,151,151,145,144,137,136,133,133,127,127,124,123,123,123,118,119,120,120,120,120,117,117,126,125,137,138,153,152,177,176,184,183,166,167,142,143,113,114,96,96,110,109,132,132,151,151,164,165,162,161,150,151,143,143,133,133,127,127,127,127,125,124,124,124,129,130,133,134,137,136,140,139,137,136,127,127,121,122,119,120,111,111,105,105,104,103,87,88,61,61,31,32,65529,65529,65512,65512,3,3,46,46,87,87,116,116,112,112,92,92,77,78,68,69,78,79,104,104,126,126,138,138,126,125,94,93,74,73,57,57,39,38,28,28,11,12,65532,65532,2,1,5,6,1,1,13,12,43,43,87,86,135,136,162,162,156,157,136,135,117,117,100,101,82,81,64,63,44,44,25,25,19,19,15,16,9,8,9,8,5,4,65529,65530,65527,65526,65521,65521,65510,65510,65507,65508,65499,65500,65491,65491,65501,65501,65513,65512,65519,65520,65531,65531,1,2,5,5,16,15,16,17,65535,65535,65511,65510,65485,65486,65467,65467,65463,65463,65467,65468,65473,65472,65470,65470,65455,65456,65434,65433,65411,65410,65398,65399,65409,65410,65434,65433,65456,65456,65470,65470,65471,65472,65466,65466,65464,65464,65460,65460,65454,65453,65446,65445,65436,65437,65433,65433,65435,65435,65434,65433,65435,65435,65435,65436,65419,65419,65403,65403,65392,65392,65377,65377,65384,65384,65402,65401,65402,65403,65417,65416,65450,65451,65486,65485,65528,65529,20,20,3,2,65506,65506,65480,65480,65461,65461,65459,65459,65463,65463,65464,65465,65463,65463,65456,65455,65446,65446,65434,65434,65428,65427,65444,65445,65469,65470,65490,65489,65511,65511,65520,65519,65521,65521,65535,65535,65533,65534,65510,65510,65485,65486,65456,65455,65440,65440,65461,65461,65491,65491,65515,65516,2,2,2,2,65525,65524,65520,65520,65516,65516,65511,65511,65512,65513,65512,65513,65513,65513,65523,65523,2,2,12,12,17,17,16,16,10,10,3,3,0,1,65533,65532,65526,65527,65521,65521,65516,65516,65516,65515,65519,65520,65523,65522,65525,65524,65531,65531,3,2,13,14,19,19,2,3,65514,65513,65495,65495,65476,65475,65459,65458,65444,65444,65419,65420,65411,65411,65439,65439,65478,65478,65517,65517,12,13,15,15,7,7,5,6,1,0,5,5,19,18,23,24,27,27,24,24,12,13,10,10,65535,65534,65499,65499,65456,65456,65407,65406,65372,65372,65382,65383,65407,65406,65426,65426,65445,65445,65446,65446,65439,65440,65446,65445,65437,65438,65410,65411,65382,65382,65347,65347,65326,65326,65343,65343,65374,65375,65403,65402,65429,65429,65441,65441,65442,65441,65451,65451,65458,65458,65445,65446,65435,65436,65428,65428,65410,65410,65400,65399,65393,65393,65377,65376,65372,65373,65379,65380,65376,65375,65373,65374,65378,65378,65382,65381,65393,65394,65404,65404,65407,65406,65410,65410,65416,65415,65422,65422,65426,65425,65415,65414,65401,65401,65389,65390,65379,65378,65374,65374,65370,65370,65362,65362,65360,65360,65356,65355,65348,65347,65345,65344,65332,65332,65314,65314,65298,65297,65273,65272,65265,65266,65295,65295,65337,65338,65381,65381,65407,65408,65385,65386,65343,65343,65307,65307,65273,65274,65256,65255,65252,65253,65244,65244,65240,65240,65245,65245,65247,65248,65251,65251,65253,65254,65251,65251,65250,65251,65252,65251,65253,65254,65258,65258,65257,65257,65254,65254,65254,65255,65248,65249,65240,65240,65237,65237,65234,65234,65235,65235,65242,65243,65245,65244,65248,65248,65260,65259,65273,65274,65288,65287,65295,65295,65290,65290,65284,65283,65278,65277,65273,65273,65278,65278,65284,65284,65287,65287,65288,65288,65278,65278,65263,65262,65251,65252,65248,65247,65258,65258,65274,65275,65290,65290,65307,65307,65318,65317,65325,65325,65338,65338,65343,65342,65335,65334,65325,65326,65313,65313,65303,65302,65306,65306,65313,65314,65316,65316,65325,65324,65344,65344,65371,65371,65398,65399,65416,65415,65409,65409,65385,65386,65364,65365,65348,65348,65331,65331,65316,65316,65301,65301,65288,65288,65283,65282,65278,65279,65274,65274,65273,65273,65273,65274,65283,65283,65291,65292,65294,65294,65304,65303,65312,65312,65315,65315,65331,65331,65350,65350,65369,65370,65399,65398,65408,65407,65386,65385,65352,65352,65315,65315,65296,65297,65316,65316,65352,65353,65385,65386,65403,65403,65390,65389,65355,65356,65323,65323,65303,65303,65302,65302,65316,65316,65332,65332,65334,65333,65318,65318,65296,65296,65270,65269,65260,65261,65288,65289,65332,65331,65371,65372,65405,65406,65408,65409,65396,65396,65397,65396,65392,65392,65381,65380,65371,65371,65352,65352,65342,65341,65351,65351,65365,65364,65380,65381,65385,65385,65367,65368,65344,65344,65320,65321,65308,65307,65325,65326,65359,65359,65388,65389,65413,65413,65416,65416,65406,65405,65404,65403,65401,65401,65399,65399,65400,65399,65394,65394,65391,65391,65396,65396,65399,65400,65402,65403,65403,65403,65391,65391,65379,65378,65366,65366,65351,65352,65349,65349,65354,65354,65356,65356,65364,65364,65368,65368,65361,65362,65360,65359,65353,65353,65329,65329,65302,65301,65273,65274,65251,65250,65251,65251,65266,65266,65279,65278,65286,65287,65283,65284,65275,65274,65270,65270,65268,65267,65268,65267,65270,65270,65267,65267,65268,65269,65283,65283,65300,65300,65318,65319,65336,65335,65340,65340,65337,65336,65338,65339,65346,65346,65353,65352,65363,65364,65376,65376,65378,65379,65375,65375,65370,65371,65358,65358,65353,65352,65372,65371,65401,65401,65430,65430,65446,65445,65429,65429,65395,65396,65371,65370,65352,65352,65343,65344,65339,65339,65328,65328,65325,65324,65334,65335,65345,65344,65354,65355,65364,65364,65369,65368,65375,65376,65386,65386,65388,65388,65379,65378,65359,65359,65336,65336,65323,65322,65329,65329,65352,65351,65375,65374,65381,65381,65371,65372,65348,65347,65325,65325,65318,65319,65330,65330,65353,65353,65382,65382,65394,65395,65381,65382,65355,65355,65329,65330,65314,65313,65319,65320,65338,65339,65354,65354,65362,65361,65355,65355,65336,65336,65317,65316,65305,65306,65298,65297,65293,65293,65289,65290,65283,65284,65273,65272,65259,65258,65243,65243,65233,65233,65239,65238,65251,65251,65260,65261,65271,65272,65284,65284,65294,65294,65309,65309,65315,65314,65294,65295,65266,65265,65241,65240,65220,65219,65221,65222,65239,65240,65250,65249,65263,65264,65283,65284,65300,65300,65325,65324,65338,65337,65317,65318,65288,65288,65261,65261,65236,65236,65229,65229,65230,65230,65221,65221,65224,65223,65242,65242,65262,65261,65283,65283,65298,65298,65296,65296,65289,65289,65287,65287,65283,65282,65277,65277,65272,65272,65265,65265,65260,65260,65262,65262,65264,65265,65270,65270,65273,65273,65268,65268,65262,65262,65255,65255,65249,65250,65255,65255,65264,65265,65271,65271,65276,65276,65273,65273,65270,65270,65269,65269,65266,65266,65269,65269,65271,65271,65264,65264,65266,65266,65274,65274,65283,65283,65302,65302,65311,65311,65296,65296,65278,65278,65257,65257,65247,65247,65266,65266,65294,65294,65322,65322,65341,65341,65331,65331,65310,65310,65295,65295,65284,65284,65293,65293,65311,65311,65315,65315,65324,65324,65340,65340,65356,65356,65378,65378,65390,65390,65380,65380,65365,65365,65347,65346,65336,65337,65345,65345,65359,65358,65374,65374,65382,65383,65365,65365,65334,65334,65301,65300,65277,65277,65282,65282,65301,65301,65314,65314,65321,65321,65314,65314,65301,65301,65292,65292,65283,65283,65283,65283,65289,65289,65286,65286,65289,65289,65294,65294,65297,65297,65306,65307,65307,65307,65286,65286,65267,65267,65252,65251,65233,65234,65227,65227,65223,65223,65214,65214,65211,65211,65209,65209,65202,65202,65192,65192,65187,65187,65197,65197,65214,65214,65229,65229,65248,65248,65256,65256,65257,65257,65265,65265,65262,65262,65242,65242,65220,65220,65192,65192,65175,65175,65183,65183,65200,65200,65217,65217,65229,65229,65227,65227,65220,65220,65213,65213,65209,65209,65226,65226,65253,65253,65275,65275,65296,65296,65291,65291,65273,65273,65269,65269,65261,65260,65241,65241,65228,65228,65209,65209,65193,65193,65208,65208,65231,65231,65246,65246,65261,65261,65273,65273,65283,65283,65294,65294,65303,65303,65299,65300,65285,65285,65276,65276,65274,65274,65270,65270,65266,65265,65262,65262,65255,65255,65250,65250,65247,65247,65245,65245,65246,65246,65243,65243,65240,65240,65239,65239,65234,65234,65235,65235,65242,65243,65243,65243,65243,65243,65243,65243,65236,65236,65237,65237,65238,65238,65239,65239,65246,65247,65248,65248,65251,65251,65278,65278,65305,65305,65331,65331,65361,65361,65369,65369,65374,65373,65394,65394,65394,65395,65368,65368,65335,65335,65294,65294,65269,65269,65281,65281,65305,65305,65323,65323,65331,65331,65320,65319,65293,65293,65271,65271,65261,65261,65263,65263,65272,65272,65285,65285,65288,65288,65272,65272,65243,65243,65211,65212,65192,65192,65198,65198,65222,65222,65245,65245,65257,65257,65256,65256,65244,65244,65236,65236,65234,65234,65235,65235,65245,65245,65255,65255,65264,65264,65285,65285,65304,65304,65317,65317,65329,65329,65331,65331,65324,65324,65326,65326,65322,65322,65311,65311,65305,65305,65298,65298,65292,65291,65290,65290,65285,65285,65284,65284,65280,65279,65270,65270,65264,65264,65254,65254,65247,65247,65254,65254,65256,65256,65256,65256,65263,65263,65250,65249,65232,65232,65226,65226,65211,65211,65207,65207,65214,65214,65201,65201,65212,65212,65258,65258,65309,65309,65373,65373,65411,65411,65385,65386,65342,65342,65302,65302,65273,65273,65284,65284,65313,65313,65332,65332,65346,65346,65340,65340,65318,65319,65303,65303,65291,65291,65284,65284,65286,65286,65285,65285,65283,65283,65282,65282,65277,65277,65275,65275,65271,65271,65261,65261,65250,65250,65238,65238,65223,65223,65207,65207,65191,65191,65174,65174,65168,65168,65188,65188,65220,65220,65245,65245,65271,65271,65293,65293,65303,65303,65323,65323,65334,65334,65310,65310,65283,65283,65259,65259,65238,65238,65242,65242,65260,65260,65268,65268,65280,65279,65290,65290,65294,65294,65304,65304,65310,65310,65307,65307,65309,65309,65308,65308,65306,65306,65315,65315,65320,65320,65316,65316,65323,65323,65343,65343,65370,65370,65399,65399,65419,65419,65419,65419,65412,65412,65407,65407,65406,65406,65413,65413,65427,65427,65439,65439,65439,65439,65417,65417,65380,65380,65345,65345,65320,65320,65313,65313,65319,65320,65323,65323,65320,65320,65320,65320,65315,65315,65309,65309,65313,65312,65321,65321,65335,65335,65353,65353,65359,65359,65352,65352,65338,65338,65324,65324,65320,65320,65330,65330,65347,65347,65369,65369,65383,65383,65379,65379,65367,65367,65353,65353,65345,65345,65357,65357,65383,65383,65399,65399,65419,65419,65438,65438,65446,65447,65463,65463,65474,65474,65465,65465,65455,65455,65446,65446,65434,65434,65441,65441,65452,65452,65456,65456,65465,65465,65463,65463,65454,65455,65455,65455,65449,65449,65428,65428,65408,65408,65392,65392,65379,65379,65373,65373,65367,65366,65355,65355,65350,65351,65368,65368,65391,65391,65407,65407,65426,65426,65444,65444,65458,65458,65478,65478,65493,65493,65493,65492,65493,65493,65494,65494,65489,65489,65484,65484,65472,65472,65462,65462,65458,65458,65454,65454,65453,65453,65455,65455,65448,65448,65451,65451,65461,65461,65463,65463,65472,65472,65484,65484,65495,65495,65511,65511,65514,65514,65490,65490,65454,65454,65418,65417,65395,65395,65405,65405,65428,65428,65448,65448,65465,65465,65480,65480,65493,65493,65508,65508,65522,65522,65522,65522,65518,65518,65520,65520,65513,65513,65493,65493,65465,65465,65428,65428,65409,65410,65431,65431,65468,65468,65504,65504,65533,65533,1,1,65531,65531,65533,65533,65530,65531,65532,65532,4,4,7,7,8,8,12,12,15,15,20,20,24,24,23,23,22,22,18,18,16,16,18,18,21,21,25,24,37,37,57,57,80,80,100,100,113,113,114,114,106,106,101,101,93,93,68,68,37,37,7,8,65518,65518,65508,65508,65505,65505,65496,65496,65490,65490,65496,65497,65508,65508,65519,65519,65531,65531,12,12,32,32,54,54,65,65,55,55,35,35,20,20,7,7,65532,65532,65526,65525,65514,65514,65505,65505,65506,65506,65506,65506,65506,65506,65508,65507,65506,65506,65504,65504,65505,65505,65506,65506,65507,65507,65509,65510,65514,65514,65518,65518,65520,65520,65519,65519,65520,65520,65518,65518,65516,65516,65516,65516,65510,65510,65505,65505,65510,65510,65513,65513,65518,65518,65527,65527,65528,65528,65529,65529,0,65534,65534,65534,65534,3,3,1,1,1,1,10,10,13,13,20,20,30,30,39,38,52,52,64,64,68,68,72,72,70,70,72,72,81,81,89,88,95,95,105,105,110,110,119,119,129,129,136,136,142,142,141,141,135,135,130,130,124,124,122,122,124,124,120,120,122,122,139,139,158,158,180,180,192,192,185,186,175,175,164,164,155,155,158,158,163,163,169,169,180,180,185,185,183,183,186,185,186,186,181,181,175,175,168,168,161,161,162,162,165,165,166,166,173,173,189,189,213,213,240,240,246,246,223,223,189,189,154,154,138,138,163,163,206,206,239,239,266,266,270,270,259,259,254,255,249,249,241,241,234,234,227,227,221,221,209,209,195,195,188,188,174,174,151,151,131,131,102,103,89,89,113,113,146,146,175,175,200,200,207,207,205,205,210,210,218,218,222,222,231,231,245,245,246,246,229,229,207,207,177,177,166,165,206,206,262,262,315,315,357,357,345,345,307,307,288,288,266,265,263,263,287,287,288,288,297,297,328,328,342,342,364,364,388,388,385,384,383,384,391,391,383,384,374,374,356,356,331,331,321,321,322,323,334,333,348,347,351,351,342,342,327,327,312,312,307,307,321,321,349,349,373,373,392,392,427,427,456,457,481,481,512,512,514,514,504,504,511,511,499,499,474,474,456,456,422,422,406,407,423,423,438,438,461,461,479,479,473,473,464,464,450,450,441,441,470,470,511,511,556,556,588,588,566,566,522,522,493,492,464,464,461,461,470,470,461,461,468,468,504,504,547,547,596,596,627,627,628,627,614,614,601,601,595,595,592,592,589,589,593,593,586,586,566,566,543,543,513,513,496,496,516,516,545,545,575,575,593,593,577,577,543,543,515,515,490,490,488,488,504,504,512,512,519,519,532,532,540,540,553,553,564,564,545,546,519,519,509,509,489,489,462,462,435,435,396,396,377,377,408,408,451,451,487,486,514,514,514,514,503,503,500,500,501,501,513,513,533,533,554,554,569,569,561,561,543,543,535,535,517,517,500,500,490,490,463,464,453,453,469,469,489,489,518,518,539,539,534,534,521,521,506,506,505,505,532,532,565,565,600,600,628,628,626,626,617,617,612,612,593,593,582,582,579,579,565,565,560,561,565,565,567,567,571,571,573,573,574,574,575,575,576,575,584,584,578,578,561,561,556,556,537,537,511,511,494,494,460,460,445,445,489,489,548,548,612,612,663,663,659,659,631,631,611,611,591,590,585,585,591,591,589,589,587,587,578,578,559,559,545,545,529,529,513,512,500,500,482,482,471,471,481,482,497,497,508,508,525,525,539,539,549,549,566,566,574,574,556,556,539,540,531,531,511,511,495,495,481,481,454,454,447,447,468,468,493,493,521,521,542,542,540,540,529,529,520,520,510,510,497,497,484,484,475,475,459,459,442,442,428,428,405,405,394,394,415,415,442,442,470,470,492,492,478,478,454,454,442,442,421,421,408,408,407,407,397,397,400,400,418,418,430,430,445,445,459,459,471,471,484,484,496,496,500,500,493,493,481,481,474,474,463,463,456,456,450,450,436,436,436,436,450,450,465,465,493,493,503,503,472,472,436,436,398,398,374,374,410,410,467,467,509,509,545,545,548,548,527,527,522,522,513,513,496,496,482,482,461,461,444,444,431,431,409,409,390,390,378,378,378,378,400,400,419,419,430,430,441,441,449,449,458,458,463,462,447,447,428,428,409,409,395,395,400,400,403,404,404,404,411,411,415,415,417,417,425,425,427,427,421,421,411,411,401,401,391,391,380,380,375,375,369,369,361,361,374,374,392,392,404,404,419,419,423,423,417,417,419,419,414,414,395,395,376,376,353,352,339,339,340,340,345,345,355,355,358,358,346,346,329,329,303,304,286,286,299,299,322,322,347,347,361,361,337,337,297,297,263,263,234,234,234,234,250,250,255,255,261,261,252,252,228,228,219,219,205,205,184,184,171,171,148,149,137,137,157,157,178,178,199,199,212,212,195,194,169,169,153,152,133,133,122,123,120,120,110,110,107,107,113,113,121,121,135,135,144,143,142,142,132,132,119,119,109,109,112,112,121,121,131,132,140,140,142,142,140,140,138,138,139,139,139,139,141,142,147,147,144,144,128,129,112,112,95,95,74,74,65,65,53,53,33,33,24,24,35,35,54,54,79,79,95,95,90,90,76,75,63,63,50,50,41,40,29,29,17,17,12,12,17,17,29,29,37,37,37,37,33,33,27,27,21,22,17,17,5,5,65523,65523,65508,65508,65499,65499,65505,65505,65524,65524,7,7,19,19,22,22,17,17,14,14,16,16,16,16,14,14,14,14,11,11,13,13,23,23,26,26,32,32,43,43,47,47,53,53,58,57,49,49,39,39,33,33,22,22,20,21,22,22,18,18,24,24,39,38,54,54,77,77,88,88,74,74,60,60,44,44,28,28,33,33,44,44,46,46,59,59,71,71,69,69,77,77,80,80,59,59,37,37,13,13,65524,65524,65521,65522,65534,65534,4,4,12,12,17,17,13,12,11,11,11,11,65532,65532,65515,65515,65498,65499,65481,65481,65472,65472,65467,65467,65458,65458,65447,65447,65441,65441,65443,65443,65448,65448,65449,65449,65442,65442,65427,65427,65409,65409,65403,65403,65413,65413,65430,65430,65448,65448,65456,65456,65443,65443,65420,65420,65395,65395,65384,65384,65396,65396,65424,65424,65448,65448,65460,65459,65448,65448,65423,65423,65409,65409,65400,65400,65394,65394,65397,65398,65393,65393,65391,65391,65406,65406,65422,65421,65436,65436,65460,65460,65478,65478,65499,65499,65525,65525,1,1,3,3,65533,65533,65519,65519,65518,65518,65533,65533,21,21,50,50,58,58,40,40,13,13,65518,65518,65507,65508,65522,65522,9,9,38,38,50,50,20,19,65509,65509,65462,65462,65433,65433,65453,65453,65495,65495,65525,65525,15,15,27,27,22,22,27,27,28,28,14,15,9,9,3,3,65529,65528,65521,65521,65512,65513,65504,65504,65501,65501,65505,65504,65511,65512,65513,65513,65513,65513,65514,65514,65512,65511,65508,65508,65506,65506,65496,65496,65485,65485,65475,65475,65462,65462,65448,65448,65432,65432,65418,65418,65408,65408,65402,65402,65399,65399,65400,65401,65403,65403,65410,65410,65419,65419,65425,65424,65423,65422,65408,65408,65388,65388,65371,65371,65349,65349,65331,65330,65312,65313,65286,65286,65280,65280,65304,65304,65335,65335,65370,65370,65391,65391,65380,65380,65361,65362,65346,65347,65330,65330,65325,65325,65324,65324,65322,65322,65322,65322,65311,65311,65294,65293,65283,65282,65272,65273,65269,65269,65272,65271,65265,65265,65255,65255,65244,65244,65233,65233,65226,65225,65220,65219,65215,65215,65212,65213,65204,65205,65201,65201,65207,65207,65213,65212,65220,65220,65226,65227,65227,65227,65229,65229,65233,65233,65236,65235,65235,65235,65225,65225,65218,65219,65218,65218,65215,65215,65219,65220,65226,65225,65222,65223,65227,65227,65237,65237,65239,65238,65243,65244,65254,65253,65261,65262,65274,65273,65279,65279,65272,65271,65258,65258,65246,65246,65237,65237,65231,65232,65222,65223,65214,65215,65209,65208,65205,65204,65202,65202,65196,65196,65194,65195,65206,65206,65217,65218,65232,65232,65243,65242,65238,65237,65235,65235,65241,65240,65236,65236,65229,65230,65224,65225,65208,65208,65202,65202,65224,65224,65252,65252,65280,65280,65307,65306,65310,65310,65298,65299,65296,65297,65291,65291,65276,65277,65269,65269,65261,65261,65245,65246,65234,65233,65217,65216,65193,65193,65184,65184,65196,65196,65214,65214,65233,65233,65245,65245,65245,65245,65240,65240,65232,65233,65230,65230,65239,65240,65253,65253,65268,65268,65276,65275,65262,65262,65240,65239,65227,65227,65209,65208,65179,65178,65153,65154,65126,65126,65103,65102,65101,65100,65101,65101,65092,65093,65098,65099,65121,65121,65146,65146,65174,65175,65200,65201,65221,65222,65245,65245,65270,65271,65290,65291,65294,65294,65292,65292,65298,65298,65298,65297,65286,65287,65275,65274,65254,65253,65242,65241,65264,65264,65295,65294,65321,65320,65340,65339,65330,65331,65309,65308,65293,65292,65274,65273,65258,65259,65245,65246,65224,65224,65216,65216,65222,65221,65230,65230,65247,65247,65250,65251,65229,65230,65209,65209,65185,65186,65166,65167,65167,65168,65172,65173,65173,65173,65175,65175,65173,65174,65171,65171,65171,65170,65177,65178,65199,65198,65226,65225,65255,65255,65273,65273,65262,65261,65240,65239,65225,65224,65205,65204,65189,65189,65178,65177,65157,65156,65150,65150,65168,65169,65189,65190,65213,65213,65225,65226,65210,65210,65184,65185,65162,65163,65153,65153,65165,65166,65186,65186,65202,65202,65212,65212,65211,65211,65207,65206,65203,65204,65198,65198,65202,65203,65216,65216,65224,65224,65234,65235,65253,65252,65269,65269,65288,65287,65306,65306,65310,65310,65306,65306,65307,65307,65306,65306,65293,65293,65277,65277,65266,65265,65247,65246,65221,65221,65200,65199,65174,65174,65154,65154,65161,65161,65176,65176,65182,65182,65201,65201,65237,65238,65274,65274,65312,65313,65341,65341,65340,65341,65329,65330,65323,65323,65313,65313,65305,65304,65301,65300,65296,65295,65296,65297,65306,65307,65321,65321,65337,65337,65347,65347,65344,65343,65334,65333,65326,65326,65322,65321,65325,65325,65338,65337,65345,65346,65348,65347,65350,65350,65347,65347,65339,65340,65344,65343,65358,65358,65375,65374,65394,65395,65408,65408,65401,65402,65384,65384,65372,65371,65357,65357,65348,65347,65346,65345,65339,65340,65340,65340,65360,65360,65382,65381,65399,65399,65411,65411,65405,65405,65390,65390,65385,65385,65373,65373,65354,65355,65341,65342,65324,65324,65311,65311,65319,65319,65330,65329,65334,65334,65337,65337,65329,65329,65318,65319,65314,65315,65305,65304,65286,65285,65261,65261,65231,65232,65218,65218,65227,65226,65242,65242,65262,65263,65272,65271,65256,65256,65231,65230,65207,65207,65190,65190,65191,65192,65207,65206,65216,65216,65222,65223,65229,65229,65231,65231,65234,65234,65242,65242,65243,65244,65244,65244,65253,65253,65256,65255,65246,65247,65237,65237,65223,65223,65218,65217,65240,65241,65271,65272,65297,65297,65321,65321,65336,65336,65343,65343,65354,65355,65359,65358,65354,65354,65351,65352,65352,65352,65353,65353,65352,65353,65348,65347,65343,65343,65346,65346,65363,65363,65389,65390,65412,65412,65422,65422,65408,65408,65372,65372,65340,65339,65315,65316,65305,65305,65310,65309,65306,65307,65308,65307,65335,65335,65370,65370,65405,65405,65433,65432,65431,65432,65425,65424,65426,65426,65415,65414,65392,65391,65363,65363,65330,65329,65307,65308,65293,65293,65282,65282,65273,65272,65266,65265,65274,65275,65291,65290,65296,65297,65316,65317,65347,65347,65374,65374,65411,65411,65428,65428,65401,65402,65364,65363,65326,65325,65294,65294,65292,65292,65302,65302,65311,65312,65318,65318,65306,65306,65290,65290,65275,65275,65254,65254,65254,65255,65266,65267,65265,65265,65278,65277,65299,65299,65309,65309,65330,65330,65345,65345,65328,65327,65304,65305,65288,65287,65269,65270,65266,65265,65271,65272,65274,65273,65275,65274,65275,65276,65274,65274,65274,65273,65275,65276,65281,65280,65288,65288,65294,65295,65298,65298,65302,65302,65300,65300,65296,65296,65294,65294,65288,65288,65281,65282,65281,65280,65276,65276,65265,65265,65256,65257,65245,65246,65239,65239,65248,65248,65262,65262,65275,65275,65287,65288,65291,65290,65287,65288,65285,65285,65284,65285,65293,65293,65305,65305,65317,65317,65329,65330,65332,65331,65331,65331,65337,65337,65333,65334,65316,65316,65295,65295,65268,65268,65256,65255,65275,65276,65314,65313,65348,65347,65371,65371,65382,65382,65383,65383,65385,65384,65394,65395,65400,65400,65402,65401,65412,65411,65404,65405,65371,65371,65330,65331,65284,65284,65259,65259,65290,65290,65342,65342,65388,65388,65419,65419,65408,65409,65374,65375,65349,65349,65331,65332,65332,65332,65346,65346,65352,65352,65359,65358,65365,65365,65369,65369,65386,65386,65390,65389,65371,65370,65354,65354,65330,65329,65313,65313,65335,65335,65364,65364,65386,65387,65409,65408,65406,65405,65385,65385,65374,65374,65362,65363,65353,65353,65350,65350,65343,65343,65345,65345,65360,65360,65374,65374,65391,65391,65398,65398,65380,65379,65355,65355,65335,65335,65317,65316,65317,65316,65331,65330,65336,65336,65340,65340,65352,65353,65362,65363,65371,65371,65387,65387,65406,65407,65426,65426,65446,65446,65460,65460,65453,65454,65441,65441,65437,65437,65432,65431,65422,65422,65416,65416,65405,65406,65397,65396,65398,65399,65401,65401,65401,65401,65404,65403,65396,65396,65384,65384,65377,65376,65373,65373,65383,65383,65401,65401,65412,65412,65423,65422,65430,65431,65437,65437,65449,65448,65450,65450,65438,65438,65422,65422,65399,65400,65386,65385,65391,65392,65401,65400,65414,65415,65428,65428,65424,65425,65422,65422,65426,65426,65418,65418,65408,65408,65394,65394,65370,65371,65368,65367,65390,65391,65427,65427,65467,65466,65490,65489,65486,65486,65465,65465,65442,65442,65431,65432,65430,65430,65435,65435,65442,65441,65434,65433,65412,65411,65382,65383,65350,65351,65336,65335,65343,65343,65360,65361,65383,65384,65387,65387,65366,65366,65338,65338,65305,65304,65283,65283,65296,65296,65317,65318,65340,65341,65361,65361,65352,65352,65332,65332,65323,65322,65312,65313,65324,65323,65348,65349,65364,65364,65381,65381,65387,65387,65375,65375,65375,65375,65370,65370,65354,65355,65349,65350,65336,65336,65325,65325,65341,65341,65356,65356,65370,65370,65394,65394,65406,65405,65418,65419,65442,65441,65448,65448,65443,65442,65434,65433,65416,65416,65407,65408,65419,65419,65438,65437,65453,65453,65469,65469,65489,65489,65503,65503,65512,65513,65530,65530,6,5,18,18,45,45,44,45,65535,0,65476,65476,65413,65413,65372,65372,65384,65384,65421,65421,65451,65451,65467,65467,65455,65455,65422,65422,65394,65394,65380,65380,65386,65386,65408,65408,65427,65427,65442,65441,65460,65460,65476,65476,65490,65490,65508,65508,65521,65521,65528,65527,7,7,11,10,65521,65522,65490,65490,65455,65455,65421,65421,65414,65414,65421,65421,65421,65422,65426,65426,65428,65429,65422,65423,65420,65421,65425,65425,65432,65432,65443,65443,65452,65451,65456,65457,65456,65456,65454,65454,65456,65457,65454,65454,65448,65447,65443,65443,65432,65432,65428,65429,65437,65436,65441,65441,65454,65454,65455,65454,65423,65422,65388,65387,65354,65354,65329,65329,65355,65354,65395,65396,65421,65420,65450,65450,65461,65461,65454,65454,65470,65470,65478,65477,65465,65466,65458,65457,65438,65438,65425,65425,65442,65443,65466,65466,65491,65492,65503,65503,65481,65480,65448,65449,65418,65419,65395,65394,65404,65404,65424,65424,65435,65435,65448,65447,65448,65448,65438,65438,65435,65435,65429,65429,65420,65420,65414,65414,65402,65402,65389,65390,65374,65373,65354,65355,65344,65343,65332,65333,65315,65315,65297,65297,65277,65277,65267,65268,65279,65278,65296,65296,65317,65318,65337,65337,65357,65357,65388,65388,65418,65417,65436,65436,65454,65454,65461,65461,65467,65467,65483,65483,65486,65486,65485,65485,65492,65492,65492,65493,65493,65492,65492,65492,65478,65478,65476,65475,65494,65495,65520,65520,15,14,31,31,17,17,65529,65529,65510,65511,65495,65494,65489,65488,65490,65490,65484,65484,65476,65476,65478,65478,65477,65476,65472,65471,65481,65481,65503,65502,65531,65530,34,35,59,59,48,48,26,26,3,3,65522,65522,65524,65525,65534,65534,6,5,7,7,65527,65528,65505,65505,65483,65484,65475,65476,65510,65511,28,27,68,68,107,107,131,132,141,142,167,166,170,171,134,134,91,91,43,44,7,7,1,1,0,65535,65530,65530,65526,65526,65515,65515,65506,65506,65501,65501,65497,65496,65508,65507,65519,65519,65526,65525,4,5,11,11,17,18,38,38,40,41,34,33,31,31,13,13,10,11,40,40,66,66,95,95,115,115,94,93,69,69,55,55,36,37,39,39,48,49,43,43,54,54,68,68,70,69,80,80,78,78,53,53,38,38,20,21,3,3,17,17,36,36,45,46,62,61,68,68,64,65,75,74,78,78,65,64,51,51,37,37,25,26,28,28,37,37,42,43,52,51,67,66,81,81,95,95,106,106,102,102,89,89,79,78,74,75,87,87,116,116,139,138,153,153,163,163,164,165,172,171,178,179,173,173,168,168,166,166,157,157,156,156,151,151,137,137,144,144,170,170,200,199,233,234,249,249,235,235,218,218,206,206,194,194,184,184,172,172,154,153,140,140,147,148,167,166,176,176,193,193,222,222,246,247,281,280,305,305,279,280,240,241,213,213,180,181,171,172,179,179,167,168,166,165,177,177,181,180,192,191,202,202,197,196,189,189,179,179,172,172,185,185,208,208,232,231,244,245,229,229,201,201,179,178,162,163,163,164,173,172,179,179,185,184,181,181,173,173,171,170,170,170,187,187,221,221,248,249,271,272,292,292,300,301,313,313,324,324,314,314,295,294,277,276,264,263,265,266,273,273,270,270,270,270,275,276,283,283,298,298,308,309,302,302,296,295,294,293,282,282,269,270,262,262,246,246,242,243,263,263,282,281,299,298,317,317,313,314,296,296,286,286,276,276,271,271,279,279,284,284,283,284,277,277,264,263,252,252,245,246,245,244,252,252,256,256,253,254,252,252,249,249,245,244,248,248,261,261,276,276,291,291,303,302,302,303,289,289,283,282,279,279,270,270,269,270,275,274,269,270,265,265,259,258,245,244,240,240,250,250,265,265,279,278,287,287,297,297,305,305,309,310,318,319,327,327,337,337,359,359,363,363,338,337,305,305,264,265,245,246,270,269,302,302,334,335,363,363,350,351,319,319,299,299,278,278,281,281,310,310,323,323,336,336,364,365,385,386,406,407,427,428,430,430,429,428,433,433,430,431,417,418,403,402,396,395,394,393,385,384,373,373,359,359,347,346,354,354,364,365,363,362,370,370,396,396,430,429,467,466,487,487,475,475,449,449,428,428,413,412,403,403,401,402,398,399,389,390,379,378,360,360,338,338,330,329,332,332,338,339,350,349,344,344,318,317,289,290,260,260,240,240,249,250,269,269,283,282,290,289,273,273,238,238,209,209,194,194,202,202,230,231,261,261,277,278,269,268,243,243,225,224,211,212,212,211,223,223,225,225,229,230,251,251,269,269,290,290,307,307,293,294,275,275,263,263,242,243,236,235,235,234,224,224,237,238,277,276,321,321,376,375,409,409,402,403,385,385,365,365,349,350,358,358,371,371,382,381,395,395,395,394,386,387,382,382,375,375,383,382,396,397,405,406,420,420,430,429,435,434,448,449,444,445,420,419,396,396,362,362,346,347,383,383,431,431,474,473,507,507,494,495,459,460,440,439,420,419,397,397,383,383,364,364,336,336,303,303,260,261,215,214,193,193,221,220,275,276,327,327,360,360,354,354,324,324,307,307,293,294,282,282,284,285,279,279,278,277,291,290,296,295,302,301,309,310,301,302,295,296,291,291,282,282,291,291,302,301,308,307,320,320,319,319,316,317,330,329,328,328,320,320,314,315,295,294,287,288,302,302,314,314,330,330,342,343,338,338,333,333,324,324,321,320,331,331,344,344,363,364,368,368,341,342,310,310,273,274,243,243,256,255,278,278,295,294,321,321,328,328,323,323,336,337,340,340,336,336,340,339,335,335,337,337,342,342,344,343,352,352,350,349,337,337,328,327,302,302,296,296,334,333,380,380,430,430,464,464,447,447,417,417,393,394,373,373,383,383,401,401,408,408,417,417,407,407,383,383,371,370,352,352,336,336,332,332,318,318,309,309,316,316,323,324,335,335,338,338,326,327,311,311,292,293,286,285,290,290,292,292,301,301,300,299,276,276,253,253,227,226,209,209,232,232,266,267,295,295,318,318,307,307,277,277,259,259,244,244,241,241,254,254,257,257,263,262,268,268,267,267,272,272,271,272,262,262,260,260,249,250,250,250,277,277,303,303,333,333,358,358,347,347,324,324,307,307,281,281,262,263,251,250,227,227,215,215,221,221,229,229,238,238,244,243,243,243,238,238,233,233,232,232,228,228,223,223,222,223,212,212,186,186,161,161,137,137,118,118,120,120,129,129,131,131,143,143,162,162,180,180,201,201,217,217,210,211,196,197,188,188,176,176,162,162,150,150,129,129,113,114,120,120,136,135,149,150,156,156,143,143,119,119,101,101,89,89,88,88,92,92,93,92,93,93,85,86,70,69,58,58,50,50,48,48,58,58,62,62,63,62,71,70,79,79,88,88,98,98,97,97,93,93,94,93,86,86,66,66,43,43,21,21,4,5,0,65532,65532,65530,65529,65535,65535,4,4,7,8,11,10,6,7,1,1,65534,65535,65532,65532,65535,65535,5,4,5,5,9,9,24,24,41,41,62,62,78,79,79,79,74,74,73,73,71,70,60,60,47,47,35,35,25,26,15,15,10,10,4,4,65534,65534,10,11,29,28,39,38,52,51,68,68,80,80,94,94,110,109,120,121,133,133,148,149,158,159,162,162,161,161,157,157,156,156,162,162,167,166,172,172,174,174,165,165,154,154,147,147,135,135,123,123,112,112,96,96,80,80,70,70,58,58,44,45,36,36,34,35,37,38,39,39,39,39,39,39,34,34,34,35,34,34,22,22,10,10,2,2,65529,65528,65533,65532,4,4,3,2,5,5,7,7,8,8,16,16,16,16,6,6,65528,65528,65512,65511,65504,65504,65508,65508,65515,65515,65526,65525,65523,65523,65497,65497,65466,65466,65435,65435,65412,65411,65414,65413,65424,65424,65431,65431,65436,65436,65430,65429,65418,65418,65412,65412,65404,65404,65403,65403,65408,65409,65406,65406,65412,65412,65430,65430,65448,65449,65474,65475,65496,65496,65499,65499,65492,65492,65490,65490,65489,65490,65492,65492,65498,65498,65507,65507,65512,65512,65518,65518,65527,65527,65530,65531,65535,65534,11,11,24,24,38,38,45,46,38,38,26,26,10,10,2,3,21,21,48,48,69,69,87,87,83,83,68,67,64,64,57,57,46,46,39,38,25,25,17,17,23,23,29,29,34,34,41,41,43,43,45,45,49,49,45,45,39,39,34,34,30,30,22,22,12,12,3,3,65524,65523,65516,65517,65529,65528,4,4,14,14,25,25,14,15,65534,65534,65527,65527,65508,65508,65487,65486,65470,65470,65443,65443,65431,65431,65448,65448,65472,65472,65502,65502,65517,65518,65500,65500,65470,65470,65440,65440,65423,65423,65440,65440,65468,65468,65489,65490,65507,65506,65501,65501,65484,65484,65475,65474,65463,65463,65455,65455,65456,65456,65454,65453,65455,65455,65460,65460,65462,65462,65469,65470,65471,65471,65457,65457,65445,65445,65432,65432,65416,65416,65411,65411,65405,65405,65396,65395,65396,65396,65401,65401,65408,65408,65414,65414,65412,65413,65406,65406,65396,65396,65383,65383,65383,65384,65396,65396,65415,65415,65436,65436,65451,65451,65452,65452,65449,65449,65452,65452,65454,65454,65437,65437,65416,65416,65401,65401,65369,65370,65329,65329,65292,65292,65242,65242,65213,65213,65246,65246,65297,65297,65340,65340,65375,65374,65366,65367,65333,65333,65315,65315,65299,65299,65288,65288,65292,65291,65287,65286,65280,65281,65278,65278,65267,65267,65262,65262,65254,65254,65237,65237,65223,65223,65207,65208,65195,65194,65199,65199,65202,65201,65204,65204,65210,65210,65202,65203,65193,65194,65196,65196,65198,65198,65210,65210,65234,65234,65249,65249,65265,65265,65280,65280,65287,65287,65300,65300,65310,65310,65316,65316,65325,65325,65329,65329,65337,65337,65357,65357,65374,65374,65392,65392,65406,65405,65399,65398,65384,65384,65371,65371,65359,65359,65360,65361,65365,65365,65362,65363,65365,65365,65378,65378,65395,65395,65415,65415,65425,65425,65414,65415,65396,65396,65384,65383,65371,65371,65354,65354,65340,65340,65325,65326,65311,65310,65301,65300,65292,65292,65279,65279,65273,65273,65276,65276,65282,65283,65285,65285,65279,65279,65269,65269,65252,65252,65234,65234,65232,65232,65249,65249,65276,65276,65309,65309,65328,65328,65319,65319,65301,65300,65281,65282,65272,65271,65280,65280,65298,65298,65316,65315,65328,65328,65322,65322,65307,65308,65298,65298,65285,65285,65269,65269,65260,65260,65247,65247,65238,65238,65249,65249,65261,65262,65267,65268,65281,65280,65298,65298,65313,65313,65338,65338,65347,65346,65319,65320,65278,65278,65236,65236,65212,65211,65233,65233,65276,65275,65309,65310,65342,65343,65361,65361,65366,65366,65386,65385,65390,65391,65359,65359,65325,65326,65293,65293,65259,65258,65258,65258,65268,65268,65260,65260,65266,65267,65292,65292,65313,65313,65343,65343,65365,65365,65344,65344,65308,65309,65285,65285,65263,65262,65252,65252,65259,65259,65257,65257,65254,65254,65264,65264,65275,65274,65280,65280,65287,65287,65286,65286,65272,65272,65259,65260,65255,65254,65256,65256,65263,65262,65269,65270,65272,65271,65271,65271,65271,65271,65275,65275,65275,65275,65275,65275,65278,65278,65279,65278,65278,65278,65280,65280,65276,65276,65273,65273,65270,65270,65244,65244,65206,65207,65177,65178,65149,65148,65132,65132,65130,65130,65115,65115,65111,65111,65142,65142,65178,65178,65215,65215,65241,65242,65227,65227,65200,65200,65185,65185,65170,65170,65168,65168,65177,65177,65175,65175,65180,65179,65187,65187,65186,65186,65189,65189,65189,65189,65186,65186,65187,65188,65182,65183,65178,65178,65183,65183,65187,65187,65198,65198,65199,65199,65168,65168,65130,65130,65093,65093,65062,65062,65070,65070,65090,65090,65100,65100,65113,65113,65110,65110,65096,65096,65097,65096,65090,65089,65081,65081,65083,65083,65074,65074,65076,65076,65102,65102,65126,65126,65155,65156,65181,65180,65181,65181,65173,65173,65164,65164,65161,65160,65179,65179,65209,65210,65234,65235,65248,65248,65241,65241,65226,65226,65215,65215,65206,65207,65207,65207,65211,65211,65213,65213,65216,65216,65210,65210,65196,65195,65186,65186,65173,65173,65154,65154,65141,65141,65125,65124,65109,65108,65105,65105,65103,65103,65096,65097,65103,65103,65134,65134,65172,65172,65206,65206,65236,65236,65240,65240,65231,65231,65237,65238,65240,65239,65230,65230,65228,65228,65223,65223,65218,65217,65230,65230,65242,65242,65245,65245,65252,65252,65255,65255,65261,65261,65267,65267,65259,65259,65241,65241,65213,65213,65183,65183,65165,65165,65157,65157,65158,65158,65164,65165,65167,65167,65173,65173,65180,65180,65182,65182,65192,65192,65199,65198,65201,65202,65213,65214,65213,65212,65194,65194,65169,65169,65132,65132,65114,65113,65132,65131,65165,65165,65206,65206,65226,65226,65200,65201,65158,65158,65112,65112,65085,65085,65122,65122,65188,65189,65246,65246,65292,65291,65292,65292,65264,65264,65256,65256,65242,65242,65206,65205,65177,65177,65142,65142,65113,65113,65118,65118,65127,65128,65128,65129,65136,65136,65148,65148,65157,65157,65172,65172,65183,65183,65181,65181,65171,65170,65161,65161,65160,65159,65175,65175,65201,65201,65226,65227,65250,65249,65273,65273,65300,65300,65332,65332,65351,65351,65349,65349,65338,65338,65324,65324,65319,65319,65336,65336,65365,65365,65391,65391,65409,65409,65403,65403,65381,65381,65367,65367,65353,65353,65331,65331,65308,65308,65280,65281,65262,65262,65271,65272,65294,65294,65307,65307,65332,65333,65379,65379,65429,65429,65482,65482,65517,65516,65499,65499,65463,65463,65442,65442,65423,65423,65421,65421,65438,65438,65441,65441,65438,65438,65443,65442,65438,65438,65434,65434,65435,65434,65434,65435,65436,65437,65438,65438,65444,65444,65468,65468,65496,65496,65525,65524,13,14,13,13,4,4,0,1,65519,65519,65484,65484,65439,65438,65387,65387,65356,65356,65361,65360,65384,65384,65406,65406,65412,65412,65406,65406,65395,65395,65383,65383,65372,65372,65355,65355,65331,65331,65309,65309,65287,65287,65277,65278,65275,65275,65266,65266,65264,65264,65267,65266,65263,65263,65272,65272,65278,65278,65255,65255,65227,65227,65203,65203,65181,65181,65189,65189,65213,65213,65235,65234,65243,65244,65218,65218,65176,65177,65141,65141,65116,65116,65135,65135,65176,65176,65194,65195,65224,65223,65259,65259,65283,65283,65325,65325,65355,65354,65326,65327,65283,65284,65244,65244,65206,65206,65200,65199,65210,65209,65212,65212,65220,65220,65233,65234,65248,65249,65265,65265,65275,65274,65280,65279,65282,65282,65279,65280,65281,65281,65292,65291,65302,65303,65317,65317,65329,65329,65330,65330,65328,65328,65333,65333,65334,65334,65323,65323,65311,65311,65293,65293,65280,65281,65292,65292,65306,65306,65312,65311,65325,65325,65329,65328,65326,65326,65345,65345,65343,65344,65298,65298,65244,65243,65175,65175,65120,65120,65133,65134,65173,65172,65196,65196,65221,65221,65230,65230,65221,65222,65230,65230,65233,65234,65220,65220,65217,65216,65213,65213,65201,65201,65189,65189,65173,65173,65156,65156,65150,65150,65143,65143,65134,65134,65136,65136,65139,65138,65130,65131,65124,65124,65113,65113,65106,65106,65133,65133,65177,65177,65206,65206,65237,65237,65260,65261,65263,65263,65275,65275,65292,65292,65299,65298,65319,65319,65341,65340,65351,65352,65369,65369,65382,65382,65390,65390,65399,65399,65394,65393,65385,65385,65385,65386,65369,65369,65347,65347,65323,65323,65285,65286,65270,65269,65286,65286,65302,65302,65327,65327,65349,65348,65343,65343,65332,65332,65326,65326,65316,65316,65325,65325,65342,65342,65348,65348,65357,65358,65366,65366,65369,65369,65379,65379,65383,65383,65367,65367,65348,65347,65328,65328,65308,65308,65303,65303,65310,65310,65316,65316,65313,65312,65299,65300,65279,65279,65253,65254,65240,65240,65256,65256,65283,65283,65308,65308,65330,65330,65331,65331,65319,65318,65322,65322,65316,65316,65276,65276,65230,65230,65183,65183,65145,65145,65148,65148,65168,65168,65175,65175,65196,65196,65237,65237,65281,65281,65330,65330,65369,65369,65376,65376,65368,65368,65367,65367,65373,65373,65391,65391,65421,65421,65455,65455,65463,65463,65441,65441,65401,65401,65353,65353,65334,65334,65363,65364,65410,65410,65455,65455,65481,65481,65466,65466,65428,65428,65399,65398,65375,65375,65371,65371,65390,65390,65408,65407,65420,65421,65430,65429,65430,65430,65429,65428,65434,65434,65453,65454,65484,65484,65505,65505,65523,65523,5,4,11,11,21,21,26,27,11,11,65530,65530,65518,65518,65506,65507,65504,65504,65504,65503,65501,65502,65503,65504,65500,65500,65497,65497,65496,65496,65488,65488,65485,65485,65483,65483,65470,65470,65470,65471,65495,65495,65530,65530,31,30,57,57,54,54,36,36,23,24,15,15,7,7,6,6,11,12,8,8,4,4,4,4,65535,65534,65533,65533,0,65531,65531,65529,65529,65523,65524,65510,65510,65496,65495,65471,65471,65467,65467,65519,65519,53,53,117,116,162,162,146,145,96,96,62,62,33,32,22,23,38,37,47,46,55,55,59,60,48,48,47,46,47,48,42,42,48,48,50,50,44,44,48,48,46,45,35,35,37,38,49,48,71,71,95,95,99,100,92,92,78,78,61,62,60,60,72,72,92,93,113,113,126,127,136,136,136,136,136,137,142,142,135,135,124,125,124,124,118,118,116,116,120,120,111,111,118,117,147,148,179,179,218,219,237,237,204,203,151,151,104,105,73,73,88,88,130,129,159,160,181,180,190,190,196,196,209,208,218,218,225,225,234,233,242,242,251,250,249,250,238,238,227,227,215,215,214,215,220,219,223,222,233,233,242,242,239,239,239,239,234,235,226,226,223,223,214,214,214,215,244,244,284,283,330,330,361,361,334,334,282,282,241,241,194,195,171,171,166,166,139,139,128,128,159,158,190,190,218,217,244,245,252,252,257,256,272,272,277,277,260,259,231,231,207,208,191,191,185,185,189,189,189,188,182,181,181,181,183,183,185,185,189,189,183,183,172,172,169,170,159,160,145,145,142,142,137,136,133,133,140,140,144,145,148,148,153,153,157,158,160,159,158,159,173,173,218,217,270,270,319,320,354,354,343,342,313,312,297,298,284,283,286,287,303,304,301,302,315,315,356,356,394,394,442,442,471,471,437,436,384,385,340,339,306,305,324,323,369,369,403,403,424,424,402,403,349,349,307,307,273,273,253,253,252,252,240,240,224,225,215,216,197,197,180,179,167,168,162,161,165,165,159,158,162,161,198,198,237,237,276,276,307,307,292,292,262,262,249,248,227,228,219,219,228,228,228,228,235,234,247,247,251,252,264,265,267,267,236,237,199,199,160,160,127,127,120,120,122,121,116,117,121,120,132,133,146,146,164,164,184,185,216,216,257,257,295,295,321,322,334,333,341,342,355,356,365,365,369,368,369,368,364,363,365,366,377,378,392,393,413,412,417,416,383,383,334,334,286,286,253,252,256,256,271,271,279,279,293,293,298,297,288,288,286,286,285,286,290,289,299,299,299,298,306,307,333,333,361,361,400,399,419,419,388,388,359,360,340,340,308,307,293,293,282,282,254,254,246,247,254,254,261,261,274,274,271,271,263,263,258,258,240,240,249,250,302,301,362,362,430,430,477,477,467,468,428,428,386,385,366,366,388,387,429,428,477,476,491,492,433,433,348,348,269,268,214,215,249,249,330,329,394,393,453,453,479,478,476,476,497,498,499,498,468,469,444,444,399,400,376,377,410,410,448,448,492,492,530,530,508,509,474,473,454,454,428,429,433,434,461,462,468,467,478,479,500,500,516,517,540,541,560,561,558,558,546,547,535,535,526,526,518,518,504,504,490,489,488,487,504,503,529,529,554,555,571,570,563,564,547,548,539,540,527,527,516,516,515,515,504,504,491,491,498,497,502,502,500,499,510,509,530,530,552,551,574,573,595,595,612,613,627,628,650,651,662,662,642,642,613,613,586,586,564,565,569,569,584,584,593,593,601,602,593,594,578,578,575,576,561,560,527,527,499,498,464,463,443,444,465,464,496,496,521,521,543,542,545,545,541,541,544,544,542,541,534,533,528,528,518,518,509,508,511,512,517,516,513,513,512,511,506,507,491,490,477,477,471,470,464,464,465,464,471,471,472,471,467,468,459,460,447,447,447,447,468,467,498,498,531,531,552,553,547,547,530,531,519,519,516,517,534,534,563,563,586,587,605,605,603,603,581,581,572,572,550,549,486,486,420,420,354,353,298,298,306,306,334,334,341,341,366,366,395,395,420,421,465,464,470,470,426,427,379,380,317,317,282,282,327,326,393,393,453,453,503,503,500,500,474,474,467,467,459,459,453,452,452,453,445,445,446,446,457,458,470,470,487,487,504,503,521,521,536,537,551,551,564,564,548,548,518,517,503,502,465,465,399,400,336,336,257,257,203,203,229,229,277,277,310,310,347,347,367,366,372,372,387,388,400,400,402,401,404,404,409,409,407,408,393,393,371,371,349,349,332,332,334,333,343,344,349,349,353,353,342,342,325,325,324,324,319,318,298,297,281,282,271,270,255,254,237,237,222,222,203,204,182,182,177,177,185,185,182,181,186,186,218,218,247,248,266,265,299,299,358,357,427,428,491,492,543,543,586,586,620,621,650,650,707,707,805,805,919,920,1031,1032,1122,1121,1151,1152,1141,1141,1145,1145,1146,1147,1117,1118,1097,1096,1093,1093,1042,1041,898,897,708,708,539,539,370,371,181,180,3,3,65364,65364,65187,65187,65060,65061,64948,64948,64809,64809,64714,64713,64692,64693,64695,64696,64688,64688,64683,64684,64727,64727,64786,64785,64819,64818,64890,64890,65001,65001,65107,65107,65235,65234,65331,65331,65357,65356,65365,65366,65363,65363,65402,65402,17,18,203,203,383,382,518,517,498,499,420,419,391,391,345,346,314,314,318,317,287,287,282,283,324,324,359,359,421,420,446,447,370,370,284,284,213,214,141,142,119,118,119,118,100,100,95,95,117,117,156,157,189,188,200,201,206,207,194,193,168,168,166,165,175,175,186,186,195,196,204,204,242,243,292,292,333,333,398,397,467,466,535,535,631,630,680,680,644,645,591,592,536,537,491,490,482,482,470,469,441,441,414,414,341,340,218,219,122,123,63,63,65526,65526,65436,65435,65359,65359,65300,65300,65261,65261,65244,65244,65211,65211,65179,65179,65211,65211,65259,65258,65255,65255,65264,65263,65345,65345,65467,65467,42,42,116,115,143,144,144,144,152,153,172,172,182,181,209,209,271,272,301,300,288,289,313,313,359,360,368,368,359,359,372,373,402,401,414,414,406,406,409,410,417,417,405,404,376,377,319,318,223,224,173,172,165,164,93,94,65520,65520,65481,65480,65484,65483,65473,65473,65474,65475,65485,65486,65484,65483,65476,65476,65467,65468,65470,65469,65494,65495,65528,65528,33,32,69,68,70,71,65,66,87,88,103,102,99,99,125,126,180,180,200,200,161,161,97,97,37,37,65509,65508,65437,65437,65402,65402,65413,65413,65412,65412,65427,65426,65503,65504,1,2,65501,65500,65505,65505,65507,65506,65444,65443,65421,65421,65445,65444,65428,65428,65390,65389,65380,65380,65421,65422,65451,65451,65419,65420,65423,65424,65437,65438,65355,65355,65315,65315,65373,65372,65387,65387,65427,65427,65514,65514,65495,65495,65436,65436,65424,65425,65406,65406,65418,65418,65467,65467,65511,65511,59,59,118,117,80,80,71,71,116,117,103,102,49,50,30,30,24,24,65522,65521,65450,65450,65359,65359,65261,65262,65205,65204,65227,65227,65278,65279,65300,65301,65294,65293,65299,65299,65310,65310,65267,65267,65240,65240,65308,65307,65295,65296,65166,65166,65164,65164,65274,65275,65347,65347,65440,65440,65494,65494,65422,65423,65354,65354,65312,65312,65241,65240,65190,65191,65157,65157,65150,65150,65179,65180,65145,65145,65115,65115,65186,65186,65189,65188,65103,65103,65102,65102,65126,65125,65083,65083,65041,65041,65009,65010,64960,64960,64929,64930,64927,64926,64897,64897,64884,64884,64984,64984,65043,65042,64916,64916,64832,64832,64809,64810,64636,64635,64500,64499,64430,64430,64170,64171,63978,63977,63971,63971,63796,63797,63625,63625,63711,63711,63764,63763,63716,63716,63796,63796,64116,64117,64550,64550,64818,64818,65392,65392,1364,1365,3132,3132,4706,4706,6517,6517,8157,8156,9590,9589,11501,11502,12582,12581,11517,11517,9780,9779,8446,8447,6869,6869,5048,5049,3308,3308,1490,1489,65153,65153,63272,63272,61303,61303,59211,59212,57290,57290,56246,56247,55680,55679,54602,54603,54078,54077,55209,55209,56726,56726,57934,57934,59483,59484,61136,61136,62757,62756,64691,64691,640,641,1046,1047,1134,1134,1531,1532,1857,1857,1662,1661,1260,1259,1084,1084,834,834,334,335,65412,65411,64908,64907,64448,64448,64439,64440,64562,64562,64470,64470,64491,64491,64713,64713,64977,64976,65268,65268,65482,65481,44,44,96,96,128,128,172,172,122,121,2,2,12,12,65441,65441,65027,65026,64591,64591,64169,64169,63781,63782,63693,63692,63701,63700,63567,63566,63545,63546,63772,63773,64075,64075,64268,64267,64412,64413,64794,64794,65290,65290,64,64,368,368,740,741,1029,1029,1399,1399,1899,1900,2353,2352,2809,2810,3340,3340,3791,3792,3924,3924,3837,3837,3946,3945,3962,3962,3299,3299,2436,2437,1848,1847,1066,1066,65531,65530,64474,64474,63370,63369,62370,62370,61775,61776,61323,61324,60685,60684,60151,60151,60169,60168,60481,60480,60612,60613,60911,60911,61755,61756,62715,62715,63521,63522,64341,64341,65087,65087,204,203,950,951,1610,1611,1878,1878,1960,1959,2200,2201,2388,2388,2246,2246,2058,2058,1959,1959,1717,1718,1436,1436,1218,1217,919,918,722,722,785,785,872,872,876,877,875,874,903,904,959,959,965,964,930,930,860,860,679,679,534,534,439,438,147,147,65332,65333,65123,65123,64921,64922,64725,64725,64533,64533,64287,64287,64142,64142,64090,64089,64015,64015,63981,63981,63970,63970,64070,64070,64365,64365,64582,64583,64770,64770,65191,65191,89,89,428,428,732,731,808,808,814,813,982,983,1066,1066,1038,1038,1072,1071,1085,1086,1066,1066,965,966,726,726,533,532,325,325,65477,65477,65137,65138,64841,64841,64398,64398,64039,64040,63810,63810,63403,63402,63024,63024,63005,63005,63011,63011,62868,62867,62989,62989,63334,63334,63538,63539,63817,63817,64251,64250,64496,64495,64716,64717,65136,65136,65481,65482,197,197,513,512,809,808,1050,1050,1196,1196,1234,1234,1278,1278,1194,1193,935,935,749,749,561,562,303,304,192,193,94,93,65402,65401,65297,65297,65301,65301,65234,65235,65204,65205,65217,65216,65108,65107,64940,64941,64848,64849,64737,64736,64555,64555,64460,64459,64393,64393,64223,64222,64080,64079,63949,63950,63740,63740,63606,63606,63513,63513,63389,63389,63340,63340,63206,63206,63006,63005,62938,62937,62784,62784,62615,62615,62634,62635,62562,62563,62566,62566,62744,62743,62653,62654,62572,62572,62592,62591,62558,62558,63447,63447,64885,64886,84,84,1649,1650,5045,5045,8798,8799,12654,12654,15642,15643,15696,15695,14501,14501,14158,14157,13327,13326,11563,11563,9752,9751,7824,7824,5887,5888,3754,3755,1241,1241,64614,64614,62227,62227,58940,58940,55631,55632,52194,52194,49257,49257,48891,48891,49565,49564,49118,49118,49792,49793,52831,52830,56392,56391,59931,59930,63153,63154,65070,65070,942,943,2793,2794,4208,4208,4572,4573,4598,4598,4867,4867,4872,4871,4098,4098,3104,3103,2283,2284,1342,1342,485,484,65358,65358,64449,64449,63646,63646,63523,63522,63618,63619,63550,63549,63604,63604,63825,63826,64056,64055,64424,64423,64878,64879,65057,65057,65104,65104,65392,65392,65471,65471,64915,64915,64213,64214,63628,63628,63052,63051,62758,62759,62624,62624,62266,62266,62095,62095,62388,62388,62705,62706,62914,62914,63204,63205,63632,63633,64201,64202,64761,64761,65207,65207,141,140,595,594,959,959,1439,1440,2093,2094,2747,2747,3396,3395,4071,4070,4624,4624,5094,5095,5691,5691,6041,6040,5601,5601,4829,4829,4293,4294,3504,3505,2146,2145,651,650,64690,64690,63241,63241,62109,62110,61104,61104,59976,59977,59061,59060,58595,58594,58258,58257,57747,57747,57463,57463,57939,57940,58703,58703,59188,59188,60006,60006,61595,61596,63466,63467,65353,65354,1450,1451,2381,2380,3103,3103,4180,4181,4925,4926,4821,4820,4454,4455,4240,4240,3942,3942,3430,3430,2828,2828,2217,2216,1643,1642,1200,1201,832,832,344,343,65409,65408,65272,65271,65282,65282,65150,65150,65139,65139,65407,65406,163,163,492,491,837,837,836,835,622,623,576,575,435,435,9,9,65087,65086,64658,64658,64317,64317,64202,64203,64117,64116,63938,63938,63851,63852,63894,63894,63949,63948,63947,63947,63998,63999,64314,64314,64808,64808,65239,65238,69,70,421,421,756,755,1070,1070,1303,1304,1533,1533,1879,1880,2251,2251,2489,2489,2440,2440,2165,2166,1997,1997,1862,1862,1438,1438,909,908,501,501,73,72,65085,65084,64480,64479,63818,63817,63244,63245,62865,62866,62576,62577,62183,62184,61845,61844,61966,61966,62313,62312,62415,62414,62592,62593,63175,63175,63892,63893,64616,64616,65287,65286,192,191,621,620,1269,1269,1862,1863,2158,2159,2302,2303,2499,2500,2648,2648,2452,2453,1986,1985,1619,1619,1344,1345,942,941,511,511,164,164,65341,65341,65057,65058,64943,64943,64755,64754,64455,64455,64372,64371,64432,64432,64337,64338,64267,64268,64418,64419,64576,64577,64669,64669,64760,64760,64698,64697,64506,64505,64411,64410,64286,64286,63898,63898,63387,63387,62969,62970,62598,62598,62169,62169,61767,61766,61450,61451,61232,61232,61475,61475,62154,62154,62512,62512,63024,63023,64870,64871,1581,1581,3278,3277,5697,5697,9081,9081,12480,12479,16141,16141,18945,18945,18839,18840,17390,17390,16813,16813,15628,15629,12621,12621,9331,9332,6435,6436,2916,2915,64187,64187,59719,59718,54992,54991,50907,50907,49077,49077,48394,48393,46821,46821,45981,45982,47761,47761,50237,50237,52049,52050,54565,54565,57991,57991,61510,61510,65339,65338,3237,3238,4956,4956,6038,6037,7820,7820,8844,8844,8029,8030,6823,6823,5988,5988,4863,4863,3493,3493,2072,2073,443,444,64605,64606,63766,63766,62945,62945,62006,62006,61416,61416,61424,61424,61723,61723,61929,61928,62186,62185,62644,62643,63071,63071,63520,63521,64033,64033,64288,64287,64441,64440,64766,64767,64900,64900,64683,64683,64417,64417,64127,64127,63794,63793,63621,63621,63536,63536,63271,63271,62969,62969,62915,62915,62926,62925,62782,62782,62732,62731,62993,62994,63465,63466,63967,63967,64474,64474,65165,65164,425,424,1018,1018,1608,1609,2420,2421,3192,3192,3993,3993,4903,4903,5380,5379,5512,5512,5987,5987,6327,6328,5669,5669,4642,4642,4057,4058,3181,3180,1436,1436,65078,65079,63261,63260,61363,61363,59986,59986,58907,58906,57319,57319,56097,56098,56138,56138,56512,56512,56568,56568,56946,56946,58110,58110,59696,59696,61222,61222,62802,62802,64581,64581,799,798,2648,2647,4341,4342,5042,5043,5196,5195,5653,5653,5781,5781,5189,5189,4565,4565,4044,4045,3332,3331,2485,2485,1587,1587,658,657,65379,65380,64884,64884,64582,64583,64122,64123,63771,63771,63902,63901,64111,64110,64188,64187,64427,64427,64727,64726,64951,64951,65244,65244,65496,65495,65505,65504,65376,65376,65355,65355,65404,65403,65198,65198,64835,64835,64662,64662,64483,64483,64183,64183,64057,64058,63947,63947,63694,63694,63721,63722,64004,64005,64057,64057,64119,64119,64623,64624,65180,65180,65422,65423,128,129,447,448,647,647,963,963,1474,1473,1834,1833,2117,2117,2526,2527,2755,2755,2597,2596,2346,2346,2187,2187,1876,1876,1278,1277,644,645,72,72,64963,64963,64272,64272,63492,63491,62635,62635,62070,62071,61891,61891,61817,61817,61754,61755,61734,61733,61864,61864,62199,62199,62535,62535,62923,62923,63557,63558,64259,64259,64970,64970,183,182,741,742,1229,1230,1828,1828,2197,2197,2230,2230,2241,2241,2284,2284,2190,2190,1882,1883,1390,1390,808,809,314,315,11,10,65217,65217,64762,64762,64544,64543,64689,64688,64922,64922,65103,65103,65391,65391,636,637,1742,1743,2527,2528,3482,3482,5298,5298,7327,7327,9302,9301,11237,11236,12247,12247,12867,12866,14225,14225,14617,14617,12526,12526,9623,9623,7141,7141,4321,4321,951,952,63008,63008,59419,59419,56152,56152,54010,54010,52294,52294,49892,49893,48360,48360,49513,49514,51649,51649,53018,53018,54866,54866,57808,57807,60827,60827,63878,63877,1282,1283,3165,3165,4625,4625,6751,6751,8296,8297,8070,8069,7407,7406,7343,7343,6871,6870,5450,5450,3852,3852,2419,2419,945,946,65100,65099,63872,63871,62537,62537,61408,61409,61099,61099,61074,61074,60580,60580,60347,60347,60958,60957,61617,61616,62011,62011,62569,62568,63191,63191,63764,63764,64398,64397,64885,64886,65117,65117,65292,65291,65535,65535,247,248,359,359,401,401,520,520,537,538,364,364,225,225,150,150,1,2,65359,65360,65236,65236,65112,65113,65077,65076,65395,65395,378,378,750,750,1168,1167,1668,1669,1930,1930,2223,2224,2717,2717,2980,2981,3175,3174,3598,3597,3770,3770,3460,3460,3095,3095,2859,2859,2359,2360,1333,1332,199,200,64732,64732,63526,63526,62285,62285,61090,61090,59515,59514,58306,58306,58336,58336,58627,58627,58506,58507,58892,58893,60154,60154,61670,61669,63126,63126,64618,64617,599,599,2154,2154,3926,3926,5470,5470,6006,6006,6135,6135,6736,6737,6977,6977,6218,6218,5261,5261,4389,4389,3333,3332,2359,2359,1497,1497,494,494,65168,65167,64626,64626,64034,64034,63297,63297,62829,62829,62847,62847,63098,63099,63296,63296,63468,63469,63745,63744,64035,64036,64280,64280,64619,64619,65029,65029,65429,65429,360,360,738,737,873,873,991,991,1120,1119,1088,1089,1009,1009,923,922,767,767,688,687,734,733,803,804,903,903,1033,1034,1103,1103,1024,1023,858,858,753,753,704,704,650,650,577,578,493,492,492,492,570,571,637,636,719,720,751,751,802,802,1104,1104,1234,1233,822,822,401,402,160,161,65307,65307,64908,64908,64593,64593,64234,64233,63963,63964,63706,63705,63180,63180,62572,62573,62334,62333,62555,62555,62850,62850,62960,62959,63140,63140,63528,63527,63934,63934,64309,64309,64705,64706,65305,65306,776,776,1808,1809,2376,2375,2671,2671,2913,2912,3029,3028,3482,3483,4796,4796,6468,6468,7915,7916,9382,9382,10829,10829,11924,11925,13121,13121,14294,14293,14215,14216,13360,13360,13113,13113,12176,12176,9085,9085,5473,5472,2360,2360,64190,64190,60098,60099,56156,56157,51795,51795,48357,48357,47635,47636,47925,47925,47408,47409,47710,47711,50146,50146,53245,53245,55901,55901,58858,58858,62420,62420,588,588,4507,4506,7937,7936,9537,9537,10345,10345,11929,11928,12749,12749,11427,11426,9574,9573,8200,8200,6378,6379,3950,3951,1367,1366,64067,64067,61629,61629,60464,60464,59687,59688,58473,58472,57900,57900,58521,58521,59409,59409,60214,60214,61130,61130,62003,62003,62874,62874,63854,63854,64596,64596,64848,64848,64969,64969,65235,65236,65287,65286,65066,65066,64962,64963,64827,64826,64654,64654,64834,64834,65044,65044,65123,65123,65475,65476,366,365,724,724,1181,1182,1493,1493,1757,1756,2164,2164,2427,2426,2655,2656,2865,2865,2770,2769,2716,2715,2771,2770,2612,2611,2465,2465,2324,2323,2059,2060,1898,1898,1640,1639,1266,1267,1085,1085,834,834,621,621,729,728,402,402,64856,64856,63770,63770,62864,62864,61853,61853,60896,60897,60089,60088,59148,59148,58340,58341,58364,58364,58701,58702,58585,58586,59051,59052,60730,60731,62481,62480,64089,64090,496,496,2247,2246,3849,3849,5811,5811,7313,7312,7603,7604,7433,7432,7559,7560,7543,7542,6937,6937,6315,6316,5841,5840,4776,4776,3223,3222,1593,1594,65202,65202,63600,63600,63097,63097,62899,62900,62372,62372,62024,62024,62039,62038,62137,62138,62268,62268,62659,62659,63499,63499,64593,64593,145,145,935,935,1049,1050,879,879,1028,1028,1177,1176,1098,1099,1062,1062,1008,1009,884,884,704,704,287,287,65316,65316,65093,65093,65307,65307,199,199,448,448,633,633,873,873,898,898,982,981,1218,1218,1104,1104,994,995,1198,1198,1099,1098,723,723,425,426,66,65,65247,65247,64970,64971,64758,64757,64574,64574,64071,64070,63415,63415,62990,62990,62514,62515,62084,62084,61840,61840,61289,61289,60639,60639,60465,60466,60730,60731,61205,61205,61555,61555,62163,62162,63813,63814,222,222,1776,1776,3959,3959,7155,7155,10679,10679,14255,14255,17327,17328,19100,19100,20284,20283,22025,22025,22755,22755,20447,20447,17113,17113,14745,14745,11273,11273,5804,5804,65396,65395,59149,59148,53601,53601,50464,50464,48083,48083,44744,44744,42508,42508,43173,43174,44992,44991,46133,46132,48167,48167,52645,52645,57876,57876,62772,62772,2300,2301,6745,6744,10794,10793,15720,15719,19585,19585,20327,20327,20005,20005,20478,20479,19957,19956,16936,16936,13135,13136,9905,9905,6079,6080,1446,1447,62278,62278,57135,57134,53000,53000,51935,51936,51888,51887,50824,50825,50640,50641,52327,52327,54357,54356,56113,56113,57968,57967,59886,59885,61868,61868,64122,64121,597,597,1519,1519,1994,1994,3063,3063,3803,3803,3410,3410,2933,2932,2726,2726,2111,2110,1316,1317,653,653,65340,65340,64559,64559,64248,64248,63967,63967,63476,63476,63414,63415,64058,64058,64836,64836,65397,65397,350,350,794,794,1019,1019,1071,1072,1479,1479,2589,2590,3999,4000,5346,5346,6322,6321,6300,6300,5713,5713,5602,5602,5441,5441,4602,4601,3904,3904,3472,3472,2265,2265,65464,65464,62563,62563,59790,59790,57596,57597,56394,56394,56030,56030,55472,55473,55064,55063,56181,56181,57700,57700,58435,58434,60057,60057,62939,62939,187,187,3069,3069,5780,5780,7294,7295,8486,8486,10064,10064,11012,11012,10925,10925,10578,10579,10309,10308,9309,9310,7171,7171,4877,4878,2863,2863,770,770,64455,64454,62704,62704,60675,60675,59426,59427,59554,59554,59950,59950,60045,60045,60499,60499,61607,61607,62861,62860,64063,64064,65268,65268,467,467,856,856,1604,1604,2177,2177,1998,1998,1781,1781,1752,1751,1491,1492,1231,1231,1266,1267,1309,1308,994,994,422,422,65264,65263,64326,64326,63705,63704,64020,64019,64554,64554,64787,64787,65216,65216,245,245,598,598,926,925,1145,1145,1010,1011,879,878,1112,1112,1252,1251,791,791,115,115,65223,65224,64929,64929,64680,64679,64573,64574,64533,64533,64232,64233,63644,63644,63051,63050,62246,62247,61844,61844,63296,63297,65410,65409,1040,1040,3224,3224,7389,7390,11941,11942,16787,16787,20952,20952,22190,22189,22152,22153,23060,23060,22458,22459,18306,18305,13043,13043,8443,8442,3174,3174,62818,62819,57192,57193,50840,50841,45327,45327,43636,43636,43412,43412,42072,42072,41858,41858,43701,43701,45844,45845,47910,47909,50989,50988,55765,55764,61022,61021,381,382,5944,5944,11632,11633,17235,17235,23962,23961,28440,28440,27360,27360,24512,24512,22795,22794,20148,20149,15926,15926,11458,11457,6986,6987,2097,2097,62516,62516,57112,57112,50915,50916,46290,46291,46153,46152,47960,47960,48791,48791,50060,50061,52067,52066,53791,53792,55918,55918,58537,58537,61180,61180,64007,64007,1221,1220,3337,3337,4345,4346,4744,4744,5582,5581,6064,6063,5393,5393,4530,4530,3718,3718,2739,2739,2020,2020,1426,1426,697,697,110,109,2,3,304,303,465,465,582,582,889,889,989,989,1236,1235,1622,1622,1238,1237,581,580,246,246,198,197,1028,1028,2055,2054,2442,2442,3121,3122,3949,3949,4626,4627,5805,5805,5987,5988,4145,4146,2121,2121,454,455,63861,63861,61589,61589,59259,59260,56643,56642,54791,54792,54741,54741,55361,55361,55316,55316,55831,55831,57827,57828,59950,59951,61842,61842,64090,64091,761,762,2957,2957,5416,5417,7569,7569,9110,9109,10507,10506,12146,12145,13037,13037,12018,12018,10385,10386,9406,9406,7944,7944,5601,5600,3172,3172,703,704,63948,63949,62112,62113,60181,60181,57988,57988,56386,56385,56083,56083,56367,56366,56273,56273,56617,56616,58109,58108,59780,59779,61254,61254,62911,62911,64480,64481,516,516,2359,2358,3653,3653,3951,3950,4141,4140,4498,4498,4400,4399,3985,3986,3550,3549,2916,2915,2310,2310,1663,1662,660,660,65353,65354,64659,64658,63575,63576,62565,62565,61857,61858,61143,61144,60625,60625,60263,60263,59833,59834,59625,59625,59934,59935,60383,60383,60461,60462,61559,61560,65147,65146,3740,3739,6999,6999,10609,10609,14241,14242,17744,17745,21977,21977,24599,24599,23826,23827,22139,22138,21029,21028,18678,18678,13667,13667,7713,7712,2682,2681,62784,62783,56593,56593,50720,50720,44215,44216,39346,39345,39574,39575,41233,41233,41425,41426,42943,42944,46147,46147,49753,49753,53619,53620,57144,57145,61059,61059,65325,65324,3235,3235,7403,7403,12518,12517,17399,17398,23194,23193,27345,27345,25860,25859,22195,22194,20095,20094,17309,17310,12602,12602,7650,7649,2767,2767,62954,62953,57933,57932,53308,53309,47889,47889,43769,43769,44041,44041,46308,46307,47648,47648,49368,49369,51969,51970,54522,54521,57245,57246,60163,60162,63144,63144,853,854,4218,4218,7085,7086,8320,8320,8315,8315,8814,8814,9058,9059,7679,7680,5726,5727,3919,3918,2156,2157,864,865,65204,65205,63611,63611,62387,62388,62218,62219,62586,62586,62656,62656,62644,62644,63091,63091,63667,63667,64229,64229,64886,64886,65257,65256,65446,65447,236,236,684,684,1743,1743,3569,3570,5468,5467,6740,6740,6820,6820,6312,6312,6389,6389,5995,5995,3790,3790,954,953,63965,63964,61317,61317,58862,58861,56667,56666,54122,54121,52416,52417,52973,52972,54234,54235,54725,54725,55910,55909,58490,58489,60965,60965,63090,63091,133,133,2791,2792,5275,5275,7962,7961,10213,10214,11389,11389,12455,12455,13933,13932,14293,14293,12713,12713,10779,10779,9396,9396,7356,7357,4217,4216,769,768,62732,62732,59648,59647,58070,58071,57027,57028,55465,55465,54622,54622,55126,55126,55854,55854,56376,56376,57115,57116,58377,58376,60196,60197,62263,62264,64180,64180,65467,65468,729,729,1911,1912,2927,2927,2636,2636,1811,1811,1234,1234,421,421,64686,64686,63225,63226,61931,61931,60703,60703,59639,59638,59251,59252,58495,58494,57837,57837,60064,60064,63014,63014,64144,64144,1799,1798,7882,7882,14293,14292,21655,21655,26698,26697,25407,25407,21897,21897,19322,19321,16695,16695,14834,14835,13667,13667,12341,12341,10160,10160,5181,5182,64347,64348,58891,58891,53265,53265,48471,48472,45034,45034,40502,40502,37288,37288,38395,38396,40588,40587,41969,41969,44650,44650,49419,49419,55119,55119,60862,60861,1295,1295,7092,7092,12352,12351,18171,18171,22820,22820,23295,23294,21993,21993,21589,21588,20144,20145,16723,16722,12711,12711,8539,8540,3893,3893,64581,64581,59921,59921,54937,54937,50532,50532,49037,49037,48924,48924,47792,47792,47727,47726,49651,49652,51657,51657,53869,53870,56522,56523,58788,58788,61254,61253,64350,64349,1442,1443,2623,2623,3083,3083,4042,4041,4562,4562,3887,3886,3340,3340,2928,2928,2173,2173,1991,1991,1845,1845,885,885,82,82,65363,65363,65196,65196,64921,64922,64439,64438,64012,64013,63623,63623,63258,63258,63657,63657,64683,64683,58,59,1062,1061,2225,2224,3194,3194,4027,4028,4837,4838,5426,5426,5423,5423,5144,5145,5200,5200,4714,4713,2873,2872,666,666,64128,64128,61831,61830,59924,59923,58663,58664,57182,57183,55585,55585,54726,54725,54150,54150,53312,53312,53241,53241,54420,54420,55852,55852,57264,57264,59210,59210,61794,61794,64745,64745,2128,2128,5006,5006,7949,7950,10575,10576,12924,12924,14498,14498,13883,13883,12284,12285,11919,11918,11270,11270,8722,8722,5550,5550,2121,2120,63812,63813,60820,60819,58470,58470,55643,55644,53448,53448,52912,52911,52765,52765,52116,52116,51927,51927,52803,52802,54035,54034,55421,55421,57175,57175,58684,58684,60331,60332,62859,62858,64376,64377,63859,63858,62867,62868,61550,61550,61205,61205,64704,64704,4391,4391,8638,8637,13173,13174,16906,16906,19082,19082,22161,22161,23827,23827,20946,20946,16682,16681,13174,13174,9728,9729,7063,7063,4891,4891,2090,2090,64336,64336,60907,60907,57615,57615,54182,54182,51485,51485,51689,51689,53078,53078,53290,53290,54570,54570,57647,57647,60879,60879,64626,64626,2218,2218,3051,3051,3365,3364,4247,4248,4799,4799,4801,4801,4299,4299,3897,3898,3929,3929,3522,3522,3110,3110,3103,3103,1941,1940,65142,65142,62811,62811,60132,60132,57749,57749,57082,57083,57144,57144,56948,56948,57547,57547,59121,59121,60570,60570,61884,61884,63727,63726,386,386,2436,2436,4238,4238,5204,5204,4542,4542,3241,3241,2798,2798,2559,2559,1704,1704,787,787,65210,65209,63670,63670,62591,62591,62092,62092,61454,61454,60726,60726,60381,60380,60271,60271,59904,59905,59654,59654,60258,60258,61417,61417,62784,62784,64287,64287,65310,65310,258,258,708,708,1457,1456,2780,2781,4123,4123,5314,5314,6957,6957,8022,8022,8192,8192,8785,8786,8688,8688,6925,6925,5001,5001,3110,3110,1232,1232,209,209,64883,64883,63650,63649,62317,62318,60913,60914,59853,59853,58691,58690,57344,57343,57332,57332,58243,58243,58883,58883,59732,59731,60623,60623,61525,61525,62926,62926,63987,63987,64373,64373,64482,64483,64530,64530,65231,65231,662,662,1203,1204,1891,1892,2110,2110,1129,1129,65454,65453,64499,64499,63936,63936,63906,63907,63716,63715,63149,63149,62742,62742,62894,62894,63454,63454,64004,64004,64869,64869,215,214,322,322,318,318,122,122,64969,64969,64995,64995,64938,64939,63686,63686,62540,62540,61887,61888,61649,61650,61444,61443,60105,60104,58690,58690,57544,57544,56715,56715,58902,58901,62159,62159,63992,63992,2895,2895,9316,9317,14844,14845,21583,21582,25486,25486,22230,22230,16939,16939,12075,12075,7742,7742,6615,6616,6862,6862,6123,6123,4344,4344,125,124,60577,60578,56631,56632,53525,53526,53004,53003,53934,53934,53443,53443,53975,53974,56505,56505,58678,58678,60835,60835,63915,63915,2412,2412,7070,7071,11284,11284,14016,14016,13995,13996,12701,12701,12797,12796,11469,11468,7051,7051,2731,2731,63990,63990,59746,59746,57814,57814,56693,56692,55308,55307,54802,54803,54366,54366,53933,53933,53984,53983,54266,54265,55393,55392,56462,56462,57056,57056,59135,59135,61986,61986,64053,64053,462,461,2115,2116,3369,3369,4592,4592,5099,5099,5024,5024,5123,5123,5781,5781,6795,6795,6653,6653,5373,5373,4584,4584,4055,4055,3264,3264,2280,2281,926,927,65535,0,65045,65045,63921,63921,62546,62546,61371,61371,60554,60554,60605,60605,60773,60772,60673,60672,61406,61406,62982,62983,64308,64308,64891,64891,65395,65394,1141,1141,2956,2955,4904,4904,6422,6422,6484,6485,5819,5820,5482,5482,4695,4695,3385,3384,2320,2319,1316,1316,65465,65466,63518,63518,61440,61441,59742,59742,58449,58449,58187,58187,58670,58669,58513,58514,58420,58421,59144,59144,59472,59472,59610,59610,60926,60926,63323,63323,449,449,2858,2858,4443,4443,4641,4642,4435,4435,5218,5218,5426,5426,3785,3785,2092,2092,692,691,64457,64457,63099,63099,61726,61726,60061,60061,59511,59511,60110,60110,60817,60817,61131,61132,61300,61300,61990,61990,62747,62747,63295,63295,63798,63798,63118,63118,61783,61782,61076,61076,59983,59983,59203,59203,59366,59366,58591,58591,58995,58995,63171,63171,2901,2901,7895,7895,12323,12324,14135,14135,14927,14927,16912,16912,17984,17983,16912,16912,15130,15130,13659,13658,12069,12070,9116,9116,5185,5185,1569,1569,63707,63707,60933,60933,58924,58924,56078,56078,53150,53151,52421,52421,52467,52467,51592,51592,52150,52150,55546,55546,59675,59675,63638,63637,2185,2185,5271,5271,7661,7661,10594,10594,12563,12563,12481,12480,12191,12191,12570,12570,12042,12042,9378,9379,5577,5577,2157,2157,64806,64806,62880,62880,62098,62098,60802,60802,58950,58951,57873,57874,56543,56543,54556,54556,53648,53648,54145,54145,55464,55463,57487,57486,59629,59629,61282,61283,62393,62392,63510,63510,65059,65059,990,990,2329,2328,3756,3756,4308,4309,3606,3606,2334,2334,742,742,65119,65118,65450,65449,1178,1178,2084,2085,2228,2228,1734,1733,916,916,277,277,65299,65298,64623,64623,64295,64295,64467,64467,64589,64589,64790,64789,64832,64832,64331,64332,64558,64557,350,351,1654,1654,3226,3227,4961,4960,5566,5566,5623,5624,5999,5999,5669,5669,4111,4112,2258,2258,715,715,64893,64892,64097,64098,63951,63952,63191,63191,61876,61876,61306,61306,60697,60698,59391,59390,58687,58688,59014,59014,59973,59973,61311,61311,62506,62506,63516,63515,64404,64404,65270,65271,954,954,1916,1917,2375,2375,3228,3227,4118,4119,4236,4235,3964,3963,3728,3728,3287,3286,2361,2362,1592,1592,1118,1118,65358,65358,63853,63853,62979,62979,61855,61855,61322,61322,61841,61840,61806,61806,61740,61741,61987,61986,61546,61545,61157,61157,60708,60707,60120,60120,60523,60524,60732,60732,60521,60521,60700,60700,60210,60210,60355,60356,61294,61293,60683,60683,60556,60556,60749,60749,59297,59297,61216,61216,2248,2248,9919,9919,19068,19069,24809,24809,21903,21902,15699,15699,10077,10078,6119,6118,6948,6948,10115,10114,12349,12350,13196,13196,9890,9891,3643,3644,63677,63677,58676,58676,55824,55824,55597,55597,54478,54478,53471,53471,54356,54356,54866,54866,54995,54995,56513,56512,59705,59705,64225,64226,3392,3391,7140,7139,9148,9148,9654,9654,10410,10409,10971,10971,9795,9795,8347,8348,7452,7453,5574,5574,2618,2617,64941,64942,61560,61560,58891,58891,58214,58214,58529,58529,58304,58305,58636,58635,59856,59856,60564,60564,61486,61486,62613,62614,62386,62385,62096,62095,62471,62471,62426,62426,63039,63039,64471,64470,65464,65463,935,936,1711,1711,1813,1812,2055,2055,2129,2129,1833,1832,1503,1503,623,623,65191,65190,64758,64759,64305,64305,63932,63932,63923,63924,64091,64091,64501,64501,64898,64898,64881,64882,64456,64456,64029,64029,63965,63965,64029,64030,64382,64383,65061,65061,65413,65414,588,588,1988,1988,3083,3084,4491,4491,5944,5944,5668,5667,4704,4704,4173,4173,3303,3303,2563,2564,2231,2232,1702,1702,1018,1017,65517,65517,64067,64067,62318,62318,60581,60581,60200,60200,60827,60828,60919,60919,61087,61087,61678,61677,62025,62024,62597,62597,63638,63638,65011,65012,1203,1203,2793,2793,3946,3946,4316,4315,3989,3989,4005,4005,4133,4132,3819,3819,3843,3843,4284,4283,4413,4414,3705,3704,2160,2160,577,577,64704,64703,63556,63557,62991,62991,62283,62283,61748,61747,62033,62034,61914,61914,61482,61482,61478,61478,61428,61428,61943,61943,62656,62657,62441,62440,62195,62195,61854,61854,61240,61240,61300,61300,61426,61427,62041,62041,63316,63316,63255,63255,62816,62816,62338,62339,60621,60621,61556,61556,1001,1001,6583,6582,12679,12678,16912,16911,15514,15514,11940,11940,9362,9362,7705,7705,8222,8222,10087,10088,11487,11486,11532,11533,8682,8682,4179,4179,12,12,61524,61524,59091,59091,58313,58313,56806,56806,55632,55632,56041,56040,56210,56210,55894,55894,56740,56740,59418,59418,63239,63240,1597,1598,4833,4834,6714,6714,7634,7634,8850,8850,9770,9770,9458,9458,8971,8971,9021,9021,8290,8291,5508,5507,1673,1673,63797,63797,60982,60982,59461,59462,58880,58880,57396,57397,56308,56309,57095,57095,57986,57986,58744,58745,59846,59846,60372,60371,61018,61018,62102,62101,62803,62802,63847,63847,65363,65362,1149,1149,2203,2203,2320,2321,1828,1828,1759,1759,1577,1576,990,991,262,261,64859,64859,64247,64247,64056,64056,63731,63732,63327,63326,63177,63176,63722,63721,64761,64760,65388,65387,65491,65491,65367,65367,65232,65232,65368,65369,189,189,875,875,1824,1824,2697,2697,3471,3471,3417,3417,2484,2484,2026,2026,1922,1921,1948,1948,2682,2682,3245,3246,3344,3345,3170,3171,2114,2115,1156,1157,562,562,64813,64812,63759,63759,62744,62744,61022,61022,60288,60288,60156,60156,59304,59304,59037,59037,59606,59606,60321,60321,61275,61275,62373,62373,63957,63958,182,181,1670,1670,3344,3344,4199,4199,4288,4289,5169,5169,5516,5516,4714,4713,4127,4127,3386,3386,2768,2769,2673,2673,2253,2252,2041,2042,1623,1622,163,163,64311,64311,62639,62639,60950,60950,60987,60987,61435,61435,61492,61492,62089,62089,62369,62370,62381,62381,62684,62684,62750,62750,62933,62933,63093,63093,63167,63166,63362,63363,62623,62623,61982,61983,62124,62124,61296,61296,60907,60907,61190,61190,60177,60177,61336,61336,703,703,6191,6191,12102,12102,16044,16044,14613,14613,10977,10976,7837,7837,5872,5872,6838,6838,9229,9229,11252,11252,12305,12305,10105,10105,5972,5971,2758,2758,64943,64943,61851,61850,59945,59945,57384,57384,54998,54998,54844,54843,55362,55362,55223,55222,56118,56118,59341,59341,63500,63500,1722,1721,5161,5162,7378,7379,8344,8344,9875,9875,10972,10972,9957,9957,8563,8562,7643,7643,5754,5754,2597,2597,64441,64441,61079,61080,59002,59002,58422,58423,58509,58509,58218,58218,57668,57668,57569,57570,57643,57643,57601,57600,58028,58029,59317,59316,61137,61137,62829,62830,64131,64130,65202,65201,582,582,1601,1601,2612,2612,3001,3001,3097,3097,3400,3400,3324,3324,2555,2555,1447,1447,247,246,64909,64909,64774,64774,64990,64990,64938,64938,64936,64936,65296,65296,39,39,423,423,905,905,597,598,65521,65522,65170,65170,64493,64492,64219,64220,64607,64607,64607,64607,65214,65215,1567,1568,3492,3492,5441,5440,7036,7037,7057,7057,6460,6460,6225,6225,5541,5541,4021,4020,2173,2173,475,475,64443,64444,63044,63044,62007,62006,60716,60716,59363,59364,59074,59075,59109,59108,58754,58753,58970,58970,59868,59869,61108,61108,62630,62630,64029,64029,65467,65467,1392,1392,2605,2605,4015,4015,5155,5155,5710,5709,6661,6661,7357,7357,6776,6776,5774,5774,4703,4703,3412,3412,2345,2346,1488,1488,557,557,64948,64947,63814,63814,63144,63144,62561,62561,61933,61933,61637,61637,61109,61109,60373,60373,60468,60468,61463,61463,62924,62924,64468,64468,65352,65352,64965,64965,63666,63667,62724,62724,62223,62223,61498,61498,61415,61414,61619,61619,60914,60914,60661,60661,60456,60456,59131,59130,60323,60324,161,160,6880,6880,13688,13688,18111,18111,17484,17483,14554,14553,12189,12189,10905,10904,11640,11640,13669,13669,15504,15504,15637,15637,11800,11800,5598,5597,376,376,61652,61653,59027,59027,58349,58349,56868,56868,54894,54894,54296,54296,53368,53369,51811,51811,52276,52277,55706,55707,60853,60854,406,405,4264,4264,6451,6452,7273,7273,8277,8277,9502,9502,9369,9368,8933,8933,9174,9174,8018,8017,4981,4981,1386,1386,63258,63258,60825,60826,60405,60404,60697,60697,60828,60829,60341,60340,58794,58794,56897,56897,55314,55313,54729,54729,56159,56159,58596,58597,60478,60478,62257,62256,64085,64086,65491,65491,1516,1515,2943,2943,3389,3389,3670,3671,4116,4116,3851,3852,3127,3127,2326,2326,1222,1222,430,431,301,301,326,326,528,528,829,829,734,734,431,431,251,250,65530,65531,65009,65009,64340,64340,63694,63694,63230,63230,63347,63347,63957,63957,64342,64342,64910,64910,692,692,1835,1835,2617,2617,3443,3443,3743,3743,4050,4050,5029,5029,5352,5352,4543,4543,3482,3482,2336,2337,1118,1117,65347,65347,63930,63930,62708,62708,61689,61689,61054,61053,60665,60665,59833,59833,59428,59428,60272,60272,61357,61357,62388,62389,63518,63518,64352,64353,65125,65125,238,238,709,708,1531,1531,2343,2342,3071,3071,3810,3811,3709,3709,3460,3461,3870,3870,3645,3645,2637,2637,1533,1532,205,205,64699,64698,63977,63977,63192,63192,62726,62726,62296,62296,61721,61722,61073,61073,59908,59908,59457,59457,60772,60772,62643,62643,64552,64552,380,380,152,152,65022,65021,64745,64746,64244,64244,63828,63828,63546,63546,63037,63036,62538,62537,62125,62126,61808,61808,61409,61408,61718,61718,64306,64306,2184,2184,4758,4759,7821,7821,10989,10989,13695,13695,17399,17399,19783,19783,18173,18173,15263,15263,12851,12851,10029,10029,7250,7250,4690,4690,1834,1835,64770,64770,62772,62772,60967,60967,58980,58981,57178,57178,56431,56430,56246,56246,55680,55679,55838,55838,57641,57641,59726,59725,61316,61317,63290,63290,306,306,3059,3059,5917,5918,7992,7991,8505,8505,8434,8435,8803,8802,8848,8848,7449,7449,5371,5371,3879,3880,1886,1886,63991,63992,60483,60483,57262,57262,54517,54516,53850,53850,54228,54228,53868,53868,54365,54365,56363,56363,58319,58319,60124,60124,62018,62018,63647,63647,65283,65283,1531,1531,2911,2911,3560,3560,4127,4127,4909,4909,4937,4937,4111,4111,2932,2931,1297,1297,247,248,437,437,920,920,1687,1687,2256,2256,1338,1338,65211,65211,63702,63703,62700,62699,63129,63129,64438,64438,65483,65483,413,413,65408,65408,64397,64397,63575,63575,63068,63068,63856,63856,65398,65398,846,846,2030,2030,3169,3169,3728,3728,4912,4912,5896,5896,5506,5506,5012,5012,4665,4665,3770,3769,2393,2393,669,670,64591,64592,63148,63147,61856,61856,61017,61017,59787,59787,58577,58577,58942,58942,59573,59573,59582,59582,60423,60423,61854,61854,63231,63231,64911,64911,771,771,1553,1553,2183,2183,2935,2935,3753,3753,4018,4018,3955,3955,4202,4201,3832,3832,2640,2641,1664,1664,702,702,65082,65082,64223,64223,63563,63563,63003,63002,62588,62588,62094,62094,61327,61327,60416,60416,60042,60043,60500,60499,61153,61153,61668,61669,62223,62223,62965,62965,63901,63901,64899,64899,147,147,135,135,65168,65167,65075,65076,64577,64577,63336,63336,62264,62264,60694,60694,60081,60082,63251,63251,2017,2017,5174,5173,8943,8944,12212,12213,14624,14623,18340,18340,20342,20342,17935,17934,14501,14501,11704,11705,8574,8574,5717,5716,3210,3210,410,409,63301,63302,61309,61309,59484,59485,57364,57363,55992,55992,56314,56314,57176,57176,57599,57599,58195,58196,59503,59503,61113,61112,62480,62480,64345,64346,1820,1819,4989,4989,8053,8053,10658,10659,11020,11020,10160,10161,10074,10074,8887,8887,5494,5495,1722,1722,63732,63733,60814,60814,59424,59424,58845,58846,58062,58062,57340,57339,57121,57120,57158,57158,57063,57062,57521,57522,59196,59196,61144,61145,62740,62741,64249,64248,65357,65357,765,764,2165,2165,3214,3214,3289,3288,3064,3064,2819,2818,2488,2488,2243,2242,1983,1983,1708,1709,1467,1467,1025,1025,450,449,65331,65330,64602,64601,64237,64238,64050,64051,63644,63643,63521,63521,63638,63639,63660,63659,63900,63900,63882,63883,63272,63273,62585,62584,61679,61678,61469,61470,63332,63332,485,484,2903,2902,5060,5061,5975,5975,6323,6323,7477,7477,7977,7977,6920,6919,5361,5361,3757,3758,2432,2433,1478,1478,581,581,65307,65307,64044,64045,62267,62267,60680,60679,58842,58842,57266,57266,57425,57425,58174,58174,58307,58307,59060,59060,60832,60833,62626,62625,64287,64287,588,587,2265,2265,3727,3728,5588,5588,6948,6947,6298,6298,4806,4806,3840,3840,2711,2712,1428,1428,431,431,64837,64836,63659,63660,62677,62677,61810,61809,61008,61008,60276,60277,60254,60255,60839,60838,61023,61024,61362,61362,62261,62260,62893,62893,63652,63652,64787,64786,201,201,1423,1423,2784,2785,3153,3154,2107,2108,187,187,64109,64108,62878,62877,61601,61601,60836,60836,59934,59933,59387,59387,61569,61570,64288,64288,65517,65518,2995,2996,7928,7927,13331,13330,20043,20042,23695,23695,20533,20533,14757,14757,9280,9280,4964,4964,4066,4067,5128,5128,5765,5765,5621,5621,3253,3253,64825,64824,61435,61436,58613,58612,57304,57304,57702,57703,57444,57445,57082,57082,58040,58041,58787,58786,59088,59088,60353,60352,62538,62538,65109,65109,2238,2238,4267,4268,4822,4822,4380,4380,4366,4367,4486,4486,3953,3953,3657,3656,3583,3583,2780,2779,1554,1554,130,130,64166,64166,63180,63180,62421,62421,61653,61654,61133,61133,60688,60687,60677,60678,61151,61151,61224,61224,61408,61408,62508,62508,63719,63719,64659,64660,65514,65515,311,310,277,277,479,479,691,691,619,618,569,568,719,719,735,736,519,520,481,482,521,520,219,219,65303,65304,64621,64621,63556,63555,63054,63053,63465,63466,64006,64005,64628,64629,65121,65121,64746,64745,64075,64075,63659,63659,63342,63342,63800,63800,64839,64839,65370,65371,415,414,1461,1460,2482,2483,3850,3850,5046,5046,4998,4999,4592,4592,4516,4516,4112,4112,3306,3307,2363,2362,1371,1371,366,366,64629,64629,62990,62990,61112,61111,59712,59712,59776,59776,60528,60527,60807,60808,61099,61098,61546,61546,61885,61886,62488,62488,63209,63208,64056,64056,65422,65422,1255,1256,2124,2124,2328,2329,1980,1981,1876,1875,1892,1893,1457,1458,1076,1076,765,765,365,365,245,245,65508,65508,65051,65051,64813,64813,64276,64277,63625,63625,63218,63218,62725,62725,62664,62664,62858,62857,62557,62558,62601,62600,63113,63114,63563,63562,64459,64459,65257,65258,65396,65395,132,131,411,411,285,285,65389,65388,64707,64706,64270,64269,63680,63680,62535,62536,61580,61579,60302,60303,59637,59637,62122,62122,38,38,2273,2273,5461,5461,9188,9189,12522,12522,16905,16906,19499,19499,17384,17384,13631,13631,10510,10510,7834,7835,6356,6355,5662,5663,4587,4586,3113,3113,1232,1231,64577,64577,62413,62412,60440,60441,59086,59086,58267,58267,57326,57325,56359,56359,55751,55751,55029,55029,53888,53887,53822,53823,56200,56200,59607,59608,62511,62510,65227,65228,1899,1899,3463,3464,5560,5560,7347,7347,7205,7206,6531,6531,6658,6659,6411,6411,5364,5365,4439,4438,3573,3572,2237,2238,567,567,64229,64228,62168,62168,60503,60502,59916,59916,59881,59880,59381,59382,59195,59194,60418,60417,61943,61943,63036,63036,64393,64393,65362,65362,73,72,741,742,1311,1311,969,970,629,629,440,440,22,22,65285,65285,65186,65185,65148,65148,65063,65063,64770,64769,64601,64601,64430,64430,64096,64095,64097,64096,64137,64137,63997,63997,64140,64141,64275,64275,64376,64377,64620,64621,64676,64676,65111,65111,399,399,858,859,1718,1718,2993,2994,3913,3912,5203,5204,6158,6158,5356,5355,3952,3951,2801,2800,1752,1753,1379,1379,1443,1443,1275,1274,655,655,64836,64837,63058,63058,61170,61171,59592,59592,59329,59329,59794,59793,59974,59973,60467,60467,61196,61196,61730,61729,62429,62429,62944,62944,63270,63270,63921,63921,64560,64561,65292,65293,720,721,1482,1481,2392,2392,3287,3287,3420,3419,3279,3278,3180,3181,2828,2829,2380,2380,1922,1921,1623,1623,1379,1379,663,663,65321,65320,64397,64398,63253,63254,62740,62740,62741,62741,62437,62437,62501,62501,63069,63068,63468,63468,63995,63996,64535,64535,64569,64569,64366,64366,64227,64227,64140,64141,63810,63810,63353,63353,63351,63350,63175,63174,62586,62587,62404,62405,61802,61801,61270,61271,63119,63119,68,67,1433,1432,4022,4022,7809,7809,11658,11659,16399,16398,19069,19069,16706,16706,12420,12420,8719,8718,5724,5725,4690,4690,5042,5042,5031,5031,4488,4488,2863,2863,237,238,63499,63499,61458,61458,59279,59279,57240,57241,55019,55020,53323,53322,53367,53367,54172,54171,54347,54347,54678,54678,56432,56431,58948,58948,61148,61149,63505,63504,394,395,2195,2194,4293,4293,6438,6439,6937,6936,7018,7019,7973,7972,7938,7939,6265,6264,4148,4147,1891,1890,65439,65438,64100,64101,62795,62794,61293,61294,60124,60125,59850,59850,60378,60378,60736,60736,60797,60797,61350,61350,62056,62055,62548,62548,63473,63474,64690,64691,303,303,1766,1766,2863,2862,2619,2619,1808,1808,1266,1265,885,885,713,713,525,525,65449,65450,64721,64722,64089,64090,63315,63315,62473,62472,61949,61949,62074,62074,62770,62770,63625,63625,64280,64281,64476,64477,64370,64369,64280,64280,64354,64355,65085,65084,789,788,1682,1682,2570,2570,3682,3682,4526,4525,5604,5605,6374,6374,5562,5563,4270,4269,3237,3238,1921,1921,968,969,414,414,65316,65316,64833,64833,63779,63779,62212,62211,61119,61119,60031,60030,59221,59222,58979,58979,58105,58104,57706,57706,59078,59079,60639,60640,61945,61945,63371,63371,64226,64226,64825,64825,65501,65502,518,517,1230,1230,1847,1847,2423,2424,3110,3109,3074,3074,2859,2860,3213,3213,3072,3071,2497,2497,2199,2199,1630,1630,846,845,225,226,65132,65132,64608,64608,64220,64220,63981,63981,63874,63874,63601,63600,63559,63559,63943,63942,64111,64111,64228,64229,64577,64577,64727,64726,64815,64815,65122,65123,65208,65208,64755,64756,64228,64227,64077,64078,63816,63816,63158,63157,62572,62572,61813,61814,60959,60958,61074,61074,61529,61528,61246,61246,61837,61838,64537,64537,2214,2215,5050,5050,7991,7990,10287,10288,11993,11994,14349,14348,15616,15616,14036,14036,11779,11779,10044,10043,8151,8151,6714,6714,5500,5500,4028,4027,2834,2834,1142,1142,64633,64632,63191,63191,60995,60994,58097,58097,55533,55533,52296,52296,50197,50197,51733,51734,54446,54446,56478,56478,58652,58652,60436,60435,61479,61480,62529,62529,63922,63921,285,285,2604,2605,5195,5194,7223,7223,7399,7399,6758,6758,6798,6797,6415,6416,4888,4888,3161,3161,1622,1622,31,32,63857,63858,62137,62137,60391,60391,59082,59082,59229,59229,60095,60096,60272,60271,60638,60639,61855,61855,63121,63122,64354,64353,65354,65353,246,247,630,630,1007,1007,1136,1136,1145,1144,1063,1063,1129,1128,1034,1035,108,108,64336,64337,63297,63296,62782,62783,62850,62849,62930,62930,62958,62959,63151,63151,63126,63125,63141,63141,63283,63283,63146,63146,63447,63446,64188,64189,64471,64472,64915,64914,349,348,1198,1198,2038,2037,2852,2852,3418,3417,4117,4117,4900,4901,5248,5247,4871,4872,4051,4051,3454,3455,2831,2832,1616,1617,300,299,64740,64741,63684,63684,62814,62814,62065,62064,61243,61242,60557,60557,60161,60160,59755,59755,59035,59035,58611,58611,59193,59193,60081,60082,60638,60638,61431,61432,62650,62650,63989,63990,65477,65477,1294,1293,2075,2075,2658,2659,3516,3516,4104,4104,3942,3942,3711,3712,3751,3752,3414,3413,2602,2601,1749,1749,934,934,189,189,65115,65115,64460,64459,63595,63596,62945,62945,63020,63020,63207,63208,62922,62922,62936,62936,63555,63555,64215,64216,64956,64956,139,138,371,370,452,453,808,808,1012,1011,640,639,146,147,65498,65497,65103,65103,64338,64338,63701,63700,63060,63060,62395,62395,61998,61998,61516,61516,60909,60908,60661,60662,60955,60955,61585,61584,61955,61955,62595,62595,64773,64774,1977,1976,4100,4100,6269,6270,8314,8314,10198,10198,12642,12642,14098,14098,13231,13232,11472,11471,9968,9968,8718,8719,7459,7459,6056,6056,4972,4972,3533,3533,642,643,62791,62791,59621,59621,56639,56638,54848,54848,53661,53661,51680,51681,50535,50536,51624,51623,53343,53343,54659,54660,56264,56263,58535,58536,61130,61130,63637,63636,464,465,2743,2743,5043,5043,7625,7625,9637,9637,9824,9824,9401,9400,9827,9827,9477,9478,7233,7232,4571,4571,2079,2079,65175,65174,63476,63477,61980,61980,59957,59956,58659,58659,58692,58691,58856,58857,58726,58726,59045,59045,60080,60080,61280,61280,62286,62286,63210,63211,63970,63970,64647,64647,22,23,777,778,1035,1035,1274,1274,1654,1654,1675,1676,1006,1005,39,38,64901,64901,64347,64347,63845,63846,63707,63707,63412,63412,62939,62939,63142,63142,63526,63525,63492,63491,63673,63672,64084,64084,64439,64439,64952,64951,65509,65510,559,559,1221,1221,1772,1773,2428,2428,3113,3113,3572,3572,4190,4190,4650,4650,4321,4320,3838,3838,3613,3613,3122,3122,2209,2209,1058,1058,65454,65454,64523,64524,63600,63601,62555,62556,61473,61472,60427,60427,59737,59736,59415,59414,59015,59014,58774,58775,59318,59317,60259,60259,60877,60877,61535,61536,62835,62835,64381,64382,224,223,1570,1571,2681,2680,3500,3500,4496,4496,5284,5284,5160,5159,4744,4744,4708,4708,4479,4479,3592,3593,2384,2384,1197,1196,201,201,65014,65013,64396,64396,63715,63714,63104,63105,62835,62834,62836,62837,62770,62770,62783,62782,63310,63310,64113,64113,64755,64755,65290,65291,162,162,410,410,770,771,1125,1126,1085,1084,802,802,573,573,268,268,65262,65262,64545,64546,63750,63751,63009,63009,62464,62464,62019,62019,61586,61587,61395,61395,61581,61582,61996,61995,62449,62448,62900,62900,63648,63649,64721,64721,129,129,1286,1286,3323,3323,5806,5806,8215,8216,10220,10219,11073,11073,11135,11136,11437,11437,11531,11530,10780,10780,9732,9732,8788,8788,7595,7596,5735,5735,3459,3459,1349,1348,64734,64733,62332,62332,59971,59971,57399,57398,55142,55143,54601,54600,54912,54911,54633,54633,54853,54853,56256,56256,57808,57809,59382,59382,61179,61179,62771,62771,64346,64347,613,614,2197,2196,3340,3339,4406,4405,5747,5748,6747,6747,6493,6494,5730,5731,5381,5381,4686,4685,3336,3335,1893,1894,193,192,64081,64081,63266,63266,62758,62757,61970,61970,61414,61415,61425,61426,61668,61668,61812,61811,62038,62039,62561,62561,63054,63054,63549,63548,64344,64343,65011,65012,65489,65488,644,645,962,963,525,524,82,81,65384,65383,65047,65048,64777,64777,64532,64532,64053,64053,63675,63675,63611,63612,63376,63375,62925,62925,62925,62926,63506,63507,64311,64311,65183,65182,339,339,720,720,1063,1063,1476,1477,1909,1910,2439,2438,3107,3107,3838,3837,4263,4264,4216,4216,4175,4175,4251,4252,4044,4044,3617,3618,3152,3152,2645,2646,2143,2144,1393,1393,311,311,64791,64791,63775,63775,62720,62719,61648,61649,60422,60422,59565,59564,59627,59627,59839,59840,59757,59757,60118,60118,61027,61026,62153,62153,63579,63578,64865,64865,76,75,780,780,1605,1604,2268,2268,2894,2893,3578,3578,4235,4235,4640,4640,4463,4463,4061,4060,3825,3825,3342,3342,2628,2628,1927,1927,908,907,65435,65435,64935,64934,64464,64464,63930,63930,63727,63726,63740,63741,63841,63841,63977,63978,64158,64157,64554,64554,65046,65046,93,93,791,792,1089,1089,1106,1107,1349,1349,1372,1373,1060,1060,874,873,599,599,224,225,85,86,65401,65401,64991,64991,64766,64765,64724,64723,64764,64765,64902,64903,65003,65003,65047,65046,65153,65152,65322,65323,65507,65507,148,148,262,263,314,313,391,390,553,553,796,796,1025,1026,1128,1128,1188,1187,1204,1205,1084,1085,1309,1309,2310,2310,3649,3648,4949,4949,6121,6121,6848,6849,7307,7308,7948,7947,8381,8380,8054,8054,7283,7284,6584,6583,5619,5619,3934,3934,2093,2092,511,512,64291,64292,62482,62482,60849,60848,59020,59020,57586,57587,57382,57382,57595,57595,57460,57460,57733,57734,58981,58981,60611,60611,62104,62105,63620,63619,65165,65166,1071,1070,2609,2608,3936,3937,4418,4417,4527,4527,4935,4935,5168,5168,4749,4750,4060,4059,3500,3499,2908,2908,2056,2057,1091,1091,76,75,64596,64596,64072,64072,64057,64056,63920,63919,63707,63706,63741,63740,63731,63731,63658,63659,63889,63890,64285,64284,64636,64636,65064,65063,65406,65407,65450,65451,65430,65430,65464,65464,65419,65419,65377,65377,65379,65378,65306,65306,65157,65158,64926,64926,64640,64640,64409,64408,64285,64285,64378,64378,64575,64576,64653,64654,64885,64886,65373,65374,258,258,650,650,1026,1026,1279,1279,1643,1643,2010,2010,2200,2200,2502,2502,2848,2848,3073,3073,3236,3235,3053,3053,2679,2679,2586,2586,2482,2482,2093,2093,1587,1587,1073,1073,695,695,312,312,65333,65333,65025,65025,64721,64721,64114,64114,63560,63560,62942,62943,62223,62223,62125,62125,62415,62415,62389,62389,62503,62503,63142,63142,63903,63903,64575,64575,65249,65249,466,466,1314,1314,2133,2133,2764,2764,3001,3001,2891,2891,2913,2913,3102,3102,2942,2942,2516,2516,2259,2260,1998,1998,1532,1532,1087,1087,690,689,295,296,123,123,131,131,47,46,65444,65444,65401,65401,65435,65435,65491,65491,36,36,198,198,402,402,564,564,679,679,720,720,704,704,717,717,660,660,493,493,351,351,185,185,65532,65532,65441,65441,65265,65266,64942,64942,64853,64853,65090,65090,65373,65372,105,105,415,415,669,669,919,919,1271,1270,1537,1538,1644,1644,1823,1823,2063,2063,2204,2204,2287,2288,2339,2339,2357,2357,2287,2286,1934,1934,1463,1463,1174,1174,886,886,487,487,100,100,65221,65221,64878,64878,64692,64692,64453,64453,64179,64179,64028,64028,63988,63988,64019,64019,63949,63949,63900,63900,64371,64370,65119,65119,84,84,725,725,1830,1830,3051,3051,4239,4239,5295,5295,5938,5938,6353,6353,6909,6909,7310,7310,7048,7048,6500,6501,6251,6251,5723,5723,4303,4303,2603,2603,1102,1102,65133,65133,63748,63748,62474,62474,60965,60965,59729,59729,59440,59440,59507,59507,59266,59266,59316,59316,60199,60199,61356,61356,62369,62369,63446,63446,64521,64521,14,14,1202,1202,2190,2190,2601,2601,2902,2902,3415,3415,3687,3687,3412,3412,2936,2936,2600,2600,2188,2188,1516,1516,755,755,65476,65476,64761,64761,64449,64449,64230,64230,63817,63817,63669,63669,63948,63948,64283,64283,64572,64572,64865,64865,65150,65150,65476,65476,297,297,579,579,696,696,760,760,957,957,1064,1064,836,836,540,540,327,327,65519,65519,65090,65090,64708,64708,64257,64257,63831,63831,63668,63668,63575,63575,63342,63342,63320,63320,63737,63737,64271,64271,64717,64717,65150,65150,28,28,434,434,909,909,1404,1404,1823,1823,2193,2193,2605,2605,2950,2950,3018,3018,2963,2963,3014,3014,2966,2966,2624,2624,2192,2192,1810,1810,1372,1372,823,823,231,231,65182,65182,64683,64683,64340,64340,64026,64026,63595,63595,63218,63218,63113,63113,63122,63122,63007,63007,63011,63011,63451,63451,64118,64118,64759,64759,65394,65394,371,371,785,785,1327,1327,1748,1748,1801,1801,1800,1800,1896,1896,1902,1902,1773,1773,1566,1566,1351,1351,1145,1145,905,905,651,651,360,360,86,86,16,16,21,21,65455,65455,65453,65453,72,72,196,196,320,320,514,514,687,687,846,846,1063,1063,1234,1234,1237,1237,1197,1197,1213,1213,1163,1163,1042,1042,959,959,879,879,723,723,472,472,174,174,65426,65426,65148,65148,64901,64901,64685,64686,64409,64409,64248,64248,64420,64420,64711,64711,64918,64918,65180,65180,21,21,422,422,832,831,1243,1243,1569,1569,1842,1842,2178,2178,2416,2416,2375,2375,2264,2264,2206,2206,2035,2036,1745,1745,1421,1421,1082,1082,757,757,432,432,93,93,65283,65283,64981,64980,64818,64818,64705,64705,64536,64536,64464,64464,64510,64510,64555,64555,64633,64633,64741,64742,64855,64855,64987,64987,65093,65093,65229,65229,65451,65451,163,163,431,431,628,628,683,683,726,726,781,781,808,808,858,858,929,929,1006,1006,971,971,706,706,363,363,56,56,65354,65354,65315,65315,65330,65329,65264,65264,65304,65304,65444,65444,40,40,197,197,320,320,404,404,496,496,562,562,607,607,572,572,490,490,483,483,401,401,176,176,65496,65496,65245,65245,65026,65026,64957,64957,64909,64909,64877,64877,64866,64866,64808,64808,64773,64773,64701,64701,64660,64660,64871,64871,65129,65129,65325,65325,70,70,242,242,310,310,476,476,568,568,593,593,709,709,807,807,886,886,942,942,924,924,932,932,877,877,666,666,434,434,187,187,65505,65505,65428,65428,65393,65393,65347,65347,65299,65299,65187,65187,65064,65064,64950,64950,64852,64852,64873,64873,64961,64961,65023,65023,65103,65103,65197,65197,65277,65277,65350,65350,65427,65427,65514,65514,23,23,36,36,53,53,10,10,65473,65473,65433,65433,65393,65393,65386,65386,65406,65406,65421,65421,65468,65468,65475,65475,65466,65466,65531,65531,65512,65511,65393,65393,65316,65316,65207,65207,65119,65120,65160,65160,65196,65196,65217,65217,65286,65286,65321,65321,65325,65324,65329,65329,65329,65329,65376,65376,65458,65458,65535,0,24,24,65476,65476,65350,65350,65220,65220,65073,65073,64990,64990,64953,64953,64881,64881,64845,64845,64845,64845,64828,64828,64823,64823,64853,64853,64947,64947,65092,65092,65243,65243,65413,65413,6,6,83,83,203,203,293,293,271,271,220,220,162,162,107,107,93,93,86,86,77,77,35,35,65462,65462,65361,65361,65261,65261,65153,65153,65161,65161,65240,65240,65264,65264,65328,65328,65462,65462,41,41,179,179,318,318,334,334,275,275,254,254,241,241,213,213,196,196,162,162,113,113,100,100,95,95,61,61,33,33,35,35,74,74,128,128,143,143,121,121,117,117,134,134,122,122,68,68,65510,65510,65387,65387,65319,65319,65365,65365,65438,65438,65493,65493,14,14,12,12,65513,65513,65535,65535,9,9,65487,65487,65409,65409,65327,65327,65296,65296,65346,65346,65399,65399,65440,65440,65468,65468,65466,65466,65469,65469,65456,65456,65406,65407,65402,65402,65437,65437,65441,65441,65432,65432,65442,65442,65468,65467,65508,65508,23,23,60,60,75,75,122,122,188,188,186,186,166,166,178,178,150,150,102,102,71,71,19,19,65512,65512,65508,65508,65503,65503,65481,65481,65460,65460,65463,65463,65450,65450,65399,65399,65369,65369,65321,65321,65228,65228,65177,65177,65145,65145,65132,65132,65183,65183,65198,65198,65212,65212,65325,65325,65438,65438,16,16,141,141,129,129,70,70,57,57,65529,65529,65501,65501,19,19,27,27,37,37,69,69,70,70,100,100,122,122,79,79,47,47,14,14,65503,65503,65481,65481,65443,65443,65405,65405,65416,65416,65422,65422,65395,65395,65381,65381,65387,65387,65363,65363,65311,65311,65262,65262,65212,65212,65194,65194,65219,65219,65203,65203,65178,65178,65265,65265,65409,65409,4,4,93,93,75,75,11,11,65512,65512,65467,65467,65443,65443,65445,65445,65410,65410,65422,65422,65495,65495,15,15,83,83,127,127,71,71,65527,65527,65484,65484,65441,65441,65388,65388,65345,65345,65318,65318,65299,65299,65279,65279,65245,65245,65193,65193,65149,65149,65131,65131,65106,65106,65075,65075,65044,65044,65018,65018,65022,65022,65012,65012,64985,64985,65014,65014,65070,65070,65107,65107,65160,65160,65184,65184,65167,65167,65185,65185,65207,65207,65188,65188,65175,65176,65170,65170,65168,65168,65188,65188,65216,65216,65243,65243,65236,65236,65174,65174,65088,65088,64979,64979,64881,64881,64885,64885,64944,64944,64974,64974,64997,64997,65013,65013,65022,65022,65053,65053,65068,65068,65030,65030,64965,64965,64914,64914,64915,64915,64941,64941,64947,64947,64972,64972,64992,64991,64940,64940,64859,64859,64793,64793,64747,64747,64766,64766,64822,64822,64857,64857,64881,64881,64904,64904,64942,64942,64997,64997,65021,65021,65018,65018,65023,65023,65009,65009,64981,64981,64970,64970,64972,64972,64977,64977,64987,64987,65003,65003,65028,65028,65043,65043,65056,65056,65081,65081,65088,65088,65079,65079,65106,65106,65171,65171,65231,65231,65287,65287,65360,65360,65418,65418,65449,65449,65500,65500,65527,65527,65478,65478,65413,65413,65353,65353,65297,65297,65297,65297,65339,65339,65375,65375,65389,65389,65330,65330,65231,65231,65173,65173,65110,65110,65045,65045,65014,65014,64958,64958,64897,64897,64890,64890,64880,64880,64846,64846,64847,64847,64893,64893,64960,64960,65029,65029,65102,65102,65176,65176,65249,65249,65331,65331,65381,65381,65354,65354,65300,65300,65256,65256,65219,65219,65226,65226,65251,65251,65258,65258,65271,65271,65282,65282,65277,65277,65284,65284,65304,65304,65329,65329,65356,65356,65374,65374,65379,65379,65354,65354,65310,65310,65277,65277,65255,65255,65265,65265,65308,65308,65331,65331,65341,65341,65355,65355,65360,65360,65375,65375,65381,65381,65334,65334,65273,65273,65218,65218,65179,65179,65192,65192,65234,65234,65266,65266,65293,65293,65290,65290,65272,65272,65270,65270,65250,65250,65195,65195,65135,65135,65078,65078,65038,65038,65024,65024,65008,65008,64979,64979,64969,64969,64995,64996,65041,65041,65079,65079,65090,65090,65057,65056,65001,65001,64950,64950,64922,64922,64963,64963,65046,65046,65090,65090,65150,65150,65266,65266,65385,65385,65530,65530,118,118,113,113,64,64,53,53,30,30,2,2,65521,65521,65488,65488,65457,65457,65418,65418,65367,65367,65328,65328,65287,65287,65254,65254,65240,65241,65196,65196,65174,65174,65239,65239,65327,65327,65403,65403,65459,65459,65446,65446,65400,65400,65371,65371,65346,65345,65338,65338,65342,65342,65329,65329,65339,65339,65375,65375,65411,65411,65470,65470,65492,65492,65409,65409,65293,65293,65191,65191,65109,65109,65092,65092,65111,65111,65116,65116,65125,65125,65144,65145,65166,65166,65182,65182,65184,65184,65199,65199,65222,65222,65218,65218,65250,65250,65353,65353,65465,65465,53,53,158,158,163,163,135,135,142,142,115,115,47,47,65513,65513,65431,65431,65385,65385,65413,65412,65460,65460,65504,65504,65533,65533,65511,65511,65480,65480,65456,65456,65416,65416,65386,65386,65361,65361,65318,65318,65298,65298,65304,65304,65308,65308,65327,65327,65326,65327,65272,65272,65198,65198,65115,65115,65066,65066,65101,65101,65166,65166,65206,65206,65251,65251,65305,65305,65356,65356,65414,65414,65462,65462,65484,65484,65502,65501,65530,65530,15,15,13,13,14,14,27,27,24,24,2,2,65511,65511,65486,65486,65473,65473,65448,65449,65416,65416,65403,65403,65365,65365,65281,65281,65189,65189,65085,65085,65015,65015,65059,65059,65143,65143,65191,65191,65259,65259,65355,65355,65446,65446,8,8,66,66,30,30,65492,65492,65438,65438,65401,65401,65374,65374,65357,65357,65339,65339,65311,65311,65283,65283,65260,65260,65236,65236,65211,65211,65185,65184,65151,65151,65113,65113,65099,65099,65144,65144,65213,65213,65265,65265,65305,65305,65323,65323,65327,65327,65348,65348,65366,65367,65365,65365,65371,65371,65376,65376,65380,65380,65405,65405,65439,65439,65480,65480,65517,65517,65507,65507,65469,65469,65437,65437,65410,65410,65393,65393,65387,65386,65374,65374,65359,65359,65329,65329,65286,65286,65254,65254,65216,65216,65167,65167,65116,65116,65047,65047,64995,64995,65010,65010,65053,65053,65081,65081,65112,65113,65153,65152,65202,65202,65271,65271,65332,65332,65353,65353,65352,65352,65353,65353,65347,65347,65349,65349,65356,65356,65344,65344,65338,65338,65365,65365,65388,65388,65410,65410,65445,65445,65458,65458,65462,65462,65485,65485,65478,65478,65415,65415,65339,65339,65278,65278,65220,65220,65177,65177,65147,65147,65107,65107,65083,65083,65107,65107,65145,65145,65181,65181,65201,65201,65180,65180,65147,65147,65118,65118,65092,65092,65115,65115,65165,65165,65193,65193,65240,65240,65301,65301,65347,65347,65413,65412,65459,65460,65448,65448,65421,65421,65388,65388,65362,65362,65375,65375,65396,65396,65416,65416,65438,65438,65418,65418,65384,65384,65362,65362,65316,65316,65259,65259,65201,65201,65133,65133,65090,65090,65082,65082,65087,65087,65100,65100,65121,65121,65169,65169,65227,65227,65262,65262,65299,65299,65334,65333,65358,65358,65401,65401,65419,65419,65397,65397,65389,65389,65385,65385,65372,65372,65362,65362,65329,65329,65292,65292,65272,65272,65244,65244,65215,65216,65191,65191,65161,65161,65148,65148,65147,65147,65148,65148,65141,65141,65109,65109,65069,65069,65030,65030,64988,64988,64982,64982,64989,64989,64970,64970,64979,64979,65025,65025,65071,65071,65127,65127,65178,65178,65208,65208,65230,65230,65250,65250,65280,65280,65303,65303,65305,65305,65317,65316,65317,65318,65294,65294,65285,65285,65278,65278,65249,65249,65211,65211,65172,65172,65140,65140,65105,65105,65056,65056,65006,65006,64948,64948,64908,64908,64941,64941,64997,64997,65051,65051,65109,65109,65131,65131,65139,65139,65165,65165,65168,65168,65174,65174,65194,65194,65191,65191,65217,65217,65286,65286,65350,65350,65425,65425,65486,65486,65485,65484,65455,65455,65430,65430,65402,65402,65371,65371,65339,65340,65305,65305,65278,65278,65274,65274,65278,65278,65262,65262,65258,65258,65275,65275,65290,65290,65321,65321,65330,65330,65286,65286,65243,65243,65193,65193,65155,65155,65202,65202,65275,65275,65336,65336,65401,65400,65416,65416,65412,65412,65448,65448,65447,65446,65408,65408,65371,65371,65310,65310,65289,65289,65345,65345,65411,65411,65483,65483,65531,65531,65508,65508,65465,65465,65435,65435,65409,65409,65405,65405,65411,65411,65411,65412,65404,65404,65375,65375,65335,65335,65287,65288,65256,65256,65269,65269,65296,65296,65312,65312,65332,65332,65347,65347,65354,65354,65366,65366,65376,65376,65394,65394,65412,65412,65416,65416,65439,65439,65484,65484,65535,65535,65,65,104,104,84,84,44,44,17,16,65523,65524,65490,65490,65467,65467,65452,65452,65428,65428,65400,65400,65378,65378,65353,65353,65333,65333,65336,65336,65344,65344,65345,65345,65350,65350,65355,65355,65356,65356,65354,65355,65371,65370,65417,65417,65472,65473,65525,65525,38,38,72,72,95,96,125,126,144,145,134,134,112,112,94,95,76,75,62,62,55,55,36,36,22,22,26,27,30,30,40,40,52,52,39,39,24,23,13,12,65531,65530,65532,65532,5,4,65534,65534,7,7,27,27,46,46,79,79,96,95,92,92,99,99,97,97,100,100,136,137,175,175,214,214,251,251,235,235,195,194,176,175,146,145,109,108,85,85,50,49,31,32,65,65,103,104,129,130,154,155,149,150,129,129,122,121,101,102,82,81,78,77,58,59,55,55,90,89,119,120,155,155,190,190,178,177,157,157,147,147,123,124,120,121,128,128,117,117,121,121,132,131,132,133,146,146,150,149,136,136,125,126,113,113,111,110,114,114,108,108,118,119,118,117,77,77,39,40,0,65494,65494,65498,65497,65519,65518,65526,65526,3,2,22,23,45,46,67,68,86,85,115,114,140,140,155,156,187,186,217,217,239,240,277,278,297,296,260,260,203,203,153,153,113,113,87,87,70,71,49,48,29,29,27,27,33,33,41,40,43,44,26,25,3,4,65522,65522,65509,65508,8,8,68,68,93,93,141,141,218,218,283,284,376,376,428,429,367,368,283,283,207,207,140,140,143,143,173,173,187,187,206,206,198,197,173,174,163,163,142,142,133,134,137,136,122,122,131,131,157,157,174,174,208,208,223,222,196,196,162,163,119,119,101,101,134,134,184,184,241,241,273,273,256,255,224,223,186,187,165,164,195,195,241,241,284,284,318,318,314,314,295,295,283,283,270,271,280,279,293,293,299,299,311,310,291,290,254,254,236,236,202,202,169,169,152,153,117,118,100,100,125,125,153,153,186,186,210,210,201,201,186,186,172,172,166,165,192,193,233,233,272,272,305,306,316,317,317,317,322,323,324,324,320,321,317,317,314,314,303,303,273,273,229,229,183,183,154,153,153,153,163,163,170,171,174,174,174,173,176,177,178,179,187,187,226,226,272,272,316,316,346,345,326,326,288,288,267,266,242,242,241,240,257,256,252,252,265,264,294,295,318,317,354,355,367,367,332,331,288,288,241,240,215,216,248,248,297,297,350,350,383,383,357,356,311,312,270,270,242,241,269,269,312,313,339,339,369,369,367,367,347,346,344,344,330,331,319,319,319,320,302,301,301,301,327,327,353,353,394,394,415,416,390,390,361,360,329,329,300,300,299,299,305,304,308,309,312,311,298,299,279,280,262,262,255,254,270,269,286,286,297,298,312,311,315,316,319,320,329,329,327,327,328,327,330,330,326,326,334,334,340,341,345,345,362,361,365,366,355,355,343,343,322,322,307,306,304,305,305,305,311,312,311,311,293,294,270,270,237,236,221,220,247,246,285,286,325,325,354,354,354,355,347,346,344,344,334,334,319,319,300,299,280,281,267,266,250,250,236,237,224,225,215,216,226,225,239,239,247,246,254,254,244,243,226,226,218,219,206,206,198,197,203,203,195,195,198,197,229,229,261,260,292,291,319,319,319,318,309,308,306,306,299,299,283,283,264,264,245,246,226,226,208,208,194,194,179,178,167,168,169,170,170,171,172,172,173,174,163,164,151,151,140,141,132,132,147,147,174,174,193,193,214,214,225,225,227,227,243,242,250,250,239,239,230,230,215,215,212,212,243,243,281,281,314,313,338,338,332,332,311,311,304,304,290,291,266,266,244,244,217,217,195,195,200,201,213,212,209,210,217,217,247,247,280,280,319,319,351,352,347,347,333,332,334,334,329,328,321,321,321,321,310,310,306,306,326,325,351,351,378,377,396,396,393,393,382,383,373,373,369,369,378,378,387,387,393,393,405,405,412,412,417,417,425,425,423,422,415,414,402,403,385,385,380,381,391,391,408,409,434,433,444,444,438,439,432,432,417,418,414,414,446,446,490,489,532,533,568,568,564,563,541,540,529,529,505,504,464,463,421,421,373,372,338,337,336,336,347,347,354,354,356,355,348,349,336,336,321,322,316,317,331,331,351,352,373,373,399,400,419,420,433,434,454,453,472,472,486,486,502,502,519,520,525,524,510,509,484,484,462,462,438,438,417,417,410,410,395,395,373,373,370,371,368,369,353,353,355,355,371,371,384,385,405,406,422,421,414,414,396,396,381,380,371,371,368,367,369,369,379,379,377,376,345,346,309,309,276,276,246,246,238,238,239,240,231,230,229,229,241,241,254,255,265,265,279,279,312,312,355,355,391,391,419,420,426,426,417,417,423,422,415,414,371,371,324,324,277,277,236,236,229,229,229,229,217,218,215,216,212,212,201,200,196,196,199,198,207,208,226,226,247,246,257,257,250,250,238,238,230,230,218,219,213,212,213,212,207,208,207,207,211,211,212,213,218,219,217,217,205,206,194,195,173,174,166,167,203,203,250,250,290,290,328,327,340,340,339,339,356,355,367,366,359,358,348,348,338,337,316,315,277,277,232,231,187,187,143,143,114,115,99,99,75,75,64,64,84,84,111,111,135,134,156,157,174,174,188,189,201,201,217,216,232,233,241,242,257,258,272,272,257,257,234,233,217,216,191,192,172,173,162,162,146,145,140,139,157,156,185,185,216,216,230,230,218,218,196,195,168,168,154,155,171,171,196,196,218,218,229,230,212,213,179,179,151,151,130,130,121,121,120,121,119,119,117,116,109,109,93,93,78,78,74,73,80,80,94,94,107,107,112,113,110,110,109,109,114,115,109,109,99,99,89,89,67,68,57,56,74,74,98,97,119,120,134,133,118,118,89,88,69,68,51,51,40,40,35,35,30,30,22,23,4,3,65515,65515,65499,65499,65485,65486,65483,65482,65488,65487,65480,65479,65472,65473,65479,65479,65481,65481,65484,65484,65498,65499,65520,65520,12,11,41,41,55,56,41,42,14,14,65530,65530,65513,65512,65498,65499,65497,65497,65493,65492,65484,65485,65489,65489,65492,65492,65490,65490,65495,65494,65501,65501,65509,65509,65522,65522,65527,65526,65521,65521,65508,65509,65489,65489,65482,65483,65491,65492,65507,65506,65528,65528,4,3,65528,65528,65511,65511,65498,65498,65483,65483,65468,65468,65452,65452,65429,65430,65415,65415,65419,65419,65431,65430,65439,65438,65450,65450,65457,65456,65456,65457,65462,65463,65469,65469,65477,65477,65496,65496,65509,65510,65517,65516,65524,65525,65528,65528,65534,65534,6,7,1,2,65533,65534,65534,65534,65528,65528,65529,65529,65531,65532,65528,65528,65535,65535,8,8,18,17,34,33,40,41,37,37,25,26,4,3,65535,65535,24,24,57,57,95,94,115,115,101,100,77,76,57,56,42,42,42,42,48,48,51,51,51,51,47,47,45,45,44,44,44,43,55,54,66,67,72,72,81,81,85,85,81,82,83,82,84,84,89,89,102,102,116,117,125,125,114,114,90,90,73,73,55,55,42,42,41,41,31,31,30,29,47,47,63,64,84,84,102,103,96,96,86,86,78,78,64,63,62,62,60,59,45,46,43,43,53,53,65,65,86,86,96,96,84,84,65,65,45,44,30,30,27,27,30,30,35,34,34,34,30,31,31,30,29,30,25,25,18,19,9,8,0,65530,65530,65518,65519,65506,65506,65496,65495,65485,65485,65480,65481,65477,65477,65469,65470,65474,65473,65492,65491,65511,65511,65530,65531,11,10,16,16,19,19,27,26,25,24,14,14,5,5,65527,65527,65518,65517,65522,65522,65532,65532,6,6,11,11,2,2,65523,65523,65510,65511,65500,65499,65499,65500,65505,65505,65509,65510,65513,65513,65502,65503,65480,65480,65462,65462,65452,65451,65455,65456,65465,65466,65463,65463,65465,65465,65481,65482,65502,65501,65530,65530,12,11,65534,65535,65518,65517,65507,65506,65490,65490,65481,65482,65477,65477,65466,65465,65454,65453,65441,65442,65426,65425,65410,65410,65400,65401,65404,65404,65408,65408,65406,65407,65412,65413,65412,65411,65402,65402,65402,65402,65391,65392,65362,65362,65335,65335,65304,65305,65278,65278,65283,65283,65301,65301,65315,65315,65328,65327,65328,65329,65324,65324,65327,65328,65330,65331,65330,65330,65331,65331,65333,65334,65335,65335,65340,65340,65340,65340,65338,65338,65344,65343,65354,65354,65367,65366,65385,65385,65389,65390,65369,65370,65344,65344,65317,65318,65306,65306,65335,65335,65374,65374,65402,65401,65437,65437,65472,65472,65508,65507,21,20,49,49,44,43,28,28,8,7,65525,65526,65518,65518,65510,65509,65505,65504,65494,65495,65476,65476,65458,65458,65433,65433,65414,65415,65422,65423,65433,65433,65443,65442,65450,65451,65432,65432,65400,65400,65377,65377,65356,65356,65357,65356,65376,65376,65388,65388,65398,65399,65406,65405,65403,65402,65408,65408,65409,65408,65393,65393,65381,65381,65367,65367,65352,65353,65344,65345,65330,65329,65313,65314,65306,65306,65288,65288,65267,65268,65252,65252,65237,65237,65242,65243,65263,65263,65269,65269,65278,65278,65304,65304,65328,65328,65358,65358,65379,65379,65365,65366,65345,65345,65333,65334,65323,65323,65327,65326,65331,65331,65327,65327,65329,65329,65325,65325,65319,65318,65325,65326,65319,65319,65291,65290,65262,65261,65224,65224,65200,65200,65223,65223,65262,65261,65295,65295,65324,65324,65327,65327,65310,65310,65299,65300,65298,65298,65311,65310,65334,65334,65357,65356,65372,65371,65371,65370,65361,65361,65357,65356,65350,65349,65347,65347,65354,65353,65352,65352,65351,65351,65360,65360,65363,65364,65366,65367,65376,65377,65377,65377,65377,65378,65389,65390,65386,65387,65363,65363,65339,65339,65313,65313,65291,65290,65296,65297,65312,65311,65314,65314,65325,65325,65337,65337,65337,65337,65348,65349,65355,65356,65333,65333,65308,65307,65279,65280,65259,65259,65286,65285,65331,65331,65367,65366,65391,65390,65374,65374,65332,65332,65307,65307,65285,65286,65272,65271,65276,65277,65271,65272,65267,65268,65286,65286,65305,65306,65322,65321,65336,65336,65337,65338,65334,65333,65333,65332,65330,65330,65326,65326,65316,65316,65308,65307,65302,65303,65295,65296,65295,65295,65298,65298,65294,65293,65286,65286,65277,65277,65264,65265,65256,65256,65249,65250,65241,65241,65231,65231,65229,65229,65239,65239,65256,65257,65276,65275,65286,65286,65275,65274,65251,65252,65231,65231,65214,65214,65218,65217,65234,65234,65243,65242,65257,65257,65276,65275,65288,65289,65311,65312,65327,65327,65329,65328,65334,65333,65333,65333,65335,65336,65354,65354,65370,65370,65388,65388,65403,65402,65389,65389,65367,65368,65349,65349,65323,65324,65314,65313,65306,65306,65288,65288,65285,65285,65285,65286,65287,65287,65306,65305,65299,65299,65257,65257,65211,65211,65156,65155,65120,65120,65144,65145,65184,65184,65214,65214,65244,65243,65247,65247,65229,65229,65223,65223,65221,65222,65226,65226,65245,65244,65260,65260,65265,65265,65263,65263,65257,65258,65255,65255,65255,65256,65249,65249,65243,65243,65241,65242,65233,65233,65215,65215,65192,65193,65168,65168,65153,65152,65161,65160,65181,65180,65197,65196,65212,65213,65223,65224,65224,65225,65227,65227,65229,65229,65224,65224,65221,65221,65221,65220,65220,65220,65232,65232,65246,65245,65253,65253,65265,65264,65266,65266,65260,65260,65267,65267,65264,65264,65244,65244,65226,65225,65199,65199,65180,65181,65204,65204,65245,65245,65278,65278,65307,65307,65321,65322,65326,65326,65338,65338,65347,65346,65343,65343,65339,65340,65341,65341,65343,65342,65335,65335,65318,65318,65297,65297,65285,65286,65297,65296,65318,65317,65330,65331,65339,65339,65333,65333,65319,65318,65311,65311,65294,65294,65265,65265,65239,65240,65208,65208,65185,65185,65196,65195,65213,65213,65227,65226,65243,65244,65245,65245,65239,65239,65241,65241,65236,65236,65222,65223,65214,65213,65207,65206,65201,65201,65206,65207,65215,65214,65216,65216,65226,65227,65254,65254,65285,65285,65319,65319,65347,65348,65348,65348,65337,65336,65332,65333,65321,65321,65305,65304,65289,65289,65269,65269,65260,65260,65266,65267,65279,65280,65294,65294,65298,65298,65288,65288,65275,65275,65257,65257,65247,65247,65262,65262,65283,65283,65299,65299,65313,65313,65320,65320,65323,65323,65326,65326,65336,65336,65353,65352,65371,65371,65396,65396,65410,65410,65395,65395,65365,65366,65340,65340,65318,65318,65315,65315,65324,65324,65328,65328,65332,65332,65336,65336,65338,65338,65342,65342,65339,65339,65332,65332,65326,65326,65316,65316,65307,65307,65299,65298,65284,65284,65273,65272,65269,65269,65275,65275,65289,65289,65299,65299,65308,65308,65311,65311,65305,65305,65308,65308,65308,65308,65296,65296,65288,65288,65274,65274,65263,65263,65285,65285,65315,65315,65338,65338,65361,65361,65358,65358,65345,65345,65347,65347,65336,65336,65318,65318,65303,65303,65274,65274,65264,65265,65288,65288,65315,65316,65348,65348,65364,65364,65321,65321,65257,65257,65203,65203,65162,65162,65162,65162,65187,65187,65198,65198,65208,65208,65224,65224,65232,65231,65244,65244,65254,65254,65248,65248,65244,65244,65244,65244,65241,65241,65239,65239,65236,65236,65230,65230,65230,65230,65236,65237,65246,65246,65257,65257,65257,65256,65240,65241,65217,65217,65191,65191,65179,65179,65192,65192,65217,65217,65239,65240,65253,65252,65248,65248,65233,65233,65222,65222,65215,65215,65202,65202,65187,65187,65177,65176,65163,65163,65150,65150,65144,65144,65131,65131,65123,65123,65135,65135,65150,65149,65165,65165,65177,65177,65167,65168,65156,65156,65151,65151,65141,65141,65155,65155,65182,65182,65194,65194,65218,65219,65252,65252,65276,65276,65313,65313,65331,65331,65302,65302,65259,65259,65214,65214,65182,65182,65195,65195,65222,65221,65243,65243,65258,65257,65242,65242,65213,65212,65185,65185,65169,65169,65184,65184,65219,65219,65251,65251,65272,65271,65267,65267,65248,65248,65235,65235,65231,65231,65247,65247,65279,65279,65307,65308,65325,65325,65313,65313,65287,65287,65268,65268,65246,65246,65231,65232,65227,65227,65208,65209,65204,65204,65234,65235,65267,65267,65300,65300,65331,65331,65333,65333,65327,65327,65324,65323,65318,65319,65319,65319,65320,65320,65323,65323,65327,65327,65318,65318,65302,65302,65291,65291,65279,65279,65276,65276,65284,65284,65289,65289,65289,65289,65287,65287,65282,65282,65272,65272,65266,65266,65275,65275,65286,65286,65299,65299,65310,65310,65306,65306,65295,65294,65293,65293,65290,65291,65292,65292,65300,65300,65304,65304,65303,65303,65298,65298,65283,65282,65270,65270,65265,65265,65274,65274,65295,65295,65312,65312,65324,65324,65331,65331,65332,65332,65337,65337,65339,65339,65333,65333,65324,65324,65308,65308,65306,65306,65333,65333,65365,65365,65398,65398,65426,65426,65419,65419,65405,65405,65398,65398,65385,65385,65387,65387,65399,65399,65403,65403,65407,65407,65399,65400,65384,65384,65381,65381,65368,65369,65354,65354,65345,65344,65319,65319,65309,65309,65336,65336,65368,65368,65406,65406,65435,65435,65425,65425,65400,65400,65380,65381,65362,65362,65361,65361,65367,65367,65369,65369,65368,65369,65362,65362,65355,65355,65345,65344,65343,65343,65368,65368,65402,65402,65439,65439,65465,65465,65448,65448,65411,65411,65387,65387,65359,65359,65342,65343,65342,65341,65326,65325,65318,65318,65337,65337,65354,65354,65373,65373,65393,65393,65396,65396,65394,65394,65398,65398,65401,65401,65405,65406,65413,65413,65423,65423,65431,65431,65428,65428,65423,65423,65420,65420,65416,65416,65417,65417,65425,65425,65420,65420,65423,65423,65451,65450,65482,65482,65514,65514,6,6,14,14,8,8,6,6,1,1,65524,65524,65511,65511,65497,65497,65493,65494,65511,65511,1,1,35,35,54,54,33,33,65534,65534,65500,65500,65470,65470,65472,65471,65489,65489,65492,65492,65497,65497,65505,65505,65504,65504,65507,65507,65516,65516,65527,65527,6,6,20,20,27,27,24,24,15,16,10,10,6,6,11,11,29,29,42,42,51,51,67,67,74,73,86,86,100,100,92,92,79,78,70,70,60,60,59,59,59,59,50,50,47,47,49,49,52,52,62,63,59,59,43,42,26,26,3,3,65528,65528,18,18,54,55,87,86,117,117,131,131,137,137,155,155,162,162,141,141,119,119,98,98,78,78,85,86,101,101,106,106,126,126,146,146,156,156,178,178,186,186,168,168,147,147,115,115,100,100,146,146,207,207,261,261,310,310,314,314,297,297,300,300,283,283,246,246,216,216,173,173,144,144,160,160,188,188,218,218,242,242,236,236,218,218,206,206,191,191,180,180,172,172,155,155,149,150,162,162,175,175,190,190,203,202,196,196,187,187,184,184,181,181,186,186,197,197,198,198,206,206,229,229,252,252,277,277,300,300,304,304,301,301,305,305,305,305,294,294,285,285,274,274,259,259,248,248,238,238,222,223,213,213,219,219,230,229,240,240,246,247,237,237,222,222,211,211,198,198,188,188,176,176,160,160,154,154,164,164,178,179,194,194,203,203,204,204,204,204,209,209,215,215,217,217,219,219,221,221,222,221,234,234,249,249,260,260,278,278,292,292,299,299,315,315,316,316,284,284,247,246,206,206,177,177,184,184,201,201,212,212,224,224,235,235,252,252,273,273,288,288,307,307,327,327,342,342,358,358,357,356,341,340,330,330,320,320,312,313,312,313,305,305,300,300,292,292,279,279,276,276,265,265,245,245,228,228,201,201,193,193,237,237,291,291,347,347,386,386,368,368,333,333,315,315,290,290,290,290,301,301,291,292,297,297,321,321,339,339,369,369,391,391,380,380,369,369,360,360,343,343,328,328,310,310,287,287,271,271,269,269,274,274,277,276,277,277,281,281,279,279,277,277,287,287,303,303,324,324,349,349,360,360,350,350,330,330,313,313,308,308,320,320,347,347,375,375,389,389,391,391,382,382,371,371,368,368,370,370,375,375,381,381,381,381,382,382,384,384,382,382,387,387,407,407,433,433,461,461,479,479,472,472,449,448,425,426,417,417,435,435,469,469,498,498,514,514,522,522,522,522,521,521,529,529,535,535,542,542,557,557,557,557,527,527,490,490,453,453,423,423,413,413,408,408,398,398,396,396,399,399,403,403,408,408,409,409,413,413,424,424,432,432,440,440,449,449,455,455,464,464,469,469,468,468,459,459,447,448,442,441,443,444,448,448,460,460,462,462,442,442,415,415,389,389,369,369,367,367,373,373,373,373,376,376,378,378,376,376,376,376,381,381,396,396,419,419,438,438,454,454,466,466,472,472,481,481,489,489,486,486,483,483,482,482,474,474,458,457,439,439,418,418,400,400,391,391,388,388,381,381,374,374,367,367,356,356,348,348,342,342,340,340,340,340,335,335,330,330,338,338,342,342,348,348,353,353,335,335,313,313,304,304,289,289,271,271,256,256,231,231,222,222,244,244,275,275,309,309,332,332,327,327,309,309,296,296,288,288,299,299,328,328,352,353,368,368,373,373,364,364,357,357,359,359,376,376,404,404,431,430,448,448,447,447,432,431,423,423,418,418,406,407,399,399,386,386,372,373,377,377,380,380,373,373,373,373,368,368,361,361,366,365,359,359,346,346,343,343,333,333,328,328,349,348,373,373,395,395,416,416,408,408,386,386,374,374,358,358,334,334,310,310,285,285,263,263,251,251,241,241,231,231,224,224,229,229,236,236,241,241,251,251,270,270,289,289,306,306,321,321,331,331,341,341,354,354,360,360,352,352,339,340,331,331,317,317,295,295,276,276,254,255,241,241,248,247,258,258,266,266,281,281,292,292,300,300,311,311,319,319,321,321,323,323,328,328,329,329,323,323,312,312,296,296,287,287,300,300,323,323,340,340,355,355,363,363,365,366,375,374,378,378,374,374,372,372,368,368,368,368,367,366,364,364,366,366,363,363,350,350,335,335,312,311,298,298,314,314,335,335,357,357,379,379,370,370,347,347,337,337,319,319,309,309,307,307,292,292,286,286,308,308,339,339,375,375,401,402,400,400,388,388,379,379,374,374,384,384,395,396,404,404,411,411,406,406,399,399,396,396,381,381,354,354,321,321,281,281,258,258,264,264,278,278,288,289,292,292,280,280,257,257,239,239,227,227,216,216,213,213,215,214,210,210,206,206,202,202,195,195,193,193,200,200,215,215,234,234,235,235,210,210,176,176,140,140,124,124,136,136,158,158,173,174,185,185,185,185,172,172,162,162,161,161,169,169,188,188,211,211,222,222,214,214,197,197,182,182,171,171,170,170,181,181,185,185,178,178,169,168,147,148,123,123,114,114,119,119,130,130,147,146,152,152,137,137,115,115,91,91,83,83,99,99,129,129,161,161,176,176,156,156,123,123,93,93,72,72,75,75,92,92,104,104,114,114,117,117,109,109,106,105,103,104,98,98,96,96,90,90,91,91,108,108,128,128,147,147,161,161,163,163,163,163,169,169,167,167,151,151,127,127,102,102,81,81,69,69,63,63,51,51,48,48,61,61,76,76,94,94,101,101,80,80,49,49,23,23,65533,65533,65523,65523,65521,65521,65510,65510,65508,65508,65514,65514,65513,65513,65522,65522,65524,65524,65505,65505,65490,65490,65473,65473,65457,65457,65459,65459,65467,65467,65469,65469,65477,65477,65488,65488,65498,65498,65514,65515,65521,65520,65507,65507,65485,65485,65461,65461,65444,65444,65434,65434,65429,65429,65424,65424,65413,65414,65401,65401,65384,65384,65369,65369,65365,65365,65373,65372,65390,65390,65409,65408,65412,65413,65404,65404,65384,65385,65362,65362,65358,65358,65372,65372,65392,65391,65416,65416,65422,65422,65395,65395,65358,65358,65326,65326,65297,65297,65289,65289,65289,65289,65280,65280,65280,65280,65296,65296,65315,65315,65341,65341,65366,65366,65381,65381,65392,65392,65406,65406,65419,65419,65427,65427,65435,65435,65443,65443,65445,65445,65451,65451,65458,65457,65456,65456,65462,65462,65477,65478,65494,65494,65512,65512,65521,65521,65502,65502,65472,65472,65445,65445,65427,65427,65438,65438,65468,65468,65491,65491,65508,65508,65518,65518,65517,65517,65520,65520,65526,65526,65525,65526,65526,65527,65529,65529,65527,65527,65522,65522,65510,65510,65496,65496,65492,65492,65500,65500,65514,65514,65528,65528,65535,65535,1,1,0,2,1,2,3,2,2,7,7,11,11,10,10,8,8,4,4,0,3,3,9,9,16,16,24,24,30,29,35,34,34,34,31,31,32,32,27,27,15,15,11,11,65535,65535,65513,65514,65501,65501,65483,65483,65465,65465,65471,65471,65482,65482,65487,65488,65504,65503,65517,65517,65529,65529,12,12,17,17,4,4,65522,65522,65497,65497,65480,65480,65481,65481,65491,65491,65500,65500,65505,65505,65501,65500,65492,65492,65482,65482,65480,65480,65484,65484,65484,65484,65493,65493,65496,65496,65468,65469,65434,65434,65406,65406,65376,65376,65367,65367,65372,65372,65361,65361,65359,65359,65388,65388,65420,65420,65451,65451,65481,65480,65492,65492,65493,65493,65502,65502,65505,65505,65492,65492,65483,65483,65474,65475,65472,65471,65478,65479,65488,65488,65492,65492,65492,65492,65490,65490,65488,65488,65490,65490,65489,65489,65488,65487,65482,65482,65475,65475,65473,65473,65477,65477,65488,65488,65498,65497,65503,65503,65505,65505,65503,65503,65499,65499,65502,65502,65500,65500,65492,65492,65491,65491,65482,65482,65468,65468,65459,65459,65440,65440,65431,65431,65454,65454,65480,65480,65508,65508,65525,65525,65500,65500,65462,65462,65434,65434,65405,65405,65408,65408,65430,65430,65433,65433,65447,65448,65474,65474,65492,65492,65526,65526,7,7,65513,65513,65475,65475,65439,65438,65407,65407,65405,65405,65414,65414,65418,65418,65426,65426,65430,65430,65430,65430,65435,65434,65436,65436,65440,65440,65446,65446,65442,65442,65442,65442,65446,65446,65445,65445,65452,65452,65462,65463,65468,65468,65478,65478,65487,65487,65489,65489,65490,65490,65488,65488,65485,65485,65479,65480,65477,65477,65477,65477,65473,65473,65473,65473,65484,65484,65495,65495,65509,65508,65515,65515,65501,65501,65482,65482,65467,65467,65442,65442,65416,65416,65389,65389,65356,65356,65344,65344,65353,65353,65369,65369,65392,65391,65401,65402,65386,65386,65363,65363,65337,65337,65321,65321,65332,65332,65355,65355,65374,65374,65395,65395,65403,65403,65405,65405,65412,65412,65411,65412,65412,65412,65418,65418,65417,65417,65420,65420,65429,65430,65434,65434,65444,65443,65451,65450,65439,65439,65421,65421,65407,65407,65383,65384,65360,65360,65343,65343,65319,65319,65303,65303,65318,65318,65342,65342,65361,65361,65382,65383,65396,65395,65395,65395,65402,65402,65405,65405,65391,65392,65378,65377,65369,65368,65355,65355,65340,65340,65324,65325,65309,65310,65301,65301,65303,65303,65308,65308,65308,65308,65306,65306,65311,65311,65317,65317,65323,65323,65331,65332,65332,65332,65330,65330,65332,65331,65325,65325,65316,65316,65311,65311,65299,65299,65294,65294,65311,65311,65335,65335,65357,65357,65375,65375,65376,65376,65366,65366,65362,65362,65359,65359,65353,65353,65350,65350,65351,65352,65346,65346,65332,65333,65315,65314,65295,65294,65276,65277,65265,65264,65249,65249,65232,65232,65221,65220,65219,65220,65223,65223,65223,65222,65228,65229,65247,65247,65270,65270,65296,65295,65313,65312,65311,65311,65307,65307,65307,65308,65307,65308,65316,65316,65328,65328,65334,65334,65344,65344,65357,65357,65371,65371,65392,65391,65405,65404,65410,65411,65417,65417,65420,65421,65422,65423,65420,65419,65408,65408,65401,65401,65395,65396,65389,65388,65383,65383,65372,65372,65368,65368,65376,65376,65382,65381,65392,65391,65398,65399,65387,65387,65375,65376,65361,65361,65347,65347,65358,65357,65375,65375,65385,65385,65398,65398,65400,65400,65398,65398,65405,65404,65402,65402,65400,65400,65402,65402,65396,65397,65400,65399,65409,65410,65421,65421,65443,65443,65449,65449,65432,65431,65406,65406,65371,65371,65354,65355,65371,65371,65394,65394,65425,65426,65437,65436,65396,65396,65339,65339,65285,65286,65246,65245,65253,65253,65277,65277,65290,65289,65306,65306,65309,65308,65300,65300,65299,65300,65294,65294,65298,65298,65316,65316,65323,65324,65334,65333,65350,65350,65361,65361,65377,65377,65384,65383,65361,65362,65336,65336,65314,65315,65296,65296,65291,65291,65293,65294,65292,65292,65293,65292,65297,65297,65301,65302,65304,65304,65309,65308,65308,65308,65302,65302,65305,65304,65297,65298,65268,65267,65233,65233,65193,65193,65168,65169,65191,65190,65227,65228,65253,65253,65276,65276,65281,65281,65275,65275,65280,65281,65284,65283,65290,65291,65308,65307,65321,65322,65329,65328,65322,65322,65303,65303,65295,65294,65283,65283,65264,65265,65247,65247,65222,65222,65209,65209,65226,65226,65250,65251,65276,65275,65292,65293,65287,65288,65276,65277,65265,65265,65251,65251,65248,65248,65248,65247,65239,65239,65236,65236,65236,65235,65234,65235,65238,65239,65239,65240,65232,65233,65223,65223,65217,65217,65206,65206,65176,65176,65138,65137,65101,65100,65075,65074,65079,65079,65102,65102,65120,65120,65135,65136,65149,65149,65153,65154,65164,65164,65175,65174,65176,65175,65178,65177,65180,65180,65176,65175,65162,65163,65146,65146,65125,65126,65111,65111,65116,65117,65135,65134,65149,65149,65168,65168,65194,65194,65215,65215,65239,65239,65260,65259,65254,65255,65240,65239,65231,65231,65223,65224,65222,65222,65227,65227,65231,65231,65230,65230,65222,65222,65215,65215,65206,65206,65197,65198,65204,65204,65210,65210,65210,65209,65219,65219,65231,65230,65238,65238,65252,65252,65257,65256,65255,65255,65259,65259,65258,65257,65262,65263,65281,65280,65297,65297,65322,65322,65331,65331,65300,65300,65259,65258,65217,65217,65186,65187,65196,65195,65215,65215,65224,65223,65237,65237,65238,65239,65234,65234,65242,65241,65237,65238,65222,65223,65210,65209,65190,65190,65179,65179,65183,65184,65191,65191,65204,65204,65208,65209,65198,65197,65184,65185,65165,65165,65156,65157,65172,65172,65190,65191,65212,65212,65228,65228,65207,65207,65173,65173,65150,65150,65130,65130,65140,65140,65171,65171,65188,65189,65208,65209,65231,65231,65243,65243,65261,65262,65279,65278,65284,65285,65296,65295,65304,65303,65306,65306,65317,65316,65323,65324,65331,65330,65342,65342,65331,65331,65312,65312,65300,65300,65276,65276,65250,65249,65226,65226,65193,65192,65174,65174,65185,65185,65206,65207,65230,65229,65242,65241,65230,65229,65208,65208,65184,65184,65178,65177,65205,65206,65245,65245,65280,65280,65306,65306,65299,65299,65276,65275,65263,65264,65251,65251,65240,65240,65241,65241,65242,65242,65234,65235,65221,65220,65199,65199,65173,65174,65158,65157,65165,65166,65187,65188,65205,65206,65220,65220,65226,65226,65220,65220,65216,65216,65220,65219,65225,65224,65238,65239,65254,65254,65264,65263,65272,65271,65277,65276,65283,65283,65289,65288,65278,65278,65260,65260,65243,65243,65228,65228,65234,65235,65253,65253,65261,65261,65274,65274,65294,65293,65309,65308,65332,65332,65350,65350,65341,65341,65330,65331,65325,65326,65313,65313,65304,65305,65297,65298,65281,65281,65280,65280,65301,65301,65325,65326,65348,65349,65367,65367,65376,65376,65383,65383,65392,65392,65398,65398,65399,65398,65398,65398,65399,65399,65400,65399,65395,65396,65389,65390,65383,65383,65378,65378,65384,65384,65394,65393,65397,65398,65401,65401,65401,65401,65398,65399,65406,65405,65403,65403,65378,65377,65344,65344,65310,65310,65288,65288,65296,65297,65319,65319,65330,65330,65339,65340,65349,65348,65355,65355,65368,65367,65377,65377,65371,65371,65359,65359,65350,65350,65343,65342,65344,65343,65348,65347,65346,65347,65349,65349,65362,65362,65377,65376,65397,65397,65408,65407,65386,65387,65357,65358,65333,65333,65310,65310,65312,65311,65324,65324,65324,65324,65330,65331,65343,65343,65349,65349,65367,65367,65373,65373,65351,65352,65325,65326,65292,65293,65268,65268,65280,65279,65296,65297,65310,65310,65327,65327,65325,65326,65318,65318,65320,65321,65312,65312,65302,65302,65296,65296,65282,65282,65278,65278,65288,65287,65302,65302,65322,65323,65329,65329,65310,65311,65281,65280,65249,65249,65230,65231,65228,65228,65234,65233,65241,65241,65243,65242,65244,65245,65248,65249,65244,65244,65251,65250,65273,65274,65298,65297,65331,65331,65348,65348,65323,65322,65287,65286,65247,65247,65222,65221,65246,65246,65288,65289,65322,65323,65353,65353,65352,65351,65333,65333,65329,65329,65319,65319,65310,65311,65312,65313,65307,65307,65306,65305,65301,65300,65285,65285,65278,65278,65271,65271,65264,65265,65267,65268,65258,65258,65263,65263,65308,65307,65359,65358,65411,65411,65445,65446,65433,65433,65408,65408,65386,65386,65364,65363,65369,65368,65381,65382,65386,65386,65398,65398,65398,65399,65389,65389,65393,65392,65380,65380,65339,65340,65292,65292,65243,65243,65208,65207,65201,65201,65208,65208,65209,65210,65205,65205,65207,65207,65211,65210,65209,65210,65211,65211,65199,65199,65172,65173,65155,65154,65142,65141,65141,65142,65158,65158,65168,65168,65177,65177,65193,65193,65202,65201,65216,65217,65229,65229,65221,65221,65219,65218,65219,65219,65210,65210,65211,65211,65209,65208,65201,65201,65206,65206,65206,65205,65205,65204,65215,65216,65216,65215,65207,65207,65195,65196,65175,65174,65170,65170,65190,65190,65214,65214,65241,65241,65259,65259,65273,65273,65287,65288,65294,65294,65307,65307,65332,65332,65356,65356,65388,65388,65408,65408,65395,65396,65378,65378,65363,65363,65344,65345,65339,65340,65338,65337,65334,65333,65334,65335,65330,65329,65325,65325,65327,65326,65324,65324,65327,65327,65332,65332,65327,65326,65337,65336,65367,65366,65397,65397,65430,65429,65453,65452,65455,65455,65454,65454,65454,65455,65454,65453,65454,65454,65456,65457,65461,65462,65461,65461,65446,65447,65426,65427,65404,65405,65393,65393,65401,65401,65416,65416,65428,65429,65439,65439,65446,65447,65456,65456,65466,65466,65469,65468,65465,65465,65461,65460,65453,65454,65452,65452,65454,65455,65451,65450,65447,65446,65447,65447,65446,65447,65447,65448,65456,65457,65462,65463,65464,65464,65467,65466,65465,65466,65463,65463,65471,65471,65483,65483,65493,65492,65506,65505,65507,65506,65502,65501,65504,65505,65502,65503,65494,65494,65490,65489,65477,65477,65470,65470,65489,65490,65513,65513,65530,65530,10,9,18,17,23,24,37,36,48,49,50,49,43,43,41,40,37,37,23,24,9,9,65532,65531,65516,65517,65515,65515,65521,65520,65517,65517,65520,65521,0,14,14,32,32,40,40,23,23,4,3,65522,65523,65512,65512,65523,65524,8,8,21,21,32,32,31,31,20,21,15,14,14,15,20,20,30,29,38,38,43,43,38,39,26,26,17,16,6,5,65535,65535,3,4,3,3,65535,65534,65529,65530,65522,65522,65520,65520,65519,65520,65512,65511,65506,65506,65501,65502,65501,65500,65515,65515,65524,65524,65526,65527,2,2,12,12,26,25,44,44,48,49,51,52,56,55,53,52,62,63,77,77,87,86,110,111,126,127,121,122,123,122,119,119,111,111,122,122,133,133,139,139,148,147,140,141,127,127,114,113,102,102,113,113,129,129,139,139,157,157,162,163,161,160,174,174,169,170,149,149,133,132,105,104,100,100,148,148,212,212,277,277,325,325,316,317,283,283,261,261,244,244,241,241,255,255,257,258,257,256,269,269,282,283,291,290,301,300,305,304,299,299,300,300,299,300,282,282,259,260,235,236,220,220,234,234,261,261,285,285,302,301,294,294,277,277,266,266,252,252,250,250,259,259,255,255,260,259,273,274,282,281,305,304,317,316,291,291,261,262,230,230,210,211,236,236,274,275,305,306,329,329,320,320,292,292,273,274,258,257,262,262,284,284,297,297,315,314,331,330,334,334,347,347,356,355,350,349,349,350,344,345,338,339,355,355,378,378,394,393,410,410,409,409,397,398,395,396,383,383,352,353,321,320,286,285,263,263,271,271,286,286,293,293,301,301,297,296,285,285,283,284,274,273,255,256,242,242,227,227,222,222,237,237,253,253,270,271,280,281,275,275,269,269,262,261,259,258,283,282,313,314,345,344,375,376,378,378,369,370,374,373,365,364,352,352,344,344,320,320,310,310,328,329,347,347,371,371,389,389,380,381,365,364,349,350,340,340,349,349,365,364,381,381,394,394,394,394,393,392,391,391,390,390,414,414,447,448,472,473,495,495,495,494,480,480,476,475,465,466,448,447,435,436,420,421,407,406,402,401,390,391,376,376,365,365,355,356,348,349,342,342,339,338,337,338,334,334,333,334,332,331,323,323,314,314,301,301,296,296,315,314,345,344,375,376,395,394,385,385,368,369,362,362,350,349,340,340,334,334,321,321,323,323,344,343,361,361,380,380,392,392,387,388,381,381,376,376,373,373,379,379,383,383,385,384,392,393,408,408,430,430,451,451,461,460,464,464,465,465,464,464,461,461,441,441,414,414,397,397,382,382,372,372,371,370,362,362,359,359,372,373,385,385,395,395,401,402,393,394,379,380,368,367,359,359,363,362,371,371,378,377,386,387,391,391,394,394,399,399,398,399,397,397,397,398,397,396,402,402,405,405,403,402,409,409,403,402,370,370,336,336,300,300,276,276,295,296,331,331,354,355,379,379,393,392,394,393,403,404,411,411,407,407,404,403,396,397,383,383,372,372,363,362,357,358,353,352,344,343,331,331,317,317,311,311,317,316,324,325,336,336,345,345,345,345,344,344,343,343,335,335,330,331,330,331,323,323,320,320,332,332,347,347,357,357,370,370,378,378,379,379,391,391,398,398,377,378,349,349,324,323,302,301,301,301,312,312,316,315,319,319,319,318,317,316,322,323,322,322,316,316,313,313,299,299,293,293,308,308,324,325,346,345,368,368,373,374,377,377,382,383,383,383,397,397,414,415,420,421,436,436,455,455,471,470,497,496,510,511,493,494,469,469,444,443,422,422,426,425,441,440,447,446,448,448,440,439,417,416,401,402,389,389,363,363,340,339,320,321,295,295,281,281,277,277,261,261,260,260,292,293,331,331,368,369,400,401,408,409,404,404,407,408,411,411,406,406,403,402,405,405,393,393,362,362,322,322,275,275,243,244,257,257,289,289,315,315,339,340,344,344,336,337,344,344,340,339,314,314,293,292,264,265,243,243,254,255,270,270,275,275,291,291,307,306,318,318,341,341,357,356,352,352,344,344,339,338,328,329,316,315,304,304,292,292,283,282,286,285,293,293,294,294,294,294,295,296,293,293,290,290,291,291,299,299,309,310,320,319,331,331,340,339,345,344,354,353,357,358,350,351,343,343,333,334,318,318,301,301,284,283,267,267,260,261,263,262,272,272,280,279,280,280,283,284,283,284,280,280,283,283,283,283,284,284,294,295,289,288,260,261,223,222,178,179,156,157,177,177,211,211,244,244,274,274,291,291,301,301,313,313,320,320,321,321,319,319,317,318,317,316,307,307,297,297,291,290,280,280,279,279,291,291,297,297,296,295,281,281,252,253,229,229,215,215,205,205,203,203,198,198,196,196,213,213,234,234,253,253,275,275,289,289,298,298,312,312,319,319,316,316,308,308,296,296,291,291,297,297,303,303,311,311,310,310,289,289,265,265,246,246,224,224,207,207,198,198,181,181,173,173,190,190,219,219,242,242,268,268,284,284,292,292,309,309,313,313,288,288,253,253,219,219,192,192,188,188,195,195,198,198,201,201,202,202,200,200,195,195,191,191,189,189,187,187,184,184,180,180,168,168,152,152,137,137,124,124,130,130,145,145,157,157,172,172,183,183,182,182,195,195,199,199,181,181,166,166,148,148,130,130,141,141,160,160,171,171,185,185,189,189,184,184,184,184,179,179,171,172,167,167,156,156,153,153,168,168,187,186,210,210,225,225,212,212,188,188,170,170,155,155,149,149,147,147,141,141,133,133,118,118,99,99,80,80,69,69,83,83,110,110,129,129,143,143,143,143,132,132,127,127,120,120,103,103,89,89,73,73,57,57,54,54,53,53,52,52,58,58,67,67,84,84,103,103,112,112,118,118,117,117,112,112,114,114,117,117,122,122,133,133,134,134,121,121,101,101,73,73,61,61,75,75,97,97,119,119,133,133,128,128,114,114,102,102,99,99,112,112,138,138,171,171,182,182,156,156,113,113,69,69,37,37,43,43,65,65,77,77,87,87,87,87,77,77,75,75,72,72,74,74,83,83,85,85,87,87,96,96,102,102,114,114,125,125,116,116,104,104,100,100,93,92,84,83,73,73,58,58,54,54,73,73,101,101,126,126,141,141,136,136,116,116,102,102,92,92,85,85,83,83,79,79,72,72,76,76,86,86,94,94,101,101,104,105,107,108,112,112,117,117,128,128,136,136,142,142,149,149,144,144,134,134,128,128,120,120,112,112,110,110,103,104,98,98,100,100,98,98,96,96,100,100,102,102,102,102,105,105,103,103,92,92,76,76,64,64,44,44,18,18,65532,65532,65509,65509,65488,65487,65491,65491,65501,65501,65505,65505,65515,65515,65522,65522,65522,65522,65529,65529,65531,65531,65528,65528,65528,65528,65522,65522,65521,65521,65525,65525,65526,65526,65528,65528,65528,65528,65517,65517,65510,65510,65504,65504,65496,65496,65493,65493,65489,65489,65483,65483,65477,65477,65468,65468,65459,65459,65451,65451,65440,65440,65428,65428,65410,65410,65393,65393,65385,65385,65387,65387,65400,65400,65416,65416,65419,65419,65415,65415,65402,65402,65387,65387,65385,65385,65390,65390,65400,65400,65418,65418,65421,65420,65403,65403,65378,65378,65343,65342,65324,65324,65340,65340,65366,65366,65391,65391,65409,65409,65407,65407,65394,65394,65384,65384,65380,65380,65395,65395,65425,65425,65457,65457,65474,65474,65463,65463,65436,65436,65409,65410,65397,65397,65414,65414,65446,65447,65478,65478,65499,65499,65491,65491,65460,65460,65435,65435,65415,65415,65405,65405,65410,65410,65415,65415,65410,65410,65401,65401,65387,65387,65369,65369,65363,65363,65385,65385,65417,65417,65443,65443,65462,65462,65464,65464,65449,65449,65440,65440,65435,65435,65432,65432,65439,65439,65445,65445,65446,65446,65441,65441,65428,65428,65416,65416,65406,65406,65388,65388,65372,65372,65352,65352,65335,65335,65343,65343,65356,65356,65367,65367,65380,65380,65373,65373,65362,65362,65366,65366,65349,65349,65316,65316,65287,65287,65246,65246,65227,65227,65251,65251,65284,65284,65316,65316,65344,65344,65348,65348,65344,65344,65344,65344,65343,65343,65342,65342,65338,65338,65333,65333,65330,65330,65326,65326,65329,65329,65326,65326,65330,65330,65355,65355,65383,65383,65408,65408,65426,65426,65414,65414,65389,65389,65375,65375,65356,65356,65348,65348,65350,65350,65340,65340,65336,65336,65346,65346,65355,65355,65374,65374,65380,65380,65369,65369,65357,65357,65341,65341,65331,65331,65336,65336,65338,65337,65339,65339,65339,65340,65317,65317,65289,65289,65263,65263,65238,65238,65241,65241,65255,65255,65260,65260,65274,65274,65282,65282,65280,65280,65293,65293,65292,65292,65270,65270,65252,65252,65228,65228,65215,65214,65237,65237,65265,65265,65291,65292,65313,65313,65308,65308,65292,65292,65280,65280,65269,65269,65275,65275,65291,65291,65300,65300,65320,65320,65352,65352,65388,65388,65428,65428,65452,65452,65440,65440,65418,65418,65403,65403,65382,65382,65353,65353,65319,65319,65281,65281,65257,65257,65264,65264,65285,65285,65297,65297,65312,65311,65330,65330,65342,65343,65361,65361,65377,65377,65379,65379,65381,65381,65385,65385,65387,65387,65395,65395,65400,65400,65405,65405,65416,65416,65416,65417,65417,65417,65424,65424,65419,65419,65402,65402,65385,65385,65362,65362,65350,65350,65371,65371,65404,65404,65429,65429,65452,65452,65468,65468,65478,65477,65492,65492,65499,65499,65485,65485,65465,65465,65452,65452,65435,65435,65421,65421,65412,65412,65397,65397,65395,65395,65417,65417,65438,65438,65456,65456,65472,65472,65472,65472,65462,65462,65454,65454,65443,65443,65437,65437,65431,65431,65421,65421,65413,65413,65391,65391,65364,65364,65349,65349,65327,65327,65290,65290,65256,65256,65214,65214,65187,65187,65207,65207,65249,65249,65286,65286,65315,65315,65312,65312,65292,65292,65281,65281,65273,65273,65274,65274,65289,65289,65300,65300,65312,65312,65333,65333,65346,65346,65356,65356,65372,65372,65386,65386,65400,65400,65423,65423,65436,65436,65424,65424,65401,65401,65380,65380,65359,65359,65345,65345,65337,65337,65322,65322,65312,65312,65316,65316,65327,65327,65332,65332,65336,65336,65344,65344,65354,65354,65362,65362,65375,65375,65382,65382,65379,65379,65380,65380,65377,65377,65358,65358,65340,65340,65328,65328,65317,65316,65317,65317,65330,65330,65340,65340,65341,65341,65328,65328,65305,65305,65280,65280,65267,65267,65279,65279,65299,65299,65313,65313,65323,65323,65319,65319,65302,65302,65292,65291,65286,65286,65286,65286,65295,65295,65304,65304,65309,65309,65303,65303,65291,65291,65281,65281,65272,65272,65265,65265,65265,65265,65260,65260,65252,65252,65251,65251,65245,65246,65243,65244,65241,65241,65215,65215,65184,65184,65162,65162,65138,65138,65137,65137,65147,65147,65144,65144,65153,65153,65180,65180,65209,65209,65249,65249,65273,65273,65263,65263,65241,65242,65219,65219,65206,65206,65225,65224,65257,65257,65289,65289,65313,65313,65310,65310,65290,65290,65275,65275,65261,65261,65249,65249,65242,65242,65232,65232,65220,65220,65214,65214,65203,65203,65190,65190,65188,65188,65194,65194,65204,65204,65218,65218,65222,65222,65203,65203,65176,65176,65151,65151,65126,65126,65121,65121,65131,65131,65133,65133,65139,65139,65150,65150,65155,65155,65166,65166,65175,65175,65171,65171,65168,65168,65164,65164,65161,65161,65172,65172,65184,65184,65198,65198,65211,65211,65209,65209,65198,65198,65192,65192,65189,65189,65196,65196,65206,65206,65211,65211,65216,65216,65220,65220,65218,65218,65220,65220,65213,65213,65190,65190,65168,65168,65146,65146,65119,65119,65107,65107,65106,65106,65098,65098,65096,65096,65113,65113,65129,65129,65144,65144,65166,65166,65179,65179,65187,65187,65206,65206,65215,65215,65185,65185,65138,65138,65099,65099,65068,65068,65059,65059,65068,65068,65067,65067,65064,65064,65083,65083,65105,65105,65115,65115,65138,65138,65167,65167,65198,65198,65237,65237,65255,65255,65238,65238,65211,65211,65183,65183,65170,65170,65189,65189,65217,65217,65245,65245,65259,65259,65225,65225,65168,65168,65125,65125,65088,65088,65079,65079,65092,65092,65089,65089,65090,65090,65114,65114,65136,65136,65162,65162,65182,65182,65184,65184,65182,65182,65179,65179,65173,65173,65175,65175,65173,65173,65171,65171,65180,65180,65183,65183,65190,65190,65200,65200,65204,65204,65209,65209,65215,65215,65220,65220,65228,65228,65240,65240,65253,65253,65271,65271,65278,65278,65267,65267,65249,65249,65229,65229,65218,65218,65221,65221,65224,65224,65225,65225,65226,65226,65225,65225,65226,65226,65226,65226,65229,65229,65241,65241,65260,65260,65277,65277,65290,65290,65295,65295,65297,65297,65301,65300,65297,65298,65283,65283,65260,65260,65238,65238,65230,65230,65241,65241,65262,65262,65287,65287,65299,65299,65286,65286,65264,65264,65245,65245,65228,65228,65227,65227,65238,65238,65237,65237,65241,65241,65268,65268,65292,65292,65316,65316,65343,65343,65355,65355,65367,65367,65386,65386,65388,65388,65373,65373,65354,65354,65333,65333,65320,65320,65318,65318,65315,65315,65313,65313,65310,65310,65306,65306,65308,65308,65306,65306,65304,65304,65312,65312,65316,65316,65314,65314,65323,65323,65336,65336,65346,65346,65361,65361,65363,65363,65343,65343,65319,65319,65299,65299,65287,65287,65295,65295,65318,65318,65340,65340,65355,65355,65356,65356,65344,65344,65331,65331,65329,65329,65340,65340,65363,65363,65385,65385,65398,65398,65402,65402,65401,65401,65403,65403,65405,65405,65402,65402,65402,65402,65401,65401,65399,65399,65401,65401,65403,65403,65404,65404,65413,65413,65430,65430,65450,65450,65472,65472,65485,65485,65485,65485,65476,65476,65469,65469,65466,65466,65468,65468,65479,65479,65489,65489,65487,65487,65482,65482,65471,65471,65455,65455,65453,65453,65463,65463,65474,65474,65493,65493,65509,65509,65505,65505,65494,65494,65481,65481,65468,65468,65465,65465,65467,65467,65467,65467,65463,65463,65453,65453,65440,65440,65429,65429,65425,65425,65438,65438,65461,65461,65482,65482,65496,65496,65491,65491,65470,65470,65455,65455,65448,65448,65447,65447,65451,65451,65454,65454,65450,65450,65440,65440,65429,65429,65416,65416,65404,65404,65399,65399,65391,65391,65379,65379,65377,65377,65379,65379,65381,65381,65392,65392,65392,65392,65375,65375,65363,65363,65350,65350,65338,65338,65341,65341,65349,65349,65359,65359,65365,65365,65351,65351,65326,65326,65304,65304,65289,65289,65302,65302,65327,65327,65339,65339,65355,65355,65374,65374,65386,65386,65402,65402,65422,65422,65429,65429,65438,65438,65452,65452,65450,65450,65429,65429,65401,65401,65372,65372,65357,65357,65368,65368,65393,65393,65416,65416,65424,65424,65406,65406,65372,65372,65342,65342,65319,65319,65314,65314,65321,65321,65315,65315,65322,65322,65353,65353,65383,65383,65416,65416,65442,65442,65434,65434,65420,65420,65415,65415,65404,65404,65399,65399,65396,65396,65389,65389,65388,65388,65389,65389,65395,65395,65405,65405,65409,65409,65408,65408,65403,65403,65394,65394,65395,65395,65401,65401,65405,65405,65414,65414,65411,65411,65393,65393,65380,65380,65360,65360,65349,65349,65369,65369,65393,65393,65412,65412,65436,65436,65449,65449,65451,65451,65466,65466,65473,65473,65462,65462,65451,65451,65443,65443,65429,65429,65423,65423,65424,65424,65419,65419,65424,65424,65447,65447,65471,65471,65498,65498,65514,65514,65489,65489,65448,65448,65412,65412,65379,65379,65374,65374,65382,65382,65372,65372,65369,65369,65387,65387,65402,65402,65423,65423,65440,65440,65433,65433,65417,65417,65408,65408,65404,65404,65410,65410,65429,65429,65455,65455,65460,65460,65425,65425,65371,65371,65315,65315,65279,65279,65290,65290,65326,65326,65355,65355,65371,65371,65365,65365,65339,65339,65314,65314,65297,65297,65290,65290,65296,65296,65305,65305,65311,65311,65318,65318,65319,65319,65315,65315,65325,65325,65353,65353,65384,65384,65421,65421,65446,65446,65424,65424,65387,65387,65360,65360,65332,65332,65317,65317,65323,65323,65312,65312,65304,65304,65318,65318,65324,65324,65332,65332,65348,65348,65352,65352,65359,65359,65374,65374,65373,65373,65367,65367,65362,65362,65350,65350,65347,65347,65365,65365,65386,65386,65406,65406,65428,65428,65442,65442,65446,65446,65453,65453,65459,65459,65449,65449,65436,65436,65430,65430,65414,65414,65394,65394,65377,65377,65358,65358,65345,65345,65354,65353,65370,65370,65384,65384,65395,65395,65407,65407,65414,65413,65417,65417,65426,65427,65443,65443,65465,65465,65487,65487,65498,65498,65498,65499,65492,65492,65485,65485,65483,65483,65482,65482,65481,65481,65488,65488,65483,65483,65452,65452,65410,65410,65362,65362,65334,65334,65355,65355,65394,65393,65427,65427,65463,65463,65481,65481,65490,65490,65510,65510,65520,65520,65516,65516,65514,65514,65507,65507,65505,65505,65520,65520,65533,65534,11,11,34,34,53,52,74,74,101,101,120,120,131,131,141,141,148,148,152,152,160,160,168,168,171,171,177,178,185,185,190,190,195,195,194,194,182,182,169,168,160,160,150,150,144,144,137,137,125,125,122,122,129,129,139,139,154,154,162,162,145,145,122,122,102,102,85,85,90,90,110,110,121,121,133,133,149,149,162,162,179,179,197,197,207,207,217,217,227,227,232,233,237,237,238,238,242,242,251,251,257,257,263,263,270,270,271,271,275,275,277,277,268,268,273,273,285,285,295,295,313,313,315,315,298,298,283,283,262,262,249,249,263,263,283,283,302,302,314,314,292,292,257,257,232,232,205,205,194,194,196,196,185,185,183,183,194,194,202,202,213,213,226,226,233,233,242,242,252,252,259,259,259,259,253,253,250,250,248,248,244,244,241,241,236,236,232,232,234,234,239,239,243,243,250,250,260,260,272,272,285,285,295,295,305,305,314,314,325,325,334,334,336,336,335,335,333,333,334,334,341,341,350,350,355,355,357,357,350,349,336,336,327,328,318,319,316,316,322,322,324,325,331,331,349,349,366,366,380,380,391,391,394,395,395,396,397,396,401,401,409,408,417,417,431,431,437,437,417,416,383,384,354,353,327,327,312,312,304,303,293,292,283,283,277,277,273,274,270,271,269,268,278,278,297,296,314,314,330,330,350,350,370,370,382,382,399,400,432,432,463,463,495,494,527,528,534,534,530,529,540,541,533,533,497,498,457,456,410,410,378,378,382,383,401,400,419,419,424,424,404,404,374,374,340,340,315,315,327,328,356,356,373,373,390,390,394,394,384,385,385,386,392,392,402,402,420,420,438,439,453,452,453,454,445,446,445,445,442,442,434,434,435,435,431,431,420,419,417,418,414,414,407,407,407,406,404,403,397,397,391,391,387,387,390,390,393,393,393,392,398,397,408,408,419,418,431,431,438,438,431,431,424,423,419,419,410,411,395,395,382,382,370,370,360,361,364,364,378,378,387,387,397,396,411,411,417,416,421,421,429,430,431,432,433,433,439,440,442,441,439,440,434,433,423,422,415,416,411,411,409,408,413,413,407,407,378,379,342,342,303,303,269,269,255,256,250,249,240,240,235,234,238,237,246,246,253,253,264,263,290,291,323,323,352,353,379,379,377,377,354,354,349,349,334,334,291,291,249,249,203,202,159,159,155,154,163,163,161,162,171,171,184,184,192,193,206,207,215,215,218,218,224,223,229,229,234,234,239,239,240,240,241,242,248,249,261,262,280,280,299,299,309,309,292,292,263,263,243,242,216,217,184,184,156,156,120,120,95,95,108,108,132,131,147,147,164,164,173,174,180,180,193,193,203,203,214,213,225,224,231,230,243,243,256,256,267,267,288,288,294,295,264,264,221,222,178,177,140,140,126,126,123,122,115,115,112,113,117,117,124,124,129,129,138,138,159,159,187,188,216,216,237,236,234,233,218,219,208,208,206,206,223,223,253,252,281,281,303,303,309,310,303,303,298,298,290,290,285,285,287,286,277,278,281,281,316,316,358,357,401,400,431,432,412,412,375,375,351,351,316,316,284,285,265,265,232,233,218,217,233,233,245,245,263,264,277,277,255,255,230,230,210,210,189,189,204,203,236,235,253,254,284,284,327,327,368,367,416,416,450,451,458,459,457,456,450,450,447,447,444,443,431,431,429,429,421,421,381,381,334,334,286,285,244,244,250,250,282,282,302,302,315,315,313,314,297,297,287,287,278,278,272,271,269,269,261,261,259,259,265,265,268,268,275,275,278,279,272,272,267,267,266,265,263,264,266,266,271,271,279,279,284,285,278,278,265,266,251,251,242,243,250,250,259,259,264,264,268,269,266,266,266,265,267,268,263,263,268,267,277,276,280,281,288,288,280,281,263,264,261,260,248,248,221,221,197,197,164,164,141,141,152,152,169,168,183,183,205,204,223,223,240,239,256,255,267,267,280,279,289,290,299,298,305,306,298,297,287,286,283,284,272,273,260,259,249,250,235,235,228,228,225,225,222,222,227,228,227,227,214,214,198,198,181,180,164,164,160,160,159,159,152,151,154,154,176,177,208,208,237,237,269,269,298,298,316,317,342,341,362,362,357,357,351,351,348,348,331,331,314,314,296,297,272,272,262,262,267,266,278,279,295,296,298,298,283,282,258,258,229,230,215,215,215,215,214,215,214,213,208,207,196,196,191,192,187,187,182,181,188,188,190,190,192,191,197,198,189,188,178,179,179,178,164,165,148,148,135,135,108,108,99,100,123,123,152,152,185,186,205,206,186,185,150,150,119,118,100,100,111,111,138,137,159,159,169,169,151,151,117,118,89,89,63,64,48,48,44,44,37,36,31,30,28,29,28,27,30,29,25,26,20,20,16,15,65534,65535,65532,65532,22,23,51,52,86,85,110,110,89,90,55,54,30,30,3,3,65529,65529,65530,65531,65519,65519,65521,65521,0,65535,11,12,33,33,49,48,45,45,45,46,47,47,38,37,21,21,1,1,65515,65515,65505,65505,65518,65518,9,9,25,25,42,42,65,64,73,72,82,82,94,94,80,80,66,66,64,64,42,43,16,16,65519,65518,65472,65471,65457,65457,65483,65483,65524,65524,42,41,62,61,23,23,65504,65503,65444,65445,65412,65412,65442,65442,65499,65500,14,15,48,49,35,35,65530,65530,65498,65498,65477,65478,65481,65481,65507,65507,65528,65527,3,4,0,65515,65515,65500,65500,65493,65492,65496,65496,65514,65513,65524,65525,65535,65535,21,21,35,34,51,52,71,71,71,70,71,70,80,80,80,80,85,85,94,94,89,89,94,94,116,116,135,135,158,158,172,172,154,155,127,128,107,106,87,87,75,76,74,74,69,68,61,61,66,67,75,75,77,78,85,84,95,95,98,99,109,109,116,115,105,105,95,95,85,85,69,69,62,62,52,52,38,39,38,38,42,43,54,53,75,75,79,79,62,62,40,40,10,9,65531,65531,12,12,35,35,60,60,78,77,72,73,62,62,51,52,45,44,61,61,85,85,102,102,113,114,96,97,63,63,44,45,23,23,65531,65532,65515,65515,65491,65491,65473,65472,65486,65486,65507,65507,65524,65524,9,9,19,19,21,21,28,28,32,32,23,23,9,9,65528,65528,65516,65516,65521,65520,1,2,15,16,18,18,10,9,65528,65528,65514,65513,65504,65504,65505,65504,65515,65514,65525,65525,65533,65533,6,6,6,6,8,8,13,13,8,7,65535,65535,65532,65531,65525,65526,65526,65526,65528,65528,65524,65524,65523,65524,65517,65517,65505,65504,65500,65499,65487,65488,65469,65469,65459,65459,65441,65441,65428,65427,65446,65447,65471,65470,65485,65485,65503,65504,65517,65517,65527,65528,7,7,15,15,4,4,65522,65522,65508,65508,65492,65493,65460,65459,65422,65422,65393,65393,65364,65364,65334,65335,65309,65309,65278,65278,65252,65251,65245,65245,65245,65245,65244,65243,65242,65243,65247,65247,65254,65254,65260,65260,65272,65271,65294,65294,65323,65323,65349,65349,65368,65369,65378,65378,65380,65380,65383,65384,65396,65396,65406,65405,65411,65411,65430,65430,65434,65434,65403,65403,65364,65364,65324,65324,65292,65292,65292,65292,65302,65303,65303,65302,65303,65302,65310,65310,65321,65321,65331,65330,65338,65339,65355,65356,65376,65375,65394,65393,65414,65415,65420,65420,65413,65413,65419,65418,65412,65413,65378,65378,65336,65335,65287,65287,65252,65253,65256,65256,65275,65274,65290,65290,65298,65299,65288,65287,65270,65271,65256,65257,65244,65244,65247,65247,65259,65259,65263,65264,65276,65275,65299,65298,65325,65325,65360,65360,65387,65387,65385,65385,65372,65373,65362,65361,65343,65343,65312,65312,65275,65275,65235,65235,65206,65205,65202,65201,65209,65209,65213,65213,65221,65220,65230,65231,65237,65238,65246,65247,65256,65255,65264,65265,65285,65285,65306,65306,65317,65317,65319,65319,65310,65310,65302,65302,65318,65318,65350,65350,65392,65393,65439,65439,65463,65464,65459,65460,65444,65445,65421,65421,65406,65406,65422,65422,65450,65450,65477,65477,65498,65499,65498,65498,65480,65480,65469,65469,65452,65453,65423,65423,65397,65397,65369,65369,65345,65346,65344,65344,65346,65345,65339,65339,65336,65336,65326,65326,65314,65313,65308,65308,65304,65304,65310,65310,65325,65325,65334,65334,65345,65344,65362,65361,65379,65378,65404,65403,65418,65418,65407,65407,65391,65391,65376,65375,65358,65358,65350,65350,65342,65342,65329,65328,65325,65325,65325,65324,65322,65322,65323,65323,65317,65318,65303,65304,65289,65289,65273,65273,65264,65264,65268,65267,65275,65274,65284,65284,65286,65286,65272,65272,65255,65256,65239,65239,65229,65230,65245,65245,65267,65267,65285,65285,65302,65303,65303,65302,65287,65288,65283,65283,65274,65274,65258,65258,65255,65254,65244,65244,65237,65237,65261,65262,65295,65294,65323,65323,65347,65347,65342,65341,65321,65320,65313,65312,65305,65305,65299,65299,65296,65296,65286,65287,65282,65281,65278,65279,65271,65270,65267,65268,65255,65256,65233,65234,65213,65214,65186,65186,65179,65179,65219,65219,65273,65273,65325,65325,65361,65361,65356,65357,65339,65339,65324,65324,65306,65305,65302,65301,65303,65303,65298,65298,65297,65297,65283,65284,65262,65262,65249,65249,65235,65234,65222,65221,65214,65215,65204,65204,65197,65197,65181,65182,65159,65160,65145,65146,65118,65117,65089,65088,65070,65070,65030,65029,65018,65018,65067,65067,65119,65120,65179,65180,65221,65221,65177,65176,65105,65104,65049,65050,64999,64999,65006,65006,65046,65047,65063,65062,65084,65084,65094,65094,65087,65087,65105,65105,65104,65104,65068,65068,65038,65038,64995,64995,64966,64966,64988,64988,65019,65019,65049,65049,65077,65078,65080,65080,65075,65074,65071,65071,65064,65064,65067,65068,65072,65071,65076,65076,65091,65091,65097,65097,65097,65097,65107,65106,65108,65109,65110,65110,65114,65114,65112,65112,65117,65116,65125,65125,65134,65135,65149,65150,65157,65156,65151,65152,65146,65146,65133,65134,65123,65122,65125,65125,65135,65135,65142,65142,65150,65150,65174,65175,65205,65205,65227,65226,65260,65261,65298,65298,65331,65331,65384,65384,65418,65418,65393,65394,65353,65352,65314,65314,65280,65281,65279,65278,65295,65295,65306,65306,65310,65310,65291,65291,65253,65253,65212,65212,65190,65190,65214,65213,65246,65246,65260,65260,65279,65278,65295,65294,65311,65311,65345,65345,65360,65360,65351,65352,65348,65349,65341,65341,65337,65338,65352,65352,65371,65371,65395,65395,65413,65412,65400,65399,65374,65374,65351,65352,65336,65335,65332,65333,65332,65333,65329,65329,65321,65322,65305,65305,65286,65285,65264,65264,65253,65252,65268,65267,65286,65286,65298,65298,65314,65314,65313,65313,65304,65305,65310,65310,65306,65306,65291,65291,65284,65284,65269,65268,65253,65253,65267,65267,65292,65291,65306,65306,65326,65326,65351,65351,65374,65373,65405,65405,65427,65427,65408,65408,65378,65378,65365,65365,65344,65344,65321,65320,65299,65300,65267,65267,65247,65247,65253,65254,65260,65260,65268,65268,65273,65273,65261,65262,65244,65244,65222,65222,65218,65219,65259,65259,65315,65314,65366,65367,65406,65406,65413,65413,65409,65409,65411,65411,65412,65411,65424,65423,65445,65445,65462,65462,65470,65470,65451,65452,65416,65416,65392,65392,65360,65361,65318,65317,65275,65275,65221,65222,65186,65186,65187,65187,65197,65197,65207,65206,65214,65215,65220,65219,65229,65229,65237,65237,65255,65255,65297,65297,65342,65343,65389,65390,65428,65428,65430,65430,65421,65420,65423,65422,65417,65417,65406,65406,65392,65393,65373,65373,65359,65360,65349,65349,65336,65335,65323,65323,65305,65305,65298,65299,65298,65298,65285,65285,65287,65286,65316,65315,65353,65353,65394,65394,65416,65416,65398,65398,65364,65365,65331,65331,65310,65311,65310,65309,65313,65312,65321,65322,65324,65324,65294,65295,65260,65259,65231,65231,65200,65199,65196,65196,65208,65208,65204,65204,65210,65210,65223,65223,65227,65227,65240,65240,65249,65250,65243,65244,65243,65244,65243,65244,65239,65239,65238,65238,65229,65229,65219,65219,65217,65216,65210,65209,65203,65203,65200,65201,65198,65197,65206,65207,65221,65222,65232,65233,65242,65242,65246,65246,65253,65253,65262,65261,65266,65265,65279,65278,65296,65295,65303,65303,65319,65319,65333,65332,65336,65337,65357,65357,65363,65362,65324,65323,65276,65275,65223,65222,65183,65182,65196,65196,65225,65225,65238,65239,65258,65257,65264,65264,65262,65262,65272,65272,65277,65278,65283,65283,65301,65302,65315,65315,65321,65321,65314,65314,65296,65295,65288,65288,65283,65283,65271,65271,65265,65265,65253,65253,65241,65240,65238,65239,65228,65228,65213,65214,65212,65213,65220,65221,65238,65239,65254,65253,65265,65265,65301,65301,65345,65345,65385,65385,65422,65423,65427,65428,65422,65422,65439,65439,65427,65427,65369,65369,65295,65295,65206,65206,65151,65151,65170,65171,65209,65209,65245,65245,65269,65269,65245,65244,65200,65200,65170,65170,65142,65141,65134,65135,65149,65149,65149,65148,65155,65156,65203,65202,65255,65254,65297,65297,65346,65345,65380,65381,65409,65409,65456,65456,65475,65475,65427,65427,65358,65358,65300,65300,65252,65252,65234,65234,65231,65231,65216,65215,65200,65200,65195,65195,65186,65186,65174,65175,65172,65172,65182,65183,65201,65201,65215,65215,65225,65225,65228,65227,65223,65223,65220,65219,65229,65229,65256,65255,65291,65292,65325,65325,65346,65347,65344,65344,65330,65330,65325,65325,65320,65320,65297,65297,65276,65276,65262,65262,65240,65240,65216,65216,65190,65190,65161,65161,65143,65143,65157,65157,65189,65189,65208,65208,65227,65227,65256,65256,65278,65278,65298,65298,65320,65320,65331,65331,65340,65340,65361,65361,65375,65375,65372,65372,65360,65360,65347,65347,65346,65346,65357,65357,65373,65373,65394,65394,65400,65400,65384,65384,65364,65364,65342,65342,65324,65324,65319,65319,65317,65317,65313,65313,65302,65302,65284,65284,65261,65261,65234,65234,65224,65224,65254,65254,65303,65303,65346,65346,65377,65377,65383,65383,65375,65376,65376,65376,65385,65385,65404,65404,65431,65431,65460,65460,65482,65482,65479,65479,65459,65459,65445,65445,65434,65433,65426,65426,65429,65429,65428,65428,65417,65417,65403,65403,65385,65385,65361,65361,65354,65354,65379,65379,65417,65417,65448,65448,65474,65474,65482,65481,65474,65474,65474,65474,65472,65472,65465,65465,65466,65466,65464,65463,65463,65463,65478,65478,65493,65493,65516,65516,65533,65533,65524,65523,65508,65508,65494,65494,65483,65483,65503,65503,65530,65531,10,10,39,39,60,60,76,76,115,115,114,115,56,56,65518,65518,65434,65434,65385,65385,65418,65418,65476,65477,65525,65525,30,30,33,33,16,16,3,3,65534,65534,27,27,79,79,121,121,159,159,179,179,182,182,201,201,206,206,174,174,145,145,118,118,86,86,70,70,54,54,32,32,21,21,10,10,65532,65532,65520,65520,65506,65506,65501,65501,65501,65501,65488,65488,65485,65485,65509,65509,2,2,30,30,63,63,85,85,102,102,136,136,151,151,127,127,92,92,67,67,44,44,41,41,45,45,36,36,36,36,57,57,82,82,111,111,131,131,132,132,133,133,129,129,122,122,131,131,138,138,140,140,154,154,159,159,157,157,167,167,164,164,152,152,146,146,129,129,119,119,126,126,127,127,136,136,140,140,105,105,58,58,17,17,65516,65516,65519,65519,9,9,22,22,32,32,41,41,40,40,46,46,46,46,35,35,26,26,10,10,4,4,18,18,33,33,52,52,74,74,76,76,76,76,90,90,91,91,85,85,80,80,67,67,61,61,69,70,81,81,86,86,97,97,112,112,126,126,140,140,156,156,165,165,173,173,179,179,179,179,182,182,188,188,192,192,201,201,210,210,215,215,229,229,231,231,211,211,192,192,170,170,158,158,190,190,235,235,270,270,304,304,316,315,316,316,327,327,330,330,328,328,323,323,307,307,310,310,334,334,362,362,405,405,415,415,359,359,286,286,210,210,158,158,180,180,234,234,275,275,306,306,304,304,277,277,261,261,251,251,259,259,284,284,299,299,318,318,342,342,355,355,375,375,388,388,382,382,378,378,375,375,367,367,358,358,343,343,334,334,317,317,274,274,230,230,181,181,139,139,147,147,170,170,176,176,200,200,229,229,250,250,291,291,310,310,279,279,231,231,184,184,148,148,146,146,157,157,165,165,179,179,198,198,220,220,246,246,259,259,249,249,237,237,225,225,212,212,211,211,215,214,213,213,219,219,227,227,232,232,245,245,247,247,232,232,211,211,183,183,172,172,207,207,255,255,300,300,338,338,345,345,341,341,350,350,345,345,331,331,314,314,292,292,281,281,278,278,272,272,267,267,263,263,264,265,277,277,281,281,283,283,288,288,286,286,292,292,291,291,273,273,255,255,231,231,213,213,244,244,289,289,329,329,367,367,361,361,325,325,311,311,291,291,254,254,226,226,194,194,172,172,192,192,227,227,251,251,277,277,296,296,314,314,338,338,359,359,374,374,390,390,404,404,415,415,414,414,400,400,393,393,392,392,395,395,406,406,408,408,404,404,417,417,432,432,440,440,461,462,489,489,524,524,570,570,584,584,548,548,487,486,428,428,396,396,396,396,416,416,439,439,435,435,396,396,333,333,260,260,231,231,281,281,366,366,448,448,498,498,488,488,447,447,411,411,397,397,437,437,513,513,585,585,624,624,592,592,515,515,451,451,406,406,389,389,400,400,402,402,397,397,394,394,372,372,352,352,351,351,372,372,423,423,473,473,495,495,493,493,462,462,429,429,424,424,438,438,468,468,505,505,520,520,523,523,517,517,506,506,509,509,512,512,511,511,514,514,506,506,493,493,490,490,481,481,477,477,493,493,506,506,517,517,526,526,510,510,484,484,468,468,449,449,436,436,435,435,425,425,412,412,409,409,406,406,401,401,405,405,411,411,415,415,425,425,431,431,423,423,413,413,404,404,395,395,394,394,395,395,398,398,401,401,394,394,382,382,365,365,357,357,369,369,391,391,411,411,425,425,431,431,435,435,442,442,441,441,440,440,441,441,442,442,444,444,436,436,418,418,405,405,397,397,397,397,399,399,396,396,393,393,382,382,362,362,351,351,344,344,346,346,366,366,372,372,377,377,400,400,418,418,441,441,466,466,462,462,455,455,456,456,435,435,407,407,369,369,319,319,301,301,310,310,331,331,361,361,362,362,339,339,312,312,272,272,260,260,297,297,347,347,408,408,447,447,418,418,363,363,309,309,274,274,292,292,335,335,372,372,395,395,374,374,324,324,287,287,258,258,253,253,272,272,279,278,275,276,276,276,267,267,254,254,258,258,286,286,330,330,372,372,399,399,391,391,362,362,340,340,322,322,294,294,271,271,254,254,234,234,216,216,199,199,179,179,174,174,195,195,231,231,261,261,275,275,271,271,259,259,252,252,247,247,246,246,244,244,237,237,246,246,279,279,309,309,340,340,362,362,346,346,321,321,307,307,289,289,288,288,303,303,309,309,310,310,305,305,291,291,285,285,281,281,276,276,277,277,273,273,268,268,267,267,259,259,247,247,237,237,230,230,228,228,223,223,231,231,257,257,288,288,326,326,346,346,319,319,277,277,243,243,209,209,196,196,191,191,177,177,174,174,183,183,197,197,216,216,231,231,247,247,264,264,275,275,296,296,325,325,351,351,382,382,398,398,389,389,374,374,357,357,341,341,329,329,308,309,287,287,269,269,255,255,249,249,241,241,238,238,249,249,261,261,277,277,284,283,261,261,233,233,209,209,191,191,206,206,234,234,256,256,283,283,301,301,309,309,328,328,338,338,331,331,322,322,304,304,288,288,281,281,270,270,259,259,249,249,245,245,251,251,250,250,254,254,274,274,294,294,325,325,335,335,284,284,211,211,142,142,93,93,106,106,150,150,184,184,209,209,202,202,168,168,144,144,132,132,144,144,177,177,201,201,217,217,226,226,224,224,236,236,243,243,232,232,220,220,202,202,189,188,204,204,227,227,246,246,262,262,260,260,255,255,258,258,250,250,236,236,215,215,189,189,176,176,166,166,154,154,150,151,138,138,115,115,92,92,61,61,44,44,60,60,89,89,118,118,142,142,155,155,165,165,178,178,193,193,204,204,212,212,223,223,229,229,224,224,213,213,199,199,186,186,184,184,185,185,189,189,187,187,160,160,119,119,83,83,52,52,40,40,45,45,40,40,39,39,65,65,94,94,119,119,145,145,156,156,159,159,174,174,185,185,178,178,161,161,144,144,118,118,86,86,55,55,26,26,65533,65533,65509,65509,65494,65494,65480,65480,65468,65468,65474,65474,65487,65487,65491,65491,65502,65502,65521,65521,65533,65533,11,11,22,22,16,16,10,10,5,5,65534,65534,65530,65530,65525,65525,65519,65519,65520,65520,65518,65518,65509,65509,65510,65510,65504,65504,65493,65493,65484,65484,65472,65472,65471,65471,65503,65503,18,18,65,65,92,92,81,81,48,48,18,18,65535,65535,65531,65531,65529,65529,65519,65519,65516,65516,65519,65519,65518,65518,65523,65523,65526,65526,65516,65516,65513,65513,65513,65513,65510,65510,65527,65527,13,13,20,20,44,44,74,74,102,102,146,147,151,150,83,83,65535,65535,65447,65447,65378,65378,65372,65372,65389,65389,65397,65397,65403,65403,65390,65390,65354,65354,65327,65327,65312,65312,65320,65320,65346,65346,65365,65365,65390,65390,65422,65422,65447,65447,65482,65482,65508,65508,65505,65505,65506,65506,65510,65510,65495,65495,65473,65473,65445,65445,65414,65414,65404,65404,65412,65412,65431,65431,65451,65451,65456,65456,65449,65449,65429,65429,65400,65400,65395,65395,65425,65425,65467,65467,65512,65512,9,9,10,10,2,2,65534,65534,65521,65521,65500,65500,65480,65480,65455,65455,65438,65438,65442,65442,65456,65456,65474,65474,65485,65485,65478,65478,65458,65458,65437,65437,65418,65418,65414,65414,65419,65419,65421,65421,65424,65424,65434,65434,65440,65440,65448,65448,65462,65462,65460,65460,65452,65452,65452,65452,65437,65437,65395,65395,65351,65351,65304,65304,65274,65274,65299,65299,65344,65344,65376,65376,65406,65406,65419,65419,65410,65410,65413,65413,65424,65424,65432,65432,65458,65458,65489,65489,65499,65499,65486,65486,65461,65461,65436,65436,65419,65419,65411,65411,65407,65407,65397,65397,65392,65392,65406,65406,65422,65422,65439,65439,65462,65462,65472,65472,65475,65475,65483,65483,65481,65481,65479,65479,65481,65481,65473,65473,65472,65472,65490,65490,65510,65510,65532,65532,13,13,9,9,65532,65532,65528,65528,65515,65515,65494,65494,65477,65477,65454,65454,65439,65439,65454,65454,65480,65480,65497,65497,65516,65516,65518,65518,65504,65504,65506,65506,65495,65495,65458,65458,65428,65428,65388,65388,65361,65361,65382,65382,65411,65411,65434,65434,65468,65468,65483,65483,65493,65493,65514,65514,65519,65519,65525,65525,65530,65530,65520,65520,65531,65531,30,30,74,74,131,131,146,146,90,90,8,8,65458,65458,65397,65397,65379,65379,65374,65374,65369,65369,65345,65345,65287,65287,65222,65222,65148,65148,65098,65098,65132,65132,65199,65199,65253,65253,65308,65308,65315,65315,65288,65288,65293,65293,65289,65289,65272,65272,65272,65272,65263,65263,65247,65247,65232,65232,65199,65199,65171,65171,65155,65155,65147,65147,65158,65158,65165,65165,65161,65161,65167,65167,65174,65174,65180,65180,65190,65190,65188,65188,65180,65180,65173,65173,65161,65161,65165,65165,65172,65172,65165,65165,65177,65177,65191,65191,65196,65196,65220,65220,65234,65234,65214,65214,65198,65198,65181,65181,65163,65163,65176,65176,65199,65199,65212,65212,65231,65231,65250,65250,65265,65265,65288,65288,65299,65299,65289,65289,65273,65273,65255,65255,65245,65245,65261,65261,65284,65284,65301,65301,65319,65319,65325,65325,65325,65325,65335,65335,65330,65330,65306,65306,65280,65280,65247,65247,65232,65232,65265,65265,65310,65310,65350,65350,65386,65386,65393,65393,65388,65388,65393,65393,65384,65384,65358,65358,65332,65332,65300,65300,65283,65283,65295,65295,65318,65318,65343,65343,65360,65360,65356,65356,65348,65348,65339,65339,65329,65329,65331,65331,65328,65328,65323,65323,65332,65332,65345,65345,65358,65358,65373,65373,65377,65377,65376,65376,65387,65387,65396,65396,65399,65399,65399,65399,65385,65385,65368,65368,65361,65361,65353,65353,65347,65347,65347,65347,65334,65334,65308,65308,65282,65282,65256,65256,65242,65242,65257,65257,65279,65279,65292,65292,65310,65310,65325,65325,65337,65337,65356,65357,65362,65362,65342,65342,65322,65322,65300,65300,65280,65280,65283,65283,65294,65294,65302,65302,65317,65317,65325,65325,65326,65326,65330,65330,65333,65333,65345,65345,65366,65366,65378,65377,65387,65387,65386,65386,65369,65369,65360,65360,65355,65355,65336,65336,65316,65316,65298,65298,65275,65275,65260,65260,65246,65246,65223,65223,65213,65213,65231,65231,65270,65270,65307,65307,65334,65334,65348,65348,65347,65347,65347,65347,65356,65356,65352,65352,65350,65350,65362,65362,65352,65352,65321,65321,65282,65282,65227,65227,65205,65205,65243,65243,65303,65303,65369,65369,65404,65404,65360,65360,65281,65281,65210,65210,65157,65157,65161,65161,65198,65198,65216,65216,65237,65237,65270,65270,65290,65290,65320,65320,65343,65343,65332,65332,65313,65313,65299,65299,65284,65284,65289,65289,65308,65308,65319,65319,65334,65334,65348,65348,65356,65356,65373,65373,65377,65377,65350,65350,65312,65312,65277,65277,65250,65250,65248,65248,65254,65254,65250,65250,65256,65256,65268,65268,65286,65286,65310,65310,65318,65318,65308,65308,65291,65291,65266,65267,65261,65261,65287,65287,65321,65321,65359,65359,65393,65393,65408,65408,65414,65414,65423,65423,65427,65427,65434,65434,65444,65444,65455,65455,65455,65455,65425,65425,65386,65386,65355,65355,65327,65326,65313,65313,65311,65311,65300,65300,65288,65288,65283,65283,65270,65270,65254,65254,65257,65257,65282,65282,65315,65314,65344,65344,65372,65372,65388,65388,65397,65397,65417,65417,65423,65423,65396,65396,65360,65360,65321,65320,65285,65285,65275,65275,65271,65271,65263,65263,65261,65261,65255,65255,65249,65249,65255,65256,65255,65255,65243,65243,65240,65240,65240,65240,65236,65236,65246,65246,65253,65253,65249,65249,65256,65257,65278,65278,65297,65297,65320,65320,65335,65335,65318,65318,65283,65283,65256,65256,65236,65236,65237,65237,65252,65252,65260,65260,65260,65260,65250,65250,65236,65237,65223,65223,65211,65211,65223,65223,65253,65253,65273,65273,65299,65299,65319,65319,65325,65325,65352,65352,65358,65358,65298,65297,65222,65222,65140,65140,65077,65077,65097,65097,65149,65149,65185,65185,65228,65228,65234,65234,65212,65212,65210,65210,65193,65193,65169,65169,65167,65167,65147,65147,65137,65137,65174,65174,65210,65210,65250,65250,65291,65291,65299,65299,65300,65300,65312,65312,65305,65305,65280,65280,65244,65244,65208,65208,65180,65180,65149,65149,65117,65117,65085,65085,65058,65058,65063,65063,65083,65083,65097,65097,65112,65112,65121,65121,65127,65127,65137,65137,65140,65140,65138,65138,65131,65131,65119,65119,65117,65117,65127,65127,65139,65140,65162,65162,65175,65175,65162,65162,65148,65147,65133,65133,65116,65117,65102,65102,65079,65079,65055,65055,65045,65045,65053,65053,65075,65075,65093,65093,65108,65108,65141,65141,65176,65176,65211,65211,65243,65243,65246,65246,65238,65238,65247,65246,65238,65239,65208,65208,65174,65174,65129,65129,65105,65105,65137,65136,65186,65186,65230,65230,65264,65264,65262,65262,65243,65242,65229,65229,65213,65213,65197,65197,65189,65189,65174,65174,65167,65167,65183,65183,65199,65199,65215,65215,65232,65232,65233,65233,65227,65227,65231,65231,65227,65227,65209,65209,65191,65191,65171,65171,65147,65147,65132,65132,65120,65120,65100,65100,65097,65097,65130,65130,65179,65179,65226,65226,65262,65263,65266,65266,65247,65247,65242,65242,65235,65235,65209,65209,65188,65188,65167,65167,65145,65145,65154,65154,65171,65171,65170,65170,65189,65189,65236,65236,65291,65291,65354,65354,65396,65396,65387,65388,65358,65357,65332,65332,65314,65315,65319,65319,65342,65341,65360,65360,65366,65366,65347,65347,65306,65306,65275,65275,65248,65248,65220,65220,65205,65205,65184,65184,65160,65160,65175,65175,65197,65197,65198,65198,65229,65229,65284,65284,65341,65341,65419,65419,65459,65459,65417,65417,65349,65349,65285,65285,65242,65242,65262,65262,65318,65318,65361,65361,65389,65389,65386,65386,65355,65355,65328,65328,65315,65315,65314,65314,65329,65329,65344,65344,65340,65340,65304,65304,65251,65251,65201,65201,65170,65170,65195,65195,65253,65253,65293,65293,65335,65335,65372,65372,65390,65390,65423,65423,65446,65446,65422,65422,65392,65392,65362,65361,65333,65333,65336,65336,65343,65343,65343,65343,65344,65344,65325,65325,65305,65305,65293,65293,65276,65276,65282,65282,65297,65297,65292,65292,65304,65304,65334,65334,65364,65364,65411,65411,65432,65432,65402,65402,65357,65357,65308,65308,65282,65282,65301,65301,65335,65335,65370,65371,65393,65393,65373,65373,65339,65339,65313,65313,65289,65289,65291,65291,65307,65307,65312,65312,65318,65318,65327,65327,65334,65334,65343,65343,65349,65349,65355,65355,65358,65358,65356,65356,65365,65365,65383,65383,65403,65403,65427,65427,65432,65432,65409,65409,65379,65379,65348,65348,65331,65331,65330,65330,65335,65335,65350,65350,65352,65352,65314,65314,65258,65258,65204,65204,65164,65164,65174,65174,65211,65211,65231,65231,65252,65252,65277,65277,65293,65292,65315,65315,65335,65335,65331,65331,65329,65329,65331,65331,65326,65326,65324,65324,65316,65316,65302,65301,65306,65306,65328,65328,65356,65356,65390,65390,65405,65405,65382,65382,65348,65348,65312,65313,65291,65291,65313,65313,65360,65360,65398,65398,65430,65430,65448,65448,65447,65447,65455,65455,65467,65468,65465,65465,65466,65466,65475,65475,65470,65470,65448,65448,65415,65415,65374,65374,65349,65350,65368,65368,65414,65414,65452,65452,65478,65478,65483,65483,65465,65465,65449,65449,65447,65447,65464,65464,65497,65497,65527,65527,13,13,37,37,52,52,71,71,92,92,79,79,56,56,50,50,20,20,65512,65512,65472,65472,65418,65417,65396,65396,65442,65442,65510,65510,40,40,77,77,49,49,65522,65522,65469,65468,65437,65437,65451,65452,65491,65491,65523,65523,13,13,24,24,20,20,16,16,17,17,32,32,62,62,86,86,106,106,122,122,129,129,146,146,156,156,138,138,114,114,97,97,71,71,40,40,12,11,65516,65517,65492,65492,65478,65478,65466,65466,65450,65450,65438,65438,65445,65445,65456,65455,65454,65454,65468,65468,65509,65508,18,18,68,68,111,112,118,118,113,113,123,123,118,118,93,93,74,74,51,51,36,36,49,49,65,65,73,73,80,80,70,70,52,52,42,41,25,25,17,18,20,20,7,7,7,8,36,36,64,64,98,98,125,125,108,108,77,77,54,54,34,34,23,23,18,18,12,12,2,2,65520,65520,65505,65505,65486,65486,65476,65476,65506,65506,15,16,49,49,88,88,112,111,120,120,147,147,157,157,135,135,116,116,88,88,77,77,123,123,180,180,233,233,280,280,276,276,250,250,242,242,217,217,188,188,165,165,124,124,97,97,102,102,105,105,109,110,116,116,104,104,93,93,90,90,84,85,90,90,99,99,101,101,115,115,150,150,194,194,240,239,270,270,261,261,234,234,214,214,195,194,183,183,184,184,180,180,178,178,175,175,165,165,160,160,154,153,142,142,141,141,131,131,120,120,134,134,144,145,149,149,176,177,190,190,193,193,214,214,211,212,186,185,166,166,135,135,125,125,167,168,231,231,301,300,342,342,321,321,274,274,225,224,192,192,209,208,242,242,269,269,296,296,296,296,276,277,267,267,257,257,256,256,274,274,285,285,293,293,304,305,309,309,315,315,321,320,310,310,295,295,283,283,268,268,248,248,221,221,191,191,170,170,173,173,193,193,210,210,218,218,225,225,223,224,220,220,228,228,233,233,239,238,257,257,264,264,252,252,237,237,219,219,208,207,213,213,221,221,225,225,224,224,218,218,211,211,205,205,201,201,198,199,200,200,201,201,202,202,204,204,199,199,190,190,186,186,189,189,197,197,209,209,223,223,238,238,249,248,260,260,265,265,255,255,244,244,238,238,226,226,212,212,202,203,186,186,177,177,190,190,207,207,224,224,238,238,239,239,235,235,237,237,239,239,251,251,266,266,279,279,299,299,313,313,319,319,337,337,344,344,329,329,309,309,285,285,267,267,280,280,307,307,330,330,348,348,350,350,341,341,332,332,323,323,325,325,333,333,335,335,341,341,354,354,361,361,371,371,373,373,356,356,335,335,321,321,302,302,281,281,260,260,240,240,224,224,207,208,190,191,179,179,168,168,164,163,164,163,152,152,151,151,179,179,211,211,241,241,272,272,280,280,278,278,285,285,282,282,279,279,285,285,281,281,279,279,279,279,277,277,286,286,277,277,232,232,184,184,137,137,101,101,99,99,102,102,95,95,105,105,124,124,140,141,164,164,184,184,202,201,219,219,234,234,260,260,300,300,347,347,406,406,447,447,449,449,443,443,431,431,423,423,446,446,485,485,518,518,544,544,552,552,545,545,542,542,539,539,533,533,530,530,522,522,508,508,497,497,475,475,447,446,440,440,462,462,491,491,524,525,549,548,546,546,539,539,535,536,520,520,507,507,502,502,497,497,496,496,497,497,492,492,488,488,480,480,468,468,458,458,442,442,429,429,426,426,424,424,423,423,421,421,403,403,377,377,348,348,331,331,342,342,364,364,384,384,397,397,392,392,381,381,376,376,371,371,371,371,380,380,385,385,383,383,368,368,345,345,327,327,312,312,301,301,294,294,280,280,273,273,274,274,273,273,277,277,278,278,271,271,266,266,253,253,246,246,279,279,323,323,362,362,392,391,374,374,334,334,313,313,286,286,252,252,231,231,200,200,178,178,183,183,190,190,197,197,201,201,189,189,176,177,164,164,152,152,156,156,156,156,146,146,151,151,169,169,193,193,227,227,246,246,242,242,224,224,207,207,196,196,185,185,183,183,193,193,186,185,166,166,152,151,125,125,114,115,151,151,194,194,229,229,260,260,256,256,233,233,223,222,211,212,203,203,202,203,190,190,186,186,207,207,228,228,252,252,271,271,254,254,228,228,216,216,194,194,183,184,192,191,185,185,183,183,204,203,220,220,235,235,247,247,227,227,188,188,154,154,137,138,152,152,186,186,214,214,234,234,245,245,248,248,257,256,262,262,263,263,267,267,271,271,272,272,267,268,259,259,255,255,253,254,251,251,253,252,250,250,248,248,253,253,258,258,258,258,264,263,275,275,290,290,308,308,323,323,331,331,332,332,334,334,339,339,351,352,377,377,407,407,425,425,422,422,397,396,372,372,366,366,376,376,402,402,428,428,434,434,431,431,421,422,402,402,395,395,402,402,414,414,429,429,431,431,408,408,375,375,340,340,319,319,316,316,324,324,339,339,344,344,330,330,307,307,278,278,262,262,276,276,299,299,322,322,341,341,332,332,311,311,297,297,278,278,271,271,276,276,271,271,269,269,273,273,273,273,283,283,281,281,253,253,216,216,177,177,156,156,169,169,194,194,219,219,236,236,234,234,226,227,215,215,215,215,245,245,284,284,325,325,353,353,331,331,291,291,269,269,234,234,208,208,195,195,162,162,147,147,171,171,190,190,214,214,238,238,232,231,223,223,220,220,212,212,225,225,245,245,254,254,269,269,282,282,292,292,315,315,330,330,315,315,289,289,266,266,241,241,224,224,217,218,205,205,190,190,188,188,185,185,176,176,180,180,184,184,185,185,189,189,191,191,194,193,203,203,207,207,214,214,237,237,262,262,290,290,311,311,299,299,276,276,265,265,236,236,191,191,140,140,79,79,37,37,35,35,42,42,43,43,48,48,46,46,44,44,52,52,54,54,58,58,72,72,76,76,91,91,125,125,151,151,182,182,209,209,197,197,183,183,180,180,159,159,140,140,124,124,95,95,77,77,66,66,47,47,37,37,28,28,20,20,22,22,12,12,14,14,54,54,101,101,150,149,185,185,169,169,133,133,107,107,87,87,98,98,132,132,153,152,166,166,162,162,138,138,124,124,104,104,72,72,47,47,19,20,65532,65532,65535,65535,6,6,8,8,18,18,21,21,18,18,15,16,11,11,13,13,17,17,23,23,29,29,25,24,21,21,28,28,21,21,65534,65534,65507,65507,65470,65470,65453,65452,65475,65475,65511,65511,8,8,32,31,32,32,21,22,21,21,23,23,23,23,25,25,23,23,17,17,4,5,65521,65521,65508,65508,65500,65500,65500,65500,65509,65509,65513,65514,65518,65518,65535,65535,18,18,35,35,52,52,46,47,27,26,14,14,5,5,14,14,46,46,69,69,79,79,86,86,79,79,79,79,90,90,81,81,72,72,69,69,50,50,29,29,4,4,65501,65501,65487,65488,65519,65519,31,30,82,82,115,115,103,103,70,70,45,45,28,27,26,26,33,33,37,38,41,41,41,42,39,39,36,35,33,33,39,39,54,54,67,68,76,76,76,76,65,66,56,56,50,50,42,41,37,37,39,39,41,40,44,44,49,49,46,47,51,51,67,67,82,81,98,98,103,102,79,79,44,45,13,13,65522,65522,65526,65525,10,10,19,19,39,39,71,71,104,104,148,148,169,169,130,129,68,68,8,7,65493,65493,65486,65486,65501,65501,65506,65506,65518,65519,1,0,13,14,37,37,48,48,30,31,2,2,65504,65504,65482,65483,65499,65499,65532,65531,26,26,47,47,42,43,26,26,15,15,11,11,20,20,42,42,64,64,75,75,65,66,42,42,18,18,0,1,65534,65534,65534,65533,65527,65527,65527,65527,65523,65523,65518,65518,65521,65521,65520,65520,65521,65522,65534,65533,65533,65533,65533,65534,17,17,38,38,63,62,82,83,72,71,50,50,37,36,21,22,7,7,65528,65527,65512,65512,65500,65500,65482,65483,65462,65463,65441,65441,65424,65425,65437,65438,65469,65468,65489,65489,65510,65511,65530,65530,4,4,22,23,33,33,26,25,19,19,13,12,12,12,23,24,36,36,51,51,61,61,46,46,23,22,1,0,65518,65519,65522,65522,65533,65532,4,3,12,12,14,13,16,15,19,20,19,18,31,31,48,49,55,54,68,68,83,84,90,90,109,109,107,108,60,60,0,65474,65475,65426,65427,65426,65426,65446,65446,65458,65457,65469,65469,65474,65474,65472,65472,65479,65478,65480,65480,65472,65471,65460,65460,65447,65446,65437,65438,65432,65431,65426,65425,65423,65424,65416,65416,65398,65397,65374,65375,65351,65352,65332,65332,65325,65325,65323,65322,65315,65315,65311,65311,65332,65332,65366,65366,65397,65398,65422,65423,65428,65428,65420,65420,65419,65420,65415,65415,65394,65394,65371,65370,65346,65347,65325,65325,65315,65315,65303,65303,65291,65291,65277,65276,65246,65246,65213,65213,65187,65186,65159,65158,65148,65149,65149,65148,65133,65133,65135,65136,65177,65177,65227,65227,65277,65276,65314,65315,65317,65317,65306,65306,65305,65306,65304,65304,65295,65294,65288,65288,65284,65285,65273,65274,65245,65245,65204,65204,65163,65162,65130,65129,65118,65119,65122,65123,65123,65123,65121,65121,65128,65127,65135,65135,65138,65139,65148,65148,65166,65166,65186,65186,65208,65207,65231,65230,65254,65255,65274,65274,65292,65292,65305,65304,65295,65295,65270,65270,65259,65258,65240,65241,65202,65203,65169,65170,65137,65137,65103,65102,65095,65095,65101,65101,65092,65092,65097,65098,65129,65129,65161,65160,65195,65195,65225,65225,65235,65235,65238,65237,65244,65243,65250,65251,65255,65256,65265,65264,65278,65278,65281,65282,65265,65265,65237,65237,65206,65206,65188,65187,65193,65193,65207,65208,65222,65222,65227,65227,65211,65210,65186,65185,65164,65164,65149,65149,65165,65165,65201,65200,65230,65229,65254,65255,65271,65271,65276,65275,65284,65285,65296,65296,65307,65308,65323,65323,65339,65339,65352,65352,65351,65352,65335,65335,65325,65326,65308,65308,65271,65270,65236,65236,65197,65196,65169,65169,65190,65190,65225,65224,65250,65250,65278,65278,65288,65288,65292,65292,65309,65309,65316,65317,65321,65321,65328,65329,65326,65326,65329,65329,65332,65332,65325,65326,65326,65326,65320,65321,65299,65299,65280,65279,65256,65256,65235,65234,65232,65232,65237,65238,65239,65239,65238,65238,65227,65228,65210,65210,65192,65193,65189,65188,65204,65204,65225,65224,65244,65244,65257,65257,65250,65249,65238,65239,65239,65239,65230,65231,65210,65210,65187,65187,65161,65160,65144,65144,65147,65147,65158,65157,65159,65158,65155,65156,65164,65164,65173,65173,65177,65178,65190,65190,65199,65199,65208,65209,65233,65233,65239,65239,65213,65214,65177,65178,65139,65139,65116,65116,65119,65119,65130,65130,65143,65143,65147,65147,65131,65131,65111,65111,65089,65089,65078,65078,65098,65097,65127,65126,65150,65150,65177,65177,65201,65200,65225,65225,65257,65257,65281,65280,65293,65293,65303,65303,65313,65312,65321,65322,65320,65320,65313,65314,65314,65314,65310,65310,65299,65299,65284,65285,65259,65260,65248,65248,65272,65272,65312,65312,65347,65347,65372,65371,65378,65377,65369,65369,65363,65362,65363,65363,65365,65366,65372,65373,65385,65385,65385,65385,65371,65371,65356,65356,65339,65339,65330,65329,65330,65329,65326,65326,65322,65322,65310,65310,65289,65288,65271,65271,65248,65248,65228,65229,65237,65237,65249,65249,65256,65256,65270,65269,65265,65266,65255,65256,65258,65258,65253,65252,65244,65244,65242,65243,65236,65237,65233,65234,65230,65230,65218,65219,65215,65215,65206,65206,65178,65177,65146,65146,65109,65108,65084,65083,65094,65093,65118,65119,65140,65140,65156,65156,65167,65166,65175,65175,65182,65182,65201,65201,65247,65247,65299,65299,65351,65351,65388,65388,65376,65375,65340,65341,65317,65317,65293,65293,65270,65271,65258,65259,65242,65242,65220,65221,65192,65192,65157,65157,65119,65119,65089,65088,65092,65093,65115,65114,65124,65124,65148,65149,65191,65191,65229,65229,65276,65276,65311,65311,65305,65305,65287,65287,65275,65274,65263,65263,65268,65267,65283,65282,65297,65297,65301,65301,65278,65278,65240,65240,65204,65204,65176,65175,65177,65177,65196,65197,65209,65210,65220,65221,65229,65229,65229,65229,65232,65232,65237,65238,65245,65245,65256,65256,65263,65264,65267,65267,65263,65262,65247,65246,65234,65233,65226,65227,65218,65219,65221,65221,65225,65225,65222,65221,65213,65213,65199,65199,65184,65183,65179,65179,65196,65196,65228,65228,65259,65258,65273,65272,65262,65262,65232,65232,65203,65203,65188,65189,65190,65191,65204,65204,65216,65215,65224,65224,65235,65235,65240,65240,65247,65247,65258,65258,65256,65256,65251,65252,65254,65254,65242,65243,65228,65227,65216,65216,65197,65196,65190,65190,65211,65212,65236,65236,65260,65259,65279,65279,65283,65282,65278,65279,65280,65279,65277,65277,65268,65268,65259,65260,65253,65253,65242,65242,65224,65224,65199,65198,65170,65170,65151,65151,65152,65153,65168,65169,65183,65184,65190,65190,65192,65193,65193,65194,65189,65190,65191,65191,65199,65200,65203,65203,65213,65212,65224,65225,65212,65212,65192,65191,65182,65182,65165,65165,65152,65152,65149,65149,65130,65130,65118,65119,65140,65139,65172,65171,65206,65206,65235,65234,65230,65229,65209,65208,65193,65193,65185,65184,65196,65195,65214,65214,65222,65223,65234,65234,65240,65240,65238,65238,65246,65246,65245,65245,65230,65230,65227,65227,65222,65222,65213,65213,65220,65220,65220,65220,65213,65214,65220,65220,65220,65220,65215,65215,65221,65221,65216,65215,65207,65207,65206,65206,65194,65194,65192,65191,65216,65216,65245,65246,65280,65279,65302,65302,65284,65285,65252,65251,65225,65225,65210,65211,65230,65229,65269,65269,65303,65303,65331,65331,65345,65344,65340,65341,65338,65338,65339,65339,65345,65345,65360,65359,65374,65374,65376,65376,65365,65365,65346,65346,65326,65327,65320,65320,65337,65337,65362,65361,65383,65383,65402,65403,65405,65405,65398,65398,65397,65397,65388,65388,65378,65377,65375,65375,65365,65365,65359,65360,65374,65374,65386,65386,65399,65399,65414,65414,65408,65408,65402,65403,65405,65404,65396,65397,65391,65391,65385,65384,65368,65368,65366,65366,65374,65374,65384,65384,65405,65405,65412,65413,65398,65398,65381,65380,65360,65360,65348,65348,65360,65361,65379,65379,65393,65394,65404,65403,65400,65400,65390,65389,65380,65380,65370,65371,65369,65369,65368,65368,65363,65362,65362,65362,65367,65367,65374,65374,65385,65385,65386,65387,65372,65372,65353,65353,65343,65342,65329,65329,65308,65308,65287,65287,65263,65262,65240,65240,65233,65234,65227,65226,65212,65211,65217,65218,65247,65247,65285,65285,65331,65332,65359,65359,65348,65347,65324,65323,65299,65300,65284,65284,65302,65303,65340,65340,65373,65373,65401,65401,65406,65406,65396,65395,65395,65395,65383,65384,65351,65351,65319,65318,65279,65280,65256,65256,65274,65274,65298,65299,65317,65317,65341,65341,65349,65349,65355,65356,65372,65372,65371,65371,65359,65359,65345,65345,65318,65318,65307,65306,65319,65319,65338,65338,65367,65366,65371,65372,65332,65332,65275,65274,65215,65215,65181,65182,65207,65207,65258,65258,65307,65307,65343,65343,65336,65336,65303,65304,65280,65280,65258,65258,65245,65245,65249,65249,65247,65248,65242,65241,65241,65240,65234,65234,65224,65224,65230,65229,65256,65257,65291,65292,65326,65327,65344,65345,65319,65320,65274,65274,65235,65235,65210,65210,65221,65221,65258,65258,65287,65287,65310,65309,65319,65318,65309,65309,65311,65311,65312,65313,65302,65302,65303,65304,65300,65301,65302,65301,65336,65336,65375,65375,65408,65408,65442,65442,65452,65452,65452,65451,65459,65458,65460,65459,65467,65466,65472,65472,65469,65469,65478,65478,65490,65490,65508,65507,1,0,14,14,14,14,13,13,0,65535,65525,65526,65527,65528,65530,65530,1,0,5,5,11,11,19,18,19,19,29,30,40,40,38,38,47,48,49,49,28,28,19,18,4,4,65530,65530,29,29,70,70,106,107,137,138,107,107,54,54,17,16,65512,65513,65515,65515,10,9,10,10,31,30,75,75,112,111,171,172,206,206,180,180,143,142,98,98,64,64,72,72,91,91,113,113,129,129,103,103,63,63,27,27,3,4,33,33,87,87,123,123,160,160,181,181,183,184,198,198,203,204,190,190,178,178,168,167,153,154,141,141,130,131,118,118,105,105,101,102,100,100,92,93,95,95,101,101,104,104,111,111,113,114,117,117,125,125,130,130,136,136,127,127,105,105,92,91,73,73,56,56,54,54,38,38,33,32,67,67,102,101,142,142,173,173,149,148,116,116,95,94,66,67,68,68,78,78,66,66,72,72,80,79,78,77,92,92,90,90,63,63,39,38,8,8,65533,65532,17,17,46,46,80,80,96,96,82,82,61,62,31,32,17,17,46,46,85,85,125,125,152,153,136,137,109,110,95,94,81,81,82,82,85,85,82,82,82,82,69,69,49,48,32,31,17,17,27,27,47,46,52,52,71,71,95,95,118,118,156,157,174,174,163,162,156,156,141,141,127,127,135,136,142,142,152,152,166,165,156,156,138,138,127,127,116,117,110,111,103,102,89,90,88,89,104,104,129,129,147,147,157,157,175,176,198,198,221,221,241,241,232,232,208,208,197,196,179,178,162,163,162,161,152,152,150,150,167,166,177,177,184,184,191,191,186,187,180,180,176,176,175,176,182,182,186,186,188,189,186,186,169,170,156,155,146,146,133,133,135,135,145,144,146,146,157,157,175,175,185,186,198,198,206,205,198,198,191,191,188,189,184,184,180,179,175,175,172,171,171,171,166,167,160,159,154,154,152,153,158,158,171,170,178,179,188,188,206,207,223,223,239,239,255,255,261,260,263,264,274,274,277,277,274,273,271,271,263,262,260,261,277,277,300,300,320,321,328,329,306,307,269,270,242,242,226,226,228,229,246,247,261,261,271,271,284,283,291,291,292,293,305,304,327,328,356,356,389,389,407,407,391,390,356,355,327,327,311,311,316,315,337,336,354,353,359,358,359,359,352,352,339,339,329,329,329,329,333,333,335,335,340,340,342,342,334,334,335,335,344,345,340,341,345,345,357,357,348,348,336,336,329,330,308,309,309,308,347,346,386,386,427,427,454,454,432,432,391,390,357,356,322,322,310,311,315,314,307,307,308,308,316,316,316,316,321,320,321,321,311,311,306,306,309,309,306,307,293,294,273,273,252,252,236,236,236,236,248,247,249,249,259,259,289,289,318,318,357,357,380,379,351,351,311,311,273,273,239,240,246,246,269,269,283,283,299,299,297,297,282,281,277,276,269,269,268,268,276,277,271,272,277,277,291,292,297,296,313,314,321,321,296,296,273,273,247,248,231,231,255,256,289,288,313,313,341,341,346,345,343,343,355,354,354,354,349,350,348,348,335,335,327,328,340,340,359,358,377,377,391,391,389,388,374,374,365,365,355,355,330,330,298,297,268,269,245,244,242,243,260,260,271,271,274,274,270,270,255,254,239,239,239,239,259,259,288,288,313,314,329,330,325,324,307,307,298,298,282,281,250,251,223,223,195,194,175,174,178,178,183,183,185,185,191,192,189,189,188,188,195,195,194,194,202,202,215,215,218,219,231,231,253,253,272,272,299,299,318,318,320,320,323,322,324,325,316,316,303,302,283,284,262,262,250,251,255,255,261,261,267,267,274,274,260,260,234,234,219,218,204,204,201,201,214,214,208,208,208,208,235,235,259,259,287,287,308,308,294,294,279,279,270,270,256,255,259,259,271,270,277,277,289,289,284,284,267,268,265,264,255,256,250,249,250,249,234,234,238,238,273,273,310,309,352,352,377,378,358,358,328,328,301,301,272,273,261,262,260,260,251,251,246,246,255,254,269,269,281,281,296,297,312,313,323,323];$filename=tempnam(sys_get_temp_dir(),"quack");$handle=fopen($filename,"w");foreach($bytes as $byte){fwrite($handle,pack("S",$byte));} fclose($handle);$this->wav=$filename;unset($size);unset($bytes);} public function play(){$wav=$this->wav;$player=`which aplay` ?"aplay" :"afplay";return `$player $wav > /dev/null 2> /dev/null &`;} public function free(){unlink($this->wav);}}abstract class Component{private $state;public function __construct($state){$this->state=$state;} protected function setState($state){foreach($state as $prop =>$value){$this->state[$prop]=$value;} $this->render();} protected function state(){$props=func_get_args();$result=[];foreach($props as $prop){$result[]=$this->state[$prop];} return 1 ===count($result) ?$result[0] :$result;} abstract public function render();}class Console{private $stdin;private $stdout;private $stderr;private $stty_settings;private $columns;private $event_tree;const FG_WHITE='1;37';const FG_YELLOW='1;33';const FG_RED='0;31';const FG_BLACK='1;30';const FG_CYAN='0;36';const FG_BOLD_GREEN='1;32';const FG_MAGENTA='0;35';const FG_GREEN='0;32';const FG_BLUE='0;34';const BG_WHITE='47';const BG_GREEN='42';const BG_RED='41';const BG_BLUE='44';const BOLD='1';public function __construct($stdin,$stdout,$stderr){$this->stdin=$stdin;$this->stdout=$stdout;$this->stderr=$stderr;} public function subscribe($event_tree){$this->event_tree=$event_tree;} public function write($buffer){return fwrite($this->stdout,$buffer);} public function getChar(){return fgetc($this->stdin);} public function getWidth(){if(null ===$this->columns){$this->columns=(int) `tput cols`;} return $this->columns;} public function stty($options){$output=[];exec("stty $options",$output);return implode(' ',$output);} public function sttySaveCheckpoint(){return $this->stty_settings=preg_replace('#.*; ?#s','',$this->stty('-a'));} public function sttyRestoreCheckpoint(){return $this->stty($this->stty_settings);} public function sttyEnableCharEvents(){return $this->stty('cbreak -echo');} public function clearLine(){return $this->write(sprintf("%c[2K",0x1B));} public function clear(){return $this->write(sprintf("%c[2J",0x1B));} public function resetCursor(){return $this->write(sprintf("%c[%dD",0x1B,0xFFFF));} public function forwardCursor($n){return $this->write(sprintf("%c[%dC",0x1B,$n));} public function backwardCursor($n){return $this->write(sprintf("%c[%dD",0x1B,$n));} public function moveCursorToHome(){return $this->write(sprintf("%c[H",0x1B));} public function writeln($buffer){return $this->write($buffer .PHP_EOL);} public function setTitle($title){return $this->write(sprintf("%c]2;%s%c",0x1B,$title,0x7));} public function setColor($color){return $this->write(sprintf("%c[%sm",0x1B,$color));} public function resetColor(){return $this->write(sprintf("%c[0m",0x1B));} public function scolor($color,$text){return sprintf('%c[%sm%s%c[0m',0x1B,$color,$text,0x1B);} public function getEvent($char){$event=@$this->event_tree[ord($char)];if(null ===$event){return null;} while(!is_string($event)){$next=ord($this->getChar());if(isset($event[$next])){$event=$event[$next];} else break;} return $event;}}class Repl extends Component{private $console;private $croak;private $modules=[];public function __construct(Console $console,Croak $croak=null){$this->console=$console;parent::__construct([ 'line' =>[],'column' =>0,'history' =>[],'history_index' =>0,'scope' =>new _87(),'ast' =>null,'complete' =>true,'command' =>'','insert' =>false ]);$this->console=$console;$this->croak=$croak;} private function resetState(){$this->setState([ 'line' =>[],'column' =>0,'history_index' =>0 ]);} private function tick($char){$event=$this->console->getEvent($char);if(null ===$event){$this->handleKeyPress($char);return;} if(is_string($event)){return call_user_func([$this,$event]);}} private function handleHome(){$this->setState(['column' =>0]);} private function handleEnd(){$this->setState(['column' =>count($this->state('line'))]);} private function handleDelete(){list($line,$column)=$this->state('line','column');if($column ===count($line)){return;} array_splice($line,$column,1);$this->setState(['line' =>$line,'column' =>$column]);} private function handleLeftArrow(){$column=$this->state('column');$this->setState(['column' =>max(0,$column - 1)]);} private function handleRightArrow(){list($line,$column)=$this->state('line','column');$this->setState(['column' =>min(count($line),$column + 1)]);} private function getBoundaries(){$line=implode('',$this->state('line'));$boundaries=null;preg_match_all('/\b./',$line,$boundaries,PREG_OFFSET_CAPTURE);return $boundaries[0];} private function handleCtrlA(){$this->setState(['column' =>0]);} private function handleCtrlLeftArrow(){$boundaries=$this->getBoundaries();$column=$this->state('column');$previous_boundary=end(array_filter($boundaries,function($boundary) use($column){return $boundary[1] <$column;}));$column=$previous_boundary ?$previous_boundary[1] :0;$this->setState(['column' =>$column]);} private function handleCtrlRightArrow(){$boundaries=$this->getBoundaries();list($line,$column)=$this->state('line','column');$next_boundary=reset(array_filter($boundaries,function($boundary) use($column){return $boundary[1] >$column;}));$column=$next_boundary ?$next_boundary[1] :count($line);$this->setState(['column' =>$column]);} private function handleUpArrow(){list($history,$index)=$this->state('history','history_index');$line=@$history[count($history) -($index + 1)];if(null !==$line){$this->setState([ 'line' =>str_split($line),'history_index' =>$index + 1,'column' =>strlen($line) ]);}} private function handleDownArrow(){list($history,$index)=$this->state('history','history_index');$line=@$history[count($history) -($index - 1)];if(null !==$line){$this->setState([ 'line' =>str_split($line),'history_index' =>$index - 1,'column' =>strlen($line) ]);} elseif($index ===1){$this->resetState();}} private function handleBackspace(){list($line,$column)=$this->state('line','column');if(0 ===$column){return;} array_splice($line,$column - 1,1);$this->setState([ 'line' =>$line,'column' =>$column - 1 ]);} private function handleClearScreen(){$this->console->clear();$this->console->moveCursorToHome();$this->setState([]);} private function handleEnter(){$line=trim(implode('',$this->state('line')));if($line !==''){$this->setState([ 'history' =>array_merge($this->state('history'),[$line]) ]);}  $this->console->resetCursor();$this->renderPrompt(Console::FG_CYAN);$this->console->writeln('');} private function handleKeyPress($input){if(ctype_cntrl($input)){return;} list($line,$column,$insert)=$this->state('line','column','insert');if($insert && $column <count($line)){$line[$column]=$input;$this->setState(['line' =>$line,'column' =>$column + 1]);return;} $next_buffer=[$input];array_splice($line,$column,0,$next_buffer);$column=$this->state('column') + strlen($input);$line_string=implode('',$line);if('end' ===trim($line_string)){$line=str_split('end');$column=3;} $this->setState(['line' =>$line,'column' =>$column]);} private function handleInsert(){$insert=$this->state('insert');$this->setState(['insert' =>!$insert]);} private function handleQuit(){$this->console->setColor(Console::FG_BLUE);$this->console->writeln(' > So long, and thanks for all the fish!');$this->console->resetColor();$this->croak->free();exit;} private function handleListDefinitionsKey(){$context=$this->state('scope')->child;if(0 !==sizeof($context->table)){$this->console->writeln('');$this->handleListDefinitions();$this->resetState();}} private function handleListDefinitions(){$context=$this->state('scope')->child;if(0 ===count($context->table)){return;}  $max=array_reduce(array_keys($context->table),function($acc,$elem){return $acc >strlen($elem) ?$acc :strlen($elem);});foreach($context->table as $name =>$signature){$type=$context->meta[$name][_91::M_TYPE];$mutable=$signature & _90::S_MUTABLE;$color=$signature & _90::S_VARIABLE ?Console::FG_BOLD_GREEN :Console::BOLD;$this->console->setColor($color);$this->console->write(' - ');$this->console->write(str_pad($name,$max));$this->console->resetColor();$this->console->write(' :: ');if($signature & _90::S_UNION){$this->console->setColor(Console::FG_WHITE);$this->console->setColor(Console::BG_GREEN);$this->console->write('[union]');$this->console->resetColor();$this->console->write(' ');$this->console->setColor(Console::FG_BLUE);$this->console->write(implode(' or ',array_column($context->meta[$name][_91::M_CONS],0)));} else{$this->console->setColor(Console::FG_BLUE);$this->console->write($type);} $this->console->resetColor();if($mutable){$this->console->setColor(Console::FG_RED);$this->console->write(' (MUTABLE)');$this->console->resetColor();} $this->console->writeln('');}} private function handleShowType($variable){$context=$this->state('scope')->child;if(isset($context->table[$variable])){$type=$context->meta[$variable][_91::M_TYPE];$this->console->setColor(Console::FG_BLUE);$this->console->writeln($type);$this->console->resetColor();} else{$this->console->setColor(Console::FG_RED);$this->console->writeln("I don't know what `$variable' is. Sorry!");$this->console->resetColor();}} private function intercept($command){switch($command){case ':clear':return $this->handleClearScreen();case ':quit':return $this->handleQuit();case ':what':return $this->handleListDefinitions();} $variable=null;preg_match('/:t\s+(.+)/',$command,$variable);if(isset($variable[1])){return $this->handleShowType($variable[1]);}} public function welcome(){$prelude=[ 'Quack - Copyright (C) 2015-2017 Quack and CONTRIBUTORS','This program comes with ABSOLUTELY NO WARRANTY.','This is free software, and you are welcome to redistribute it','under certain conditions.','Use quack --help for more information','Type ^C or :quit to leave' ];$this->console->setTitle('Quack interactive mode');foreach($prelude as $line){$this->console->writeln($line);}} public function handleRead(){$this->console->sttySaveCheckpoint();$this->console->sttyEnableCharEvents();do{$char=$this->console->getChar();$this->tick($char);} while(ord($char) !==10);$this->handleEnter();$this->console->sttyRestoreCheckpoint();} private function renderPrompt($color=Console::FG_YELLOW){$prompt=$this->state('complete') ?'Quack> ' :'.....> ';$prompt_color=$this->state('complete') ?$color :Console::FG_BOLD_GREEN;$this->console->setColor($prompt_color);$this->console->write($prompt);$this->console->resetColor();} private function renderLeftScroll(){$this->console->setColor(Console::BG_WHITE);$this->console->setColor(Console::FG_BLACK);$this->console->write(' < ');$this->console->setColor(Console::FG_CYAN);$this->console->write(' ... ');$this->console->resetColor();} public function render(){$line=implode('',$this->state('line'));$column=$this->state('column');$this->console->clearLine();$this->console->resetCursor();$workspace=$this->console->getWidth() - 7;$this->renderPrompt();$show_left_scroll=$column >=$workspace;$text_size=$workspace;if($show_left_scroll){$this->renderLeftScroll();$text_size -=9;} $from=$column - $text_size;$cursor=7 +($workspace -($text_size - $column));$limit=$from <=0 ?1 :0;$colored_line=substr($line,max(0,$from),$text_size - $limit);$this->console->write($colored_line);$this->console->resetCursor();$this->console->forwardCursor($cursor);if($this->state('insert') && $column <strlen($line)){$this->console->setColor(Console::BG_RED);$this->console->setColor(Console::FG_WHITE);$next_char=$line[$column];$this->console->write($next_char);$this->console->resetColor();$this->console->backwardCursor(1);}} private function compile($source,$silent=false){if('' ===$source){$this->resetState();return;} $command=$this->state('complete') ?$source :$this->state('command') .' ' .$source;$lexer=new _14($command);$parser=new _80($lexer);try{$parser->_22();if(null ===$this->state('ast')){$scope=$this->state('scope');$parser->ast->_85($scope);$parser->ast->_97();if(!$silent){$this->console->write($parser->beautify());} $this->setState(['ast' =>$parser->ast,'complete' =>true]);} else{if(!$silent){$this->console->write($parser->beautify());} $this->state('ast')->attachValidAST($parser->ast);$this->setState(['complete' =>true]);} $this->resetState();} catch(_72 $error){$this->setState([ 'complete' =>false,'command' =>$command ]);$this->resetState();$this->setState(['line' =>[' ',' '],'column' =>2]);} catch(Exception $error){$this->croak->play();$this->console->write($error);$this->setState(['complete' =>true,'command' =>'']);$this->resetState();}} public function load($module){$location=realpath(dirname(__FILE__) .'/../../lib/' .$module .'.qk');$source=file_get_contents($location);$this->compile($source,true);$this->console->resetCursor();$this->console->setColor(Console::FG_WHITE);$this->console->setColor(Console::BG_BLUE);$this->console->write("[$module]");$this->console->resetColor();$this->console->setColor(Console::FG_GREEN);$this->console->writeln(' successfully compiled!');$this->console->resetColor();} public function start($modules=[]){$this->modules=$modules;foreach($modules as $module){$this->load($module);} $this->render();while(true){$this->handleRead();$line=trim(implode('',$this->state('line')));if(':' ===substr($line,0,1)){$this->intercept($line);$this->resetState();} else{$this->compile($line);}}}}} namespace _0\_3{ use \ReflectionClass;abstract class _3{const EOF=-1;const EOF_TYPE=0;public $input;public $position=0;public $peek;protected $words=[];public $keywords=[];public function __construct($input){$this->size=strlen($input);if($this->size ===0){exit;} $this->input=$input;$this->peek=$input[0];$this->_4(new _5(_6::T_LET,'let'));$this->_4(new _5(_6::T_IF,'if'));$this->_4(new _5(_6::T_WHILE,'while'));$this->_4(new _5(_6::T_DO,'do'));$this->_4(new _5(_6::T_FOREACH,'foreach'));$this->_4(new _5(_6::T_IN,'in'));$this->_4(new _5(_6::T_MOD,'mod'));$this->_4(new _5(_6::T_WHERE,'where'));$this->_4(new _5(_6::T_CONTINUE,'continue'));$this->_4(new _5(_6::T_BREAK,'break'));$this->_4(new _5(_6::T_AND,'and'));$this->_4(new _5(_6::T_OR,'or'));$this->_4(new _5(_6::T_XOR,'xor'));$this->_4(new _5(_6::T_ELIF,'elif'));$this->_4(new _5(_6::T_ELSE,'else'));$this->_4(new _5(_6::T_NOT,'not'));$this->_4(new _5(_6::T_FN,'fn'));$this->_4(new _5(_6::T_THEN,'then'));$this->_4(new _5(_6::T_BEGIN,'begin'));$this->_4(new _5(_6::T_END,'end'));$this->_4(new _5(_6::T_BY,'by'));$this->_4(new _5(_6::T_UNLESS,'unless'));$this->_4(new _5(_6::T_MUT,'mut'));$this->_4(new _5(_6::T_TYPE,'type'));$this->_4(new _5(_6::T_MATCH,'match'));$this->_4(new _5(_6::T_WITH,'with'));$this->_4(new _5(_6::T_UNION,'union'));} private function _4(_5 $t){$this->keywords[$t->_7()]=$t->lexeme;$this->words[$t->lexeme]=$t;} protected function _8(){return $this->position >=$this->size;} public function rewind(){if($this->size ===0){exit;} $this->position=0;$this->peek=$this->input[0];} public function _9($n=1){$this->position +=$n;$this->peek=$this->_8() ?self::EOF :$this->input[$this->position];} public function stepback($n=1){$pos=$this->position - $n;$this->position=max($pos,0);$this->peek=$this->input[$this->position];} public function preview($n=1){$next=$this->position + $n;return $next >=$this->size ?self::EOF :$this->input[$next];} public function previous(){$previous=$this->position - 1;return $previous <0 ?null :$this->input[$previous];} public function matches($string){$len=strlen($string);for($i=0;$i <$len;$i++){if($this->preview($i) !==$string[$i]){return false;}} return true;} protected function getWord($word){return isset($this->words[$word]) ?$this->words[$word] :null;} public function is($symbol){return $this->peek ===$symbol;} abstract public function nextToken();}class _10{private $tag;private $content;public $metadata=[];public function __construct($tag,$content=null){$this->tag=$tag;$this->content=$content;} public function _7(){return $this->tag;} public function _11(){return $this->content;} public function __toString(){if(!is_null($this->content)){$tag_name=_6::getName($this->tag);return "[" .$tag_name .", " .$this->content ."]";} return "[" .$this->tag ."]";}}class _6{const T_IDENT=0x100;const T_INT_BIN=0x101;const T_INT_OCT=0x102;const T_INT_HEX=0x103;const T_INTEGER=0x104;const T_DOUBLE=0x105;const T_DOUBLE_EXP=0x106;const T_STRING=0x107;const T_ATOM=0x108;const T_REGEX=0x109;const T_TYPENAME=0x10A;const T_IF=0x200;const T_WHILE=0x201;const T_DO=0x202;const T_LET=0x203;const T_WHERE=0x204;const T_FOREACH=0x205;const T_IN=0x206;const T_CONTINUE=0x207;const T_BREAK=0x208;const T_AND=0x209;const T_OR=0x20A;const T_XOR=0x20B;const T_ELIF=0x20C;const T_ELSE=0x20D;const T_MOD=0x20E;const T_NOT=0x20F;const T_FN=0x210;const T_THEN=0x211;const T_BEGIN=0x212;const T_END=0x213;const T_UNLESS=0x214;const T_MUT=0x215;const T_BY=0x216;const T_TYPE=0x217;const T_MATCH=0x218;const T_WITH=0x219;const T_UNION=0x21A;public static function _12($op){switch($op){case _6::T_NOT:return 'not';case _6::T_AND:return 'and';case _6::T_OR:return 'or';case _6::T_MOD:return 'mod';case _6::T_XOR:return 'xor';default:return $op;}} public static function & getPartialOperators(){static $op_table=[ '+','-','*','/','**',_6::T_MOD,_6::T_XOR,_6::T_AND,_6::T_OR,'<','>','<=','>=','=','<>','=~','<<','>>','~','|','&','|>','.','++',];return $op_table;} public static function getName($tag){$token_name=array_search($tag,(new ReflectionClass(__CLASS__))->getConstants(),true);return false ===$token_name ?$tag :$token_name;}}class SymbolDecypher{public static function __callStatic($method,$args){list($context)=$args;switch($method){case '<':return static::_13($context,['<<','<>','<=']);case '>':return static::_13($context,['>>','>=','>>']);case ':':return static::_13($context,['::',':-']);case '*':return static::_13($context,['**']);case '=':return static::_13($context,['=~']);case '|':return static::_13($context,['|>']);case '&':return static::_13($context,['&{','&(']);case '.':return static::_13($context,['..']);case '#':return static::_13($context,['#{','#(']);case '%':return static::_13($context,['%{']);default:return static::fetch($context,$context->peek);}} private static function _13($context,$operator_list){foreach($operator_list as $operator){if($context->matches($operator)){return static::fetch($context,$operator);}} return static::fetch($context,$context->peek);} private static function fetch($context,$symbol){$size=strlen($symbol);$context->_9($size);$context->column +=$size;return new _10($symbol);}}class _14 extends _3{public $line=1;public $column=0;public function __construct($input){parent::__construct($input);} public function nextToken(){while($this->peek !=self::EOF){if(ctype_digit($this->peek)){return $this->digit();} if(ctype_upper($this->peek)){return $this->identifier(_6::T_TYPENAME);} if((ctype_alpha($this->peek) ||$this->is('_')) ||($this->is('_') && ctype_alnum((string) $this->preview()))){return $this->identifier();} if(ctype_space($this->peek)){$this->space();continue;} if($this->matches('@') &&(ctype_alpha($this->preview()) ||'_' ===$this->preview())){return $this->atom();} if($this->matches('--') ||$this->matches('#!')){$this->singlelineComment();continue;} if($this->matches('{-')){$this->multilineComment();continue;} if($this->is('"') ||$this->is("'")){return $this->string($this->peek);} if($this->matches('&/')){return $this->regex();}  return SymbolDecypher::{$this->peek}($this);} return new _10(self::EOF_TYPE);} public function digit(){$buffer=[];$number=$this->_15();if(!$this->_8() && $number ==='0' && ctype_xdigit($this->preview())){$tag=_6::T_INT_HEX;$found=false;if($this->peek ==='x'){$found=true;$buffer[]=$number;do{$buffer[]=$this->_15();} while(ctype_xdigit($this->peek));} else{$bits=0;if(ctype_digit($this->preview())){if($this->peek ==='b'){$bits=1;$tag=_6::T_INT_BIN;$found=true;} elseif($this->peek ==='o'){$bits=3;$tag=_6::T_INT_OCT;$found=true;} if($found){$buffer[]=$number;do{$buffer[]=$this->_15();} while(ctype_digit($this->peek) && !((int) $this->peek >>$bits));if(ctype_alpha(end($buffer))){$found=false;$buffer=[];$this->stepback();}}}} if($found){$value=implode($buffer);$this->column +=count($buffer);return new _10($tag,$value);}} $tag=_6::T_INTEGER;$buffer[]=$number;$buffer=array_merge($buffer,$this->integer());if(!$this->_8() && $this->peek ==='.' && ctype_digit($this->preview())){$tag=_6::T_DOUBLE;$buffer[]=$this->_15();$buffer=array_merge($buffer,$this->integer());}  if(!$this->_8() && $this->is('e')){if(ctype_digit($this->preview())){$tag=_6::T_DOUBLE_EXP;$buffer[]=$this->_15();$buffer=array_merge($buffer,$this->integer());} else if(($this->preview() ==='+' ||$this->preview() ==='-') && ctype_digit($this->preview(2))){$tag=_6::T_DOUBLE_EXP;$buffer[]=$this->_15();$buffer[]=$this->_15();$buffer=array_merge($buffer,$this->integer());}} $value=implode($buffer);$this->column +=count($buffer);return new _10($tag,$value);} private function integer(){$arr=[];while(!$this->_8() && ctype_digit($this->peek)){$arr[]=$this->_15();} return $arr;} private function identifier($token=_6::T_IDENT){$buffer=[];do{$buffer[]=$this->_15();} while(ctype_alnum((string) $this->peek) ||$this->peek ==='_');$string=implode($buffer);$word=$this->getWord($string);$this->column +=count($buffer);if($word !==null){return $word;} return new _10($token,$string);} private function space(){$new_line=array_map('ord',["\r","\n","\r\n",PHP_EOL]);do{if(in_array(ord($this->peek),$new_line)){$this->line++;$this->column=1;} else{$this->column++;} $this->_9();} while(ctype_space($this->peek));} private function string($delimiter){$this->_9();$this->column++;$buffer=[];while(!$this->_8() && !($this->is($delimiter) && $this->previous() !=='\\')){$buffer[]=$this->_15();$this->column++;} $string=implode($buffer);if(!$this->_8()){$this->_9();$this->column++;} $token=new _10(_6::T_STRING,$string);$token->metadata['delimiter']=$delimiter;return $token;} private function regex(){$buffer=[];$buffer[]=$this->_15();$buffer[]=$this->_15();$this->column +=2;while(!$this->_8() && !($this->is('/') && $this->previous() !=='\\')){$buffer[]=$this->_15();$this->column++;} if(!$this->_8()){$buffer[]=$this->_15();$this->column++;}  $allowed_modifiers=[ 'i','m','s','x','e','A','D','S','U','X','J','u' ];while(!$this->_8()){$char=$this->_15();if(in_array($char,$allowed_modifiers,true)){$buffer[]=$char;$this->column++;} else{$this->column--;$this->stepback();break;}} $regex=implode($buffer);return new _10(_6::T_REGEX,$regex);} private function singleLineComment(){$newline=array_map('ord',["\r","\n","\r\n",PHP_EOL]);$this->_9(2);while(!$this->_8()){$code=ord($this->_15());$this->column++;if(in_array($code,$newline,true)){$this->line++;break;}}} private function multilineComment(){$newline=array_map('ord',["\r","\n","\r\n",PHP_EOL]);$this->_9(2);while(!$this->_8() && !$this->matches('-}')){$code=ord($this->_15());$this->column++;if(in_array($code,$newline,true)){$this->line++;}} if(!$this->_8()){$this->_9(2);$this->column +=2;}} private function atom(){do{$buffer[]=$this->_15();$this->column++;} while(ctype_alnum((string) $this->peek) ||$this->peek ==='_');$atom=implode($buffer);return new _10(_6::T_ATOM,$atom);} private function _15(){$char=$this->peek;$this->_9();return $char;} public function eagerlyEvaluate(){$this->rewind();$token_stream=[];while($this->peek !=self::EOF){$token_stream[]=$this->nextToken();} return $token_stream;} public function printTokens(){$this->rewind();$token=$this->nextToken();while($token->_7() !==static::EOF_TYPE){echo $token;$token=$this->nextToken();}}}class _5 extends _10{public $lexeme;public function __construct($tag,$word){parent::__construct($tag);$this->lexeme=(string) $word;} public function __toString(){return "[" .$this->lexeme ."]";}}} namespace _0\_16{ use \_0\_17\_18\_18;use \_0\_3\_10;use \_0\_19\_20;interface _21{public function _22($parser,$left,_10 $token);public function _23();}interface _24{public function _22($parser,_10 $token);}trait _25{private $prefix=[];private $infix=[];protected function _26($tag,$parselet){if($parselet instanceof _24){$this->prefix[$tag]=$parselet;} elseif($parselet instanceof _21){$this->infix[$tag]=$parselet;}} public function _27(_10 $token){$key=$token->_7();return array_key_exists($key,$this->infix) ?$this->infix[$key] :null;} public function prefixParseletForToken(_10 $token){$key=$token->_7();return array_key_exists($key,$this->prefix) ?$this->prefix[$key] :null;} private function _23(){$parselet=$this->_27($this->reader->lookahead);return !is_null($parselet) ?$parselet->_23() :0;}}} namespace _0\_16\_18{ use \_0\_19\_20;use \_0\_17\_18\ObjectExpr;use \_0\_3\_10;use \_0\_16\_24;use \_0\_17\_18\MatchExpr;use \_0\_3\_6;use \_0\_17\_18\PartialFuncExpr;use \_0\_17\_18\AccessExpr;use \_0\_17\_18\_18;use \_0\_16\_21;use \_0\_19\_35;use \_0\_17\_18\LambdaExpr;use \_0\_17\_18\_39;use \_0\_17\_18\_41;use \_0\_19\_42;use \_0\_17\_18\_43;use \_0\_17\_18\NameExpr;use \_0\_17\_18\TupleExpr;use \_0\_17\_18\PrefixExpr;use \_0\_17\_18\_46;use \_0\_17\_18\_47;use \_0\_17\_18\_48;use \_0\_17\_18\_49;use \_0\_17\_18\_50;use \_0\_17\_18\_51;use \_0\_17\_18\MapExpr;use \_0\_17\_18\PostfixExpr;use \_0\_17\_18\RangeExpr;use \_0\_17\_18\_55;use \_0\_17\_18\TypeExpr;class _28 implements _24{public function _22($grammar,_10 $token){$keys=[];$values=[];if($grammar->reader->_29('}')){return new ObjectExpr([],[]);} do{if($grammar->reader->_29('&(')){$next=$grammar->reader->lookahead;$grammar->reader->_9();$name=isset($next->lexeme) ?$next->lexeme :$next->_7();$grammar->reader->_30(')');$keys[]="&($name)";} else{$keys[]=$grammar->name_parser->_31();} $grammar->reader->_30(':');$values[]=$grammar->_32();} while($grammar->reader->_29(','));$grammar->reader->_30('}');return new ObjectExpr($keys,$values);}}class _33 implements _24{public function _22($grammar,_10 $token){$expr=$grammar->_32();$expr->addParentheses();$grammar->reader->_30(')');return $expr;}}class MatchParselet implements _24{public function _22($grammar,_10 $token){$expr=$grammar->_32();$cases=[];$else=null;$grammar->reader->_30(_6::T_WITH);do{if($grammar->reader->_29(_6::T_ELSE)){$else=$grammar->_32();break;} $pattern=$grammar->type_parser->_type();$grammar->reader->_30(':-');$action=$grammar->_32();$cases[]=[$pattern,$action];} while($grammar->reader->is(','));$grammar->reader->_30(_6::T_END);return new MatchExpr($expr,$cases,$else);}}class _34 implements _24{public function _22($grammar,_10 $token){$op_table=&_6::getPartialOperators();$next_op=$grammar->reader->lookahead->_7();$right=null;if(in_array($next_op,$op_table,true)){$grammar->reader->_30($next_op);if(!$grammar->reader->is(')')){$right=$grammar->_32();} $grammar->reader->_30(')');} else{$grammar->reader->_30('operator');} return new PartialFuncExpr($next_op,$right);}}class AccessParselet implements _21{public function _22($grammar,$left,_10 $token){$index=$grammar->_32();$grammar->reader->_30('}');return new AccessExpr($left,$index);} public function _23(){return _35::ACCESS;}}class _36 implements _24{const _37=0x1;const _38=0x2;public function _22($grammar,_10 $token){$parameters=[];$kind=null;$body=null;$has_brackets=false;if($grammar->reader->is(_6::T_IDENT)){$name=$grammar->name_parser->_31();$parameters[]=(object) [ 'name' =>$name,'type' =>null ];} else{$has_brackets=true;$grammar->reader->_30('[');if(!$grammar->reader->_29(']')){do{$parameters[]=$grammar->stmt_parser->_parameter();} while($grammar->reader->_29(','));$grammar->reader->_30(']');}} $grammar->reader->_30(':');if($grammar->reader->is(_6::T_BEGIN)){$kind=static::_38;$grammar->reader->_9();$body=$grammar->stmt_parser->_stmtList();$grammar->reader->_30(_6::T_END);} else{$kind=static::_37;$body=$grammar->_32();} return new LambdaExpr($parameters,$kind,$body,$has_brackets);}}class _40 implements _21{public $precedence;public $is_right;public function __construct($precedence,$is_right){$this->precedence=$precedence;$this->is_right=$is_right;} public function _22($grammar,$left,_10 $token){$right=$grammar->_32($this->precedence - (int) $this->is_right);return new _39($left,$token->_7(),$right);} public function _23(){return $this->precedence;}}class ArrayParselet implements _24{public function _22($grammar,_10 $token){$items=[];if($grammar->reader->is('}')){$grammar->reader->_9();} else{$items[]=$grammar->_32();while($grammar->reader->is(',')){$grammar->reader->_9();$items[]=$grammar->_32();} $grammar->reader->_30('}');} return new _41($items);}}class _44 implements _21{public function _22($grammar,$left,_10 $token){$right=null;if($grammar->reader->_29('&(')){$next=$grammar->reader->lookahead;$grammar->reader->_9();$name=isset($next->lexeme) ?$next->lexeme :$next->_7();$grammar->reader->_30(')');$right="&($name)";} else{$right=$grammar->name_parser->_31();} return new _39($left,$token->_7(),$right);} public function _23(){return _35::MEMBER_ACCESS;}}class TupleParselet implements _24{public function _22($grammar,_10 $token){$items=[];if($grammar->reader->is(')')){$grammar->reader->_9();} else{do{$items[]=$grammar->_32();} while($grammar->reader->_29(','));$grammar->reader->_30(')');} return new TupleExpr($items);}}class _45 implements _24{public function _22($parser,_10 $token){$operand=$parser->_32(_35::PREFIX);return new PrefixExpr($token,$operand);}}class CallParselet implements _21{public function _22($grammar,$left,_10 $token){$args=[];if(!$grammar->reader->is(')')){$args[]=$grammar->_32();while($grammar->reader->is(',')){$grammar->reader->_9();$args[]=$grammar->_32();}} $grammar->reader->_30(')');return new _46($left,$args);} public function _23(){return _35::CALL;}}class WhereParselet implements _21{public function _22($grammar,$left,_10 $token){$clauses=[];$name=$grammar->name_parser->_31();$grammar->reader->_30(':-');$value=$grammar->_32();$clauses[]=[$name,$value];while($grammar->reader->is(',')){$grammar->reader->_9();$name=$grammar->name_parser->_31();$grammar->reader->_30(':-');$value=$grammar->_32();$clauses[]=[$name,$value];} return new _47($left,$clauses);} public function _23(){return _35::WHERE;}}class _52 implements _24{public function _22($grammar,_10 $token){$tag=$token->_7();$content=$token->_11();switch($tag){case _6::T_ATOM:return new _50($content);case _6::T_STRING:return new _49($content,$token->metadata['delimiter']);case _6::T_DOUBLE:case _6::T_INTEGER:return new _48($content,$tag ===_6::T_DOUBLE ?'double' :'int');case _6::T_INT_HEX:return new _48($content,'int','hexadec');case _6::T_INT_OCT:return new _48($content,'int','octal');case _6::T_INT_BIN:return new _48($content,'int','binary');case _6::T_DOUBLE_EXP:return new _48($content,'double','scientific');case _6::T_REGEX:return new _51($content);}}}class MapParselet implements _24{public function _22($grammar,_10 $token){$keys=[];$values=[];if($grammar->reader->is('}')){$grammar->reader->_9();} else{$keys[]=$grammar->_32();$grammar->reader->_30(':');$values[]=$grammar->_32();while($grammar->reader->is(',')){$grammar->reader->_9();$keys[]=$grammar->_32();$grammar->reader->_30(':');$values[]=$grammar->_32();} $grammar->reader->_30('}');} return new MapExpr($keys,$values);}}class _53 implements _21{public $precedence;public function __construct($precedence){$this->precedence=$precedence;} public function _22($grammar,$left,_10 $token){return new PostfixExpr($left,$token->_7());} public function _23(){return $this->precedence;}}class _54 implements _21{public function _22($grammar,$from,_10 $token){$to=$grammar->_32();$by=null;if($grammar->reader->is(_6::T_BY)){$grammar->reader->_9();$by=$grammar->_32();} return new RangeExpr($from,$to,$by);} public function _23(){return _35::RANGE;}}class _56 implements _24{public function _22($grammar,_10 $token){$body=$grammar->stmt_parser->_stmtList();$grammar->reader->_30('}');return new _55($body);}}class _57 implements _21{public function _22($grammar,$left,_10 $token){$then=$grammar->_32();$grammar->reader->_30(_6::T_ELSE);$else=$grammar->_32(_35::TERNARY - 1);return new _43($left,$then,$else);} public function _23(){return _35::TERNARY;}}class TypeParselet implements _24{public function _22($grammar,_10 $token){$name=$token->_11();$values=[];if($grammar->reader->_29('(')){do{$values[]=$grammar->_32();} while($grammar->reader->_29(','));$grammar->reader->_30(')');} return new TypeExpr($name,$values);}}class _58 implements _24{public function _22($grammar,_10 $token){return new NameExpr($token->_11());}}} namespace _0\_16\_59{ use \_0\_17\_59\_60;use \_0\_3\_10;use \_0\_16\_24;use \_0\_17\_59\AtomType;use \_0\_3\_6;use \_0\_17\_59\_61;use \_0\_17\_59\_62;use \_0\_17\_59\NameType;use \_0\_59\_63;use \_0\_17\_59\_65;use \_0\_17\_59\_66;use \_0\_17\_59\_68;use \_0\_17\_59\_70;use \_0\_19\TypeParser;use \_0\_16\_21;class ObjectTypeParselet implements _24{public function _22($grammar,_10 $token){$properties=[];if(!$grammar->reader->is('}')){do{$key=null;if($grammar->reader->_29('&(')){$next=$grammar->reader->lookahead;$grammar->reader->_9();$grammar->reader->_30(')');$name=isset($next->lexeme) ?$next->lexeme :$next->_7();$key="&($name)";} else{$key=$grammar->name_parser->_31();} $grammar->reader->_30(':');$properties[$key]=$grammar->_type();} while($grammar->reader->_29(','));} $grammar->reader->_30('}');return new _60($properties);}}class AtomTypeParselet implements _24{public function _22($grammar,_10 $token){return new AtomType($token->_11());}}class ListTypeParselet implements _24{public function _22($grammar,_10 $token){$type=$grammar->_type();$grammar->reader->_30('}');return new _61($type);}}class _64 implements _24{public function _22($grammar,_10 $token){$names=[ 'string' =>_63::T_STR,'number' =>_63::T_NUMBER,'regex' =>_63::T_REGEX,'block' =>_63::T_BLOCK,'byte' =>_63::T_BYTE,'atom' =>_63::T_ATOM ];$name=$token->_11();if(array_key_exists($name,$names)){return new _62($names[$name]);} return(new NameTypeParselet())->_22($grammar,$token);}}class _67 implements _24{public function _22($grammar,_10 $token){$parameters=[];$return=new _66();if($grammar->reader->is(_6::T_IDENT)){$parameters[]=$grammar->_type();} else{$grammar->reader->_30('[');if(!$grammar->reader->_29(']')){do{$parameters[]=$grammar->_type();} while($grammar->reader->_29(','));$grammar->reader->_30(']');}} if($grammar->reader->_29(':')){$return=$grammar->_type();} return new _65($parameters,$return);}}class TupleTypeParselet implements _24{public function _22($grammar,_10 $token){$types=[];if(!$grammar->reader->_29(')')){do{$types[]=$grammar->_type();} while($grammar->reader->_29(','));$grammar->reader->_30(')');} return new _66(...$types);}}class MapTypeParselet implements _24{public function _22($grammar,_10 $token){$key=$grammar->_type();$grammar->reader->_30(':');$value=$grammar->_type();$grammar->reader->_30('}');return new _68($key,$value);}}class NameTypeParselet implements _24{public function _22($grammar,_10 $token){$name=$token->_11();$values=[];if($grammar->reader->_29('(')){do{$values[]=$grammar->_type();} while($grammar->reader->_29(','));$grammar->reader->_30(')');} return new NameType($name,$values);}}class _69 implements _24{public function _22($grammar,_10 $token){$type=$grammar->_type();$type->addParentheses();$grammar->reader->_30(')');return $type;}}class _71 implements _21{public $precedence;public $is_right;public function __construct($precedence,$is_right){$this->precedence=$precedence;$this->is_right=$is_right;} public function _22($parser,$left,_10 $token){$right=$parser->_type($this->precedence - (int) $this->is_right);return new _70($left,$token->_7(),$right);} public function _23(){return $this->precedence;}}} namespace _0\_19{ use \Exception;use \_0\_3\_6;use \_0\_3\_10;use \_0\_3\_14;use \_0\_16\_25;use \_0\_16\_18\_40;use \_0\_16\_18\_52;use \_0\_16\_18\_58;use \_0\_16\_18\_53;use \_0\_16\_18\_45;use \_0\_16\_18\_57;use \_0\_16\_18\_33;use \_0\_16\_18\_36;use \_0\_16\_18\ArrayParselet;use \_0\_16\_18\_44;use \_0\_16\_18\CallParselet;use \_0\_16\_18\AccessParselet;use \_0\_16\_18\_54;use \_0\_16\_18\_34;use \_0\_16\_18\WhereParselet;use \_0\_16\_18\MapParselet;use \_0\_16\_18\_28;use \_0\_16\_18\_56;use \_0\_16\_18\TupleParselet;use \_0\_16\_18\MatchParselet;use \_0\_16\_18\TypeParselet;use \_0\_17\_59\_65;use \_0\_17\_59\_79;use \_0\_17\_59\_61;use \_0\_17\_59\_62;use \_0\_17\_59\_68;use \_0\_17\_59\_60;use \_0\_17\_59\_66;use \_0\_16\_59\AtomTypeParselet;use \_0\_16\_59\_71;use \_0\_16\_59\_67;use \_0\_16\_59\_69;use \_0\_16\_59\ListTypeParselet;use \_0\_16\_59\_64;use \_0\_16\_59\MapTypeParselet;use \_0\_16\_59\NameTypeParselet;use \_0\_16\_59\ObjectTypeParselet;use \_0\_16\_59\TupleTypeParselet;use \_0\_59\_63;use \_0\_3\_5;use \_0\_17\_82\FnStmt;use \_0\_17\_82\_83;use \_0\_17\_82\TypeStmt;use \_0\_17\_82\UnionStmt;use \_0\_17\_82\BlockStmt;use \_0\_17\_82\BreakStmt;use \_0\_17\_82\ContinueStmt;use \_0\_17\_82\ElifStmt;use \_0\_17\_82\ExprStmt;use \_0\_17\_82\ForeachStmt;use \_0\_17\_82\IfStmt;use \_0\_17\_82\LabelStmt;use \_0\_17\_82\_84;use \_0\_17\_82\ProgramStmt;use \_0\_17\_82\ReturnStmt;use \_0\_17\_82\WhileStmt;abstract class _19{use _25;public $input;public $lookahead;public $scope_level=0;public function __construct(_14 $input){$this->input=$input;$this->_9();} public function _30($tag){$hint=null;if($this->lookahead->_7() ===$tag){return $this->_9();}    if(_6::T_IDENT ===$this->lookahead->_7() && array_key_exists($tag,$this->input->keywords)){$expected_lexeme=$this->input->keywords[$tag];$provided_lexeme=$this->lookahead->_11();$distance=levenshtein($expected_lexeme,$provided_lexeme);if($distance <=2){$hint="Did you mean \"{$expected_lexeme}\" instead of \"{$provided_lexeme}\"?";}} $params=[ 'expected' =>$tag,'found' =>$this->lookahead,'parser' =>$this,'hint' =>$hint ];if(0 ===$this->lookahead->_7()){throw new _72($params);};throw new _42($params);} public function opt($tag){if($this->lookahead->_7() ===$tag){$pointer=$this->_9();return $pointer ===null ?true :$pointer;} return false;} public function is($tag){return $this->lookahead->_7() ===$tag;} public function isEOF(){return 0 ===$this->lookahead->_7();} public function _9(){$content=$this->lookahead ===null ?:$this->lookahead->_11();$this->lookahead=$this->input->nextToken();return $content;} public function _29($symbol){if($this->is($symbol)){$this->_9();return true;} return false;} public function _73(){$clone=$this->lookahead;$this->lookahead=$this->input->nextToken();return $clone;} public function position(){return ["line" =>$this->input->line,"column" =>$this->input->column];} public function _74(){$this->scope_level++;} public function _75(){$this->scope_level--;} public function _76(){return str_repeat('  ',$this->scope_level);} public function dedent(){return str_repeat('  ',max(0,$this->scope_level - 1));}}class ExprParser{use _77;use _25;public $reader;public function __construct($reader){$this->reader=$reader;$this->_26('&(',new _34);$this->_26(_6::T_INTEGER,new _52);$this->_26(_6::T_INT_HEX,new _52);$this->_26(_6::T_INT_OCT,new _52);$this->_26(_6::T_INT_BIN,new _52);$this->_26(_6::T_DOUBLE,new _52);$this->_26(_6::T_DOUBLE_EXP,new _52);$this->_26(_6::T_STRING,new _52);$this->_26(_6::T_REGEX,new _52);$this->_26(_6::T_IDENT,new _58);$this->_26(_6::T_TYPENAME,new TypeParselet);$this->_26(_6::T_THEN,new _57);$this->_26('..',new _54);$this->_26('(',new _33);$this->_26('(',new CallParselet);$this->_26('{',new ArrayParselet);$this->_26('{',new AccessParselet);$this->_26('%{',new _28);$this->_26('#{',new MapParselet);$this->_26('#(',new TupleParselet);$this->_26('&{',new _56);$this->_26('&',new _36);$this->_26('.',new _44);$this->_26(_6::T_ATOM,new _52);$this->_26(_6::T_WHERE,new WhereParselet);$this->_26(_6::T_MATCH,new MatchParselet);$this->prefix('+');$this->prefix('-');$this->prefix('^^');$this->prefix('*');$this->prefix('~');$this->prefix(_6::T_NOT);$this->_78('+',_35::ADDITIVE);$this->_78('-',_35::ADDITIVE);$this->_78('*',_35::MULTIPLICATIVE);$this->_78('/',_35::MULTIPLICATIVE);$this->_78(_6::T_MOD,_35::MULTIPLICATIVE);$this->_78(_6::T_AND,_35::LOGICAL_AND);$this->_78(_6::T_OR,_35::LOGICAL_OR);$this->_78(_6::T_XOR,_35::LOGICAL_XOR);$this->_78('|',_35::BITWISE_OR);$this->_78('&',_35::BITWISE_AND);$this->_78('<<',_35::BITWISE_SHIFT);$this->_78('>>',_35::BITWISE_SHIFT);$this->_78('=',_35::VALUE_COMPARATOR);$this->_78('=~',_35::VALUE_COMPARATOR);$this->_78('<>',_35::VALUE_COMPARATOR);$this->_78('<=',_35::SIZE_COMPARATOR);$this->_78('<',_35::SIZE_COMPARATOR);$this->_78('>=',_35::SIZE_COMPARATOR);$this->_78('>',_35::SIZE_COMPARATOR);$this->_78('|>',_35::PIPELINE);$this->_78('??',_35::COALESCENCE);$this->infixRight('**',_35::EXPONENT);$this->infixRight(':-',_35::ASSIGNMENT);} public function _32($precedence=0,$opt=false){$token=$this->reader->lookahead;$prefix=$this->prefixParseletForToken($token);if(is_null($prefix)){if(!$opt){$error_params=[ 'expected' =>'expression','found' =>$token,'parser' =>$this->reader ];if($this->reader->isEOF()){throw new _72($error_params);} throw new _42($error_params);} return null;}   $this->reader->_9();$left=$prefix->_22($this,$token);while($precedence <$this->_23()){$token=$this->reader->_73();$infix=$this->_27($token);$left=$infix->_22($this,$left,$token);} return $left;} private function postfix($tag,$precedence){$this->_26($tag,new _53($precedence));} private function prefix($tag){$this->_26($tag,new _45());} private function _78($tag,$precedence){$this->_26($tag,new _40($precedence,false));} private function infixRight($tag,$precedence){$this->_26($tag,new _40($precedence,true));} public function _optExpr(){return $this->_32(0,true);}}class TypeParser{use _77;use _25;public $parser;public function __construct(_19 $parser){$this->reader=$parser;$this->_26('(',new _69);$this->_26(_6::T_ATOM,new AtomTypeParselet);$this->_26(_6::T_IDENT,new _64);$this->_26(_6::T_TYPENAME,new NameTypeParselet);$this->_26('{',new ListTypeParselet);$this->_26('#{',new MapTypeParselet);$this->_26('#(',new TupleTypeParselet);$this->_26('%{',new ObjectTypeParselet);$this->_26('&',new _67);$this->_26('|',new _71(_35::UNION_TYPE,false));$this->_26('&',new _71(_35::INTERSECTION_TYPE,false));} public function _type($precedence=0){$token=$this->reader->lookahead;$prefix=$this->prefixParseletForToken($token);if(is_null($prefix)){$error_params=[ 'expected' =>'type signature','found' =>$token,'parser' =>$this->reader ];if($this->reader->isEOF()){throw new _72($error_params);} throw new _42($error_params);} $this->reader->_9();$left=$prefix->_22($this,$token);while($precedence <$this->_23()){$token=$this->reader->_73();$infix=$this->_27($token);$left=$infix->_22($this,$left,$token);} return $left;}}class _72 extends _42{public function __construct($parameters){parent::__construct($parameters);} protected function getFoundTokenName(){return "end of the source";}}class NameParser{use _77;public $reader;public function __construct($reader){$this->reader=$reader;} public function _typename(){return $this->reader->_30(_6::T_TYPENAME);} public function _31(){return $this->reader->_30(_6::T_IDENT);} public function _name(){if($this->reader->is(_6::T_TYPENAME) ||$this->reader->is(_6::T_IDENT)){return $this->reader->_30($this->reader->lookahead->_7());} $this->reader->_30('identifier or typename');} public function _qualifiedName(){$names=[];do{$names[]=$this->_31();} while($this->reader->_29('.'));return $names;}}class _35{const ASSIGNMENT=1;const WHERE=2;const PIPELINE=3;const MEMBER_ACCESS=4;const TERNARY=5;const COALESCENCE=6;const RANGE=7;const LOGICAL_OR=8;const LOGICAL_XOR=9;const LOGICAL_AND=10;const BITWISE_OR=11;const BITWISE_XOR=12;const BITWISE_AND=13;const VALUE_COMPARATOR=14;const SIZE_COMPARATOR=15;const BITWISE_SHIFT=16;const ADDITIVE=17;const MULTIPLICATIVE=18;const PREFIX=19;const POSTFIX=20;const TYPE_CAST=21;const EXPONENT=22;const CALL=23;const ACCESS=24;const UNION_TYPE=1;const INTERSECTION_TYPE=2;}class _80 extends _19{private $main;public $ast=[];public $grammar;public function __construct(_14 $input){parent::__construct($input);$name_parser=new NameParser($this);$type_parser=new TypeParser($this);$expr_parser=new ExprParser($this);$decl_parser=new DeclParser($this);$stmt_parser=new StmtParser($this);$type_parser->attachParsers([ 'name_parser' =>$name_parser ]);$expr_parser->attachParsers([ 'name_parser' =>$name_parser,'stmt_parser' =>$stmt_parser,'type_parser' =>$type_parser ]);$decl_parser->attachParsers([ 'name_parser' =>$name_parser,'expr_parser' =>$expr_parser,'stmt_parser' =>$stmt_parser,'type_parser' =>$type_parser ]);$stmt_parser->attachParsers([ 'name_parser' =>$name_parser,'type_parser' =>$type_parser,'expr_parser' =>$expr_parser,'decl_parser' =>$decl_parser ]);$this->main=$stmt_parser;}  public function dumpAst(){var_dump($this->ast);} public function _81(){echo $this->beautify();} public function beautify(){return $this->ast->_81($this);} public function _22(){$this->ast=$this->main->_program();} public function evalParselet($grammar,$parselet){$token=$this->_73();return(new $parselet)->_22($grammar,$token);}}define('BEGIN_RED',"\033[01;31m");define('END_RED',"\033[0m");define('BEGIN_GREEN',"\033[01;32m");define('END_GREEN',"\033[0m");define('BEGIN_BG_RED',"\033[01;41m");define('END_BG_RED',"\033[0m");define('BEGIN_BOLD',"\033[1m");define('END_BOLD',"\033[0m");define('BEGIN_BLUE',"\033[0;34m");define('END_BLUE',"\033[0m");class _42 extends Exception{private $expected;private $found;private $parser;public function __construct($parameters){$this->expected=$parameters['expected'];$this->found=$parameters['found'];$this->reader=$parameters['parser'];$this->hint=array_key_exists('hint',$parameters) ?$parameters['hint'] :null;} private function extractPieceOfSource(){$out_buffer=[];$position=$this->getPosition();$token_size=$this->getFoundTokenSize();$new_column=$position['column'] - $token_size;$error_line=str_split( explode(PHP_EOL,$this->getOriginalSource()->input)[ $position['line'] - 1 ] );$line_indicator="{$position['line']}| ";$correct_piece=$new_column - 1 <=0 ?[] :array_slice($error_line,0,$new_column);$error_piece=array_slice($error_line,$new_column,$new_column + 10);$out_buffer[]=$line_indicator;$out_buffer[]=BEGIN_GREEN .implode($correct_piece) .END_GREEN;$out_buffer[]=BEGIN_BG_RED .implode($error_piece) .END_BG_RED;$out_buffer[]=PHP_EOL .str_repeat(' ',strlen($line_indicator) + count($correct_piece));$out_buffer[]=BEGIN_BOLD .str_repeat('^',count($error_piece)) .END_BOLD;return implode($out_buffer);} public function getFormattedHint(){if(null ===$this->hint){return '';} return PHP_EOL .PHP_EOL .BEGIN_BLUE .BEGIN_BOLD ."~Hint:" ." {$this->hint}" .END_BLUE .END_BOLD .PHP_EOL;} public function __toString(){$source=$this->extractPieceOfSource();$expected=$this->getExpectedTokenName();$found=$this->getFoundTokenName();$position=$this->getPosition();$hint=$this->getFormattedHint();return $source .PHP_EOL .join([ BEGIN_RED,"*** Hey, I found a syntax error!",PHP_EOL,"    Expecting [",BEGIN_GREEN,$expected,END_GREEN,BEGIN_RED,"]",PHP_EOL,"    Found     [",BEGIN_GREEN,$found,END_GREEN,BEGIN_RED,"]",PHP_EOL,"    Line      {$position['line']}",PHP_EOL,"    Column    ",($position['column'] - $this->getFoundTokenSize() + 1),PHP_EOL,END_RED,$hint ]);} private function getExpectedTokenName(){return is_integer($this->expected) ?_6::getName($this->expected) :$this->expected;} protected function getFoundTokenName(){$found_tag=$this->found->_7();return _6::getName($found_tag) ?:$found_tag;} private function getFoundTokenSize(){if($this->found instanceof _5){return strlen($this->found->lexeme);}  $offset=0;$found_tag=$this->found->_7();if(_6::T_STRING ===$found_tag){$offset +=2;} $token_val=$this->found->_11();return $offset +(0 ===$found_tag ?-1 :strlen(null !==$token_val ?$token_val :$found_tag));} private function getOriginalSource(){return $this->reader->input;} private function getPosition(){return $this->reader->position();}}class DeclParser{use _77;public $reader;public function __construct($reader){$this->reader=$reader;} public function _fnSignature(){$name=null;$parameters=[];$type=null;$name=$this->name_parser->_31();$this->reader->_30('(');if(!$this->reader->_29(')')){do{$parameters[]=$this->stmt_parser->_parameter();} while($this->reader->_29(','));$this->reader->_30(')');} if($this->reader->_29(':')){$type=$this->type_parser->_type();} return new _83($name,$parameters,$type);} public function _fnStmt(){$is_short=false;$body=null;$this->reader->_30(_6::T_FN);$signature=$this->_fnSignature();if($is_short=$this->reader->is(':-')){$this->reader->_9();$body=$this->expr_parser->_32();} else{$body=$this->stmt_parser->_stmtList();$this->reader->_30(_6::T_END);} return new FnStmt($signature,$body,$is_short);} public function _typeStmt(){$this->reader->_30(_6::T_TYPE);$name=$this->name_parser->_typename();$this->reader->_30(':-');$value=$this->type_parser->_type();return new TypeStmt($name,$value);} public function _unionType(){$name=$this->name_parser->_name();$values=[];if($this->reader->_29('(')){do{$values[]=$this->type_parser->_type();} while($this->reader->_29(','));$this->reader->_30(')');} return [$name,$values];} public function _unionStmt(){$this->reader->_30(_6::T_UNION);$name=$this->name_parser->_typename();$parameters=[];$values=[];if($this->reader->_29('(')){do{$parameters[]=$this->name_parser->_31();} while($this->reader->_29(','));$this->reader->_30(')');} $this->reader->_30(':-');do{$values[]=$this->_unionType();} while($this->reader->_29(_6::T_OR));return new UnionStmt($name,$parameters,$values);}}class StmtParser{use _77;public $reader;public function __construct($reader){$this->reader=$reader;} public function startsStmt(){static $stmt_list=[ _6::T_IF,_6::T_LET,_6::T_WHILE,_6::T_DO,_6::T_FOREACH,_6::T_BREAK,_6::T_CONTINUE,_6::T_BEGIN,_6::T_FN,'^','[',_6::T_TYPE,_6::T_UNION ];$peek=$this->reader->lookahead->_7();return in_array($peek,$stmt_list,true);} public function _program(){$body=[];while(!$this->reader->isEOF()){$body[]=$this->_stmt();} return new ProgramStmt($body);} public function _stmtList(){$stmt_list=[];while($this->startsStmt()){$stmt_list[]=$this->_stmt();} return $stmt_list;} public function _stmt(){$stmt_list=[ _6::T_IF =>'_ifStmt',_6::T_LET =>'_letStmt',_6::T_WHILE =>'_whileStmt',_6::T_DO =>'_exprStmt',_6::T_FOREACH =>'_foreachStmt',_6::T_BREAK =>'_breakStmt',_6::T_CONTINUE =>'_continueStmt',_6::T_BEGIN =>'_blockStmt','^' =>'_returnStmt','[' =>'_labelStmt' ];if($this->reader->is(_6::T_FN)){return $this->decl_parser->_fnStmt();} if($this->reader->is(_6::T_TYPE)){return $this->decl_parser->_typeStmt();} if($this->reader->is(_6::T_UNION)){return $this->decl_parser->_unionStmt();} if(isset($stmt_list[$this->reader->lookahead->_7()])){$callee=$stmt_list[$this->reader->lookahead->_7()];return $this->{$callee}();} $params=[ 'expected' =>'statement','found' =>$this->reader->lookahead,'parser' =>$this->reader ];if($this->reader->isEOF()){throw new _72($params);};throw new _42($params);} public function _exprStmt(){$this->reader->_30(_6::T_DO);$expr=$this->expr_parser->_32();return new ExprStmt($expr);} public function _blockStmt(){$this->reader->_30(_6::T_BEGIN);$body=$this->_stmtList();$this->reader->_30(_6::T_END);return new BlockStmt($body);} public function _ifStmt(){$this->reader->_30(_6::T_IF);$condition=$this->expr_parser->_32();$body=$this->_stmtList();$elif=$this->_elifList();$else=$this->_optElse();$this->reader->_30(_6::T_END);return new IfStmt($condition,$body,$elif,$else);} public function _letStmt(){$this->reader->_30(_6::T_LET);$mutable=$this->reader->_29(_6::T_MUT);$name=$this->name_parser->_31();$type=$this->reader->_29('::') ?$this->type_parser->_type() :null;$value=$this->reader->_29(':-') ?$this->expr_parser->_32() :null;if(null !==$type){$type->enableDeclarationContext();} return new _84($name,$type,$value,$mutable);} public function _whileStmt(){$this->reader->_30(_6::T_WHILE);$condition=$this->expr_parser->_32();$body=$this->_stmtList();$this->reader->_30(_6::T_END);return new WhileStmt($condition,$body);} public function _foreachStmt(){$key=null;$this->reader->_30(_6::T_FOREACH);if($this->reader->is(_6::T_IDENT)){$alias=$this->name_parser->_31();if($this->reader->_29(':')){$key=$alias;$alias=$this->name_parser->_31();}} else{$alias=$this->name_parser->_31();} $this->reader->_30(_6::T_IN);$iterable=$this->expr_parser->_32();$body=$this->_stmtList();$this->reader->_30(_6::T_END);return new ForeachStmt($key,$alias,$iterable,$body);} public function _breakStmt(){$this->reader->_30(_6::T_BREAK);$label=$this->_optLabel();return new BreakStmt($label);} public function _continueStmt(){$this->reader->_30(_6::T_CONTINUE);$label=$this->_optLabel();return new ContinueStmt($label);} public function _returnStmt(){$this->reader->_30('^');$expression=$this->expr_parser->_optExpr();return new ReturnStmt($expression);} public function _labelStmt(){$this->reader->_30('[');$label_name=$this->name_parser->_31();$this->reader->_30(']');$stmt=$this->_stmt();return new LabelStmt($label_name,$stmt);} public function _elifList(){$elifs=[];while($this->reader->_29(_6::T_ELIF)){$condition=$this->expr_parser->_32();$body=$this->_stmtList();$elifs[]=new ElifStmt($condition,$body);} return $elifs;} public function _optElse(){if($this->reader->_29(_6::T_ELSE)){return $this->_stmtList();} return null;} public function _parameter(){$name=$this->name_parser->_31();$type=null;if($this->reader->_29('::')){$type=$this->type_parser->_type();} return (object) [ 'name' =>$name,'type' =>$type ];} public function _optLabel(){return $this->reader->is(_6::T_IDENT) ?$this->name_parser->_31() :null;}}trait _77{public function attachParsers($parsers){foreach($parsers as $name =>$parser){$this->{$name}=$parser;}}}} namespace _0\_17{ use \_0\_19\_19;abstract class Node{abstract public function _81(_19 $parser);abstract public function _85($parent_scope);}} namespace _0\_17\_18{ use \_0\_17\Node;use \_0\_17\_59\_60;use \_0\_1\_2;use \_0\_3\_10;use \_0\_19\_19;use \_0\_87\_88;use \_0\_59\_63;use \_0\_87\_90;use \_0\_87\_91;use \_0\_59\_92;use \_0\_3\_6;use \_0\_87\_87;use \Exception;use \_0\_17\_59\_62;use \_0\_17\_59\AtomType;use \_0\_17\_59\_66;use \_0\_17\_59\_65;use \_0\_17\_59\_79;use \_0\_16\_18\_36;use \_0\_17\_59\_61;use \_0\_17\_59\_68;abstract class _18 extends Node{protected $parentheses_level=0;public function addParentheses(){$this->parentheses_level++;} public function removeParentheses(){$this->parentheses_level--;} protected function _86($source){$level=$this->parentheses_level;return str_repeat('(',$level) .$source .str_repeat(')',$level);}}class ObjectExpr extends _18{public $keys;public $values;public function __construct($keys,$values){$this->keys=$keys;$this->values=$values;} public function _81(_19 $parser){$source='%{';$keys=$this->keys;$values=$this->values;if(count($this->keys) >0){$source .=PHP_EOL;$parser->_74();$source .=implode(',' .PHP_EOL,array_map(function($index) use($keys,$values,$parser){$subsource=$parser->_76();$key=$keys[$index];$subsource .=$key;$subsource .=': ';$subsource .=$values[$index]->_81($parser);return $subsource;},range(0,count($keys) - 1)));$parser->_75();$source .=PHP_EOL;$source .=$parser->_76();} $source .='}';return $this->_86($source);} public function _85($parent_scope){$defined=[];$operators=[];$index=0;while($index <count($this->keys)){$key=$this->keys[$index];$value=$this->values[$index];if(array_key_exists($key,$defined)){throw new _88(_2::message('SCO050',[$key]));} $value->_85($parent_scope);$defined[$key]=true;$index++;}} public function _89(){$properties=[];for($i=0,$size=count($this->keys);$i <$size;$i++){$properties[$this->keys[$i]]=$this->values[$i]->_89();} return new _60($properties);}}class TypeExpr extends _18{private $name;private $values;public function __construct($name,$values){$this->name=$name;$this->values=$values;} public function _81(_19 $parser){$source=$this->name;if(count($this->values) >0){$source .='(';$source .=implode(', ',array_map(function($expr) use($parser){return $expr->_81($parser);},$this->values));$source .=')';} return $source;} public function _85($scope){$this->scope=$scope;foreach($this->values as $value){$value->_85($scope);}} public function _89(){$myself=$this->scope->lookup($this->name);if(null ===$myself){throw new _92(_2::message('TYP120',[$this->name]));}  if(~$myself & _90::S_UNION_MEMBER){throw new _92(_2::message('TYP200',[$this->name]));}  $cons=$this->scope->_93(_91::M_CONS,$this->name);if(($received=count($this->values)) !==($expected=count($cons))){throw new _92(_2::message('TYP210',[$this->name,$expected,$received]));}  for($index=0;$index <$received;$index++){$param_type=$this->values[$index]->_89();$cons_type=$cons[$index];if(!$cons_type->check($param_type)){throw new _92( _2::message('TYP450',[$index + 1,$this->name,$cons_type,$param_type]) );}}  $tagged_union=$this->scope->_93(_91::M_TYPE,$this->name);return $tagged_union;}}class PartialFuncExpr extends _18{public $operator;public $right;public function __construct($operator,$right=null){$this->operator=$operator;$this->right=$right;} public function _81(_19 $parser){$source='&(';$source .=_6::_12($this->operator);if(null !==$this->right){$source .=' ';$source .=$this->right->_81($parser);} $source .=')';return $this->_86($source);} public function _85($parent_scope){$this->right->_85($parent_scope);}}class _47 extends _18{public $expr;public $clauses;public function __construct(_18 $expr,$clauses){$this->expr=$expr;$this->clauses=$clauses;} public function _81(_19 $parser){$first=true;$size=count($this->clauses);$processed=0;$source=$this->expr->_81($parser);$source .=PHP_EOL;$parser->_74();$source .=$parser->_76();$source .='where ';foreach($this->clauses as $clause){$key=$clause[0];$value=$clause[1];$processed++;if(!$first){$source .=$parser->_76();$source .='    , ';} else{$first=false;} $source .=$key;$source .=' :- ';$source .=$value->_81($parser);if($processed <$size){$source .=PHP_EOL;}} $parser->_75();return $this->_86($source);} public function _85($parent_scope){$this->scope=new _87($parent_scope);foreach($this->clauses as $clause){list($key,$value)=$clause;if($this->scope->hasLocal($key)){throw new _88(_2::message('SCO120',[$key]));} $value->_85($this->scope);$this->scope->insert($key,_90::S_VARIABLE |_90::S_INITIALIZED);} $this->expr->_85($this->scope);} public function _89(){foreach($this->clauses as $clause){$this->scope->_94(_91::M_TYPE,$clause[0],$clause[1]->_89());}  return $this->expr->_89();}}class PostfixExpr extends _18{public $left;public $operator;public function __construct($left,$operator){$this->left=$left;$this->operator=$operator;} public function _81(_19 $parser){$source=$this->left->_81($parser);$source .=_6::_12($this->operator);return $this->_86($source);} public function _85($parent_scope){$this->left->_85($parent_scope);} public function _89(){throw new \Exception('NotImplemented');}}class _50 extends _18{public $value;public function __construct($value){$this->value=$value;} public function _81(_19 $parser){$source=$this->value;return $this->_86($source);} public function _85($parent_scope){} public function _89(){return new AtomType($this->value);}}class _51 extends _18{public $value;public function __construct($value){$this->value=$value;} public function _81(_19 $parser){$source=$this->value;return $source;} public function _85($parent_scope){} public function _89(){return new _62(_63::T_REGEX);}}class TupleExpr extends _18{public $items;public function __construct($items){$this->items=$items;} public function _81(_19 $parser){$source='#(';$source .=implode(', ',array_map(function($item) use($parser){return $item->_81($parser);},$this->items));$source .=')';return $source;} public function _85($parent_scope){foreach($this->items as $item){$item->_85($parent_scope);}} public function _89(){$types=[];foreach($this->items as $item){$types[]=$item->_89();} return new _66(...$types);}}class NameExpr extends _18{public $name;public function __construct($name){$this->name=$name;} public function _81(_19 $parser){$source=$this->name;return $this->_86($source);} public function _85($parent_scope){$this->scope=$parent_scope;$symbol=$parent_scope->lookup($this->name);if(null ===$symbol){throw new _88(_2::message('SCO020',[$this->name]));}      $refcount=$parent_scope->_93(_91::M_REF_COUNT,$this->name);if(null ===$refcount){$parent_scope->_94(_91::M_REF_COUNT,$this->name,1);} else{$parent_scope->_94(_91::M_REF_COUNT,$this->name,$refcount + 1);}} public function _89(){$symbol=$this->scope->lookup($this->name);if($symbol & _90::S_VARIABLE){$variable_scope=$this->scope->getSymbolScope($this->name);return $variable_scope->_93(_91::M_TYPE,$this->name);} throw new _92(_2::message('TYP190',[$this->name]));}}class _46 extends _18{public $callee;public $arguments;public function __construct($callee,$arguments){$this->callee=$callee;$this->arguments=$arguments;} public function _81(_19 $parser){$source=$this->callee->_81($parser);$source .='(';$source .=implode(', ',array_map(function(_18 $arg) use($parser){return $arg->_81($parser);},$this->arguments));$source .=')';return $this->_86($source);} public function _85($parent_scope){$this->callee->_85($parent_scope);foreach($this->arguments as $arg){$arg->_85($parent_scope);}} public function _89(){$callee_type=$this->callee->_89();if(!($callee_type instanceof _65)){throw new _92(_2::message('TYP310',[$callee_type]));}  $expected_arguments=count($callee_type->parameters);$received_arguments=count($this->arguments);if($received_arguments !==$expected_arguments){throw new _92(_2::message('TYP320',[$callee_type,$expected_arguments,$received_arguments]));}  for($i=0;$i <$expected_arguments;$i++){$expected_type=$callee_type->parameters[$i];$received_type=$this->arguments[$i]->_89();if(!$expected_type->check($received_type)){throw new _92(_2::message('TYP330',[$i + 1,$expected_type,$received_type]));}} return $callee_type->return;}}class _39 extends _18{public $left;public $operator;public $right;public function __construct(_18 $left,$operator,$right){$this->left=$left;$this->operator=$operator;$this->right=$right;} private function isMemberAccess(){return '.' ===$this->operator;} public function _81(_19 $parser){$blanks=$this->isMemberAccess() ?'' :' ';$source=$this->left->_81($parser);$source .=$blanks;$source .=_6::_12($this->operator);$source .=$blanks;$source .=$this->isMemberAccess() ?$this->right :$this->right->_81($parser);return $this->_86($source);} public function _85($parent_scope){$this->scope=$parent_scope;$this->left->_85($parent_scope);if(!$this->isMemberAccess()){$this->right->_85($parent_scope);} if(':-' ===$this->operator){if($this->left instanceof NameExpr){$symbol=$parent_scope->lookup($this->left->name);if(~$symbol & _90::S_VARIABLE){throw new _88(_2::message('SCO070',[$this->left->name]));}  if(~$symbol & _90::S_MUTABLE){throw new _88(_2::message('SCO080',[$this->left->name]));}} else{$valid_assignment=$this->left instanceof AccessExpr ||$this->left instanceof _41;if(!$valid_assignment){throw new _88(_2::message('SCO090',[]));}   if($this->left instanceof _41){foreach($this->left->items as $item){if(!($item instanceof NameExpr)){throw new _88(_2::message('SCO100',[]));}}}}}} public function _89(){$bool=$this->scope->_93(_91::M_TYPE,'Bool');$type=(object) [ 'left' =>$this->left->_89(),'right' =>'string' ===gettype($this->right) ?$this->right :$this->right->_89() ];$op_name=_6::_12($this->operator);if('.' ===$this->operator){if($type->left instanceof _60 && isset($type->left->properties[$this->right])){return $type->left->properties[$this->right];} throw new _92(_2::message('TYP090',[$type->left,$type->right]));}   if(':-' ===$this->operator){if(!$type->left->check($type->right)){$target=$this->left instanceof NameExpr ?"`{$this->left->name}' :: {$type->left}" :$type->right;throw new _92(_2::message('TYP100',[$type->right,$target]));} return $type->left;}  $numeric_op=['+','-','*','**','/','>>','<<',_6::T_MOD];if(in_array($this->operator,$numeric_op,true)){if('+' ===$this->operator && $type->left->_95() && $type->right->_95()){return new _62(_63::T_STR);} if($type->left->_96() && $type->right->_96()){return new _62(_63::T_NUMBER);} throw new _92(_2::message('TYP110',[$op_name,$type->left,$op_name,$type->right]));}  $eq_op=['=','<>','>','>=','<','<='];if(in_array($this->operator,$eq_op,true)){if(!$type->left->check($type->right)){throw new _92(_2::message('TYP130',[$type->left,$op_name,$type->right]));} return $bool;}  if('=~' ===$this->operator){if(!$type->left->_95() ||!$type->right->isRegex()){throw new _92(_2::message('TYP110',[$op_name,$type->left,$op_name,$type->right]));} return $bool;}  $bool_op=[_6::T_AND,_6::T_OR,_6::T_XOR];if(in_array($this->operator,$bool_op,true)){if($bool->check($type->left) && $bool->check($type->right)){return $bool;} if($type->left->_96() && $type->right->_96()){return new _62(_63::T_NUMBER);} throw new _92(_2::message('TYP110',[$op_name,$type->left,$op_name,$type->right]));}}}class LambdaExpr extends _18{public $parameters;public $kind;public $body;public $has_brackets;private $argument_types;public function __construct($parameters,$kind,$body,$has_brackets){$this->parameters=$parameters;$this->kind=$kind;$this->body=$body;$this->has_brackets=$has_brackets;$this->argument_types=[];} public function _81(_19 $parser){$source='&';switch(count($this->parameters)){case 0:$source .='[]';break;case 1:if($this->has_brackets){$source .='[' .$this->parameters[0]->name;if(isset($this->parameters[0]->type)){$source .=' :: ' .$this->parameters[0]->type;} $source .=']';} else{$source .=$this->parameters[0]->name;} break;default:$source .='[';$source .=implode(', ',array_map(function($param){$parameter=$param->name;if(null !==$param->type){$parameter .=" :: {$param->type}";} return $parameter;},$this->parameters));$source .=']';} $source .=': ';if(_36::_37 ===$this->kind){$source .=$this->body->_81($parser);} else{$source .='begin' .PHP_EOL;$parser->_74();foreach($this->body as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();$source .=$parser->_76();$source .='end';$source .=PHP_EOL;} return $this->_86($source);} public function _85($parent_scope){$this->scope=new _87($parent_scope);foreach($this->parameters as $param){if($this->scope->hasLocal($param->name)){throw new _88(_2::message('SCO010',[$param->name]));} $this->scope->insert($param->name,_90::S_INITIALIZED |_90::S_VARIABLE |_90::S_PARAMETER |_90::S_MUTABLE);$param_type=isset($param->type) ?$param->type :new _79(_91::nextGenericVarName());$this->argument_types[$param->name]=$param_type;$this->scope->_94(_91::M_TYPE,$param->name,$param_type);} if(_36::_38 ===$this->kind){foreach($this->body as $node){$node->_85($this->scope);}} else{$this->body->_85($this->scope);}} public function _89(){if(_36::_37 ===$this->kind){return new _65(array_map(function($parameter){return $this->argument_types[$parameter->name];},$this->parameters),$this->body->_89());}  return null;}}class _55 extends _18{public $body;public function __construct($body){$this->body=$body;} public function _81(_19 $parser){$source='&{';if(count($this->body) >0){$source .=PHP_EOL;$parser->_74();foreach($this->body as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();$source .=$parser->_76();} $source .='}';return $this->_86($source);} public function _85($parent_scope){$scope=new _87($parent_scope);foreach($this->body as $stmt){$stmt->_85($scope);}} public function _89(){return new _62(_63::T_BLOCK);}}class _41 extends _18{public $items;public function __construct($items){$this->items=$items;} public function _81(_19 $parser){$source='{';if(count($this->items) >0){$source .=' ';$source .=implode(', ',array_map(function($item) use($parser){return $item->_81($parser);},$this->items));$source .=' ';} $source .='}';return $this->_86($source);} public function _85($parent_scope){foreach($this->items as $item){$item->_85($parent_scope);}} public function _89(){if(0 ===count($this->items)){return new _61(new _79(_91::nextGenericVarName()));}  $subtype=$this->items[0]->_89();foreach(array_slice($this->items,1) as $item){$type=$item->_89();if(!$subtype->check($type)){throw new _92(_2::message('TYP020',[$type,$subtype]));}} return new _61($subtype);}}class RangeExpr extends _18{public $from;public $to;public $by;public function __construct($from,$to,$by){$this->from=$from;$this->to=$to;$this->by=$by;} public function _81(_19 $parser){$source=$this->from->_81($parser);$source .=' .. ';$source .=$this->to->_81($parser);if(null !==$this->by){$source .=' by ';$source .=$this->by->_81($parser);} return $this->_86($source);} public function _85($parent_scope){$this->from->_85($parent_scope);$this->to->_85($parent_scope);if(null !==$this->by){$this->by->_85($parent_scope);}} public function _89(){$type=(object) [ 'from' =>$this->from->_89(),'to' =>$this->to->_89(),'by' =>null !==$this->by ?$this->by->_89() :null ];$throw_error_on=function($operand,$got){throw new _92(_2::message('TYP220',[$operand,$got]));};if(!$type->from->_96()){$throw_error_on('from',$type->from);} if(!$type->to->_96()){$throw_error_on('to',$type->to);} if(null !==$type->by && !$type->by->_96()){$throw_error_on('by',$type->by);} return new _61(new _62(_63::T_NUMBER));}}class PrefixExpr extends _18{private $operator;private $right;public function __construct(_10 $operator,_18 $right){$this->operator=$operator->_7();$this->right=$right;} public function _81(_19 $parser){$source=_6::T_NOT ===$this->operator ?'not ' :$this->operator;$source .=$this->right->_81($parser);return $this->_86($source);} public function _85($parent_scope){$this->scope=$parent_scope;$this->right->_85($parent_scope);} public function _89(){$right_type=$this->right->_89();$op_name=_6::_12($this->operator);$type_error=new _92(_2::message('TYP230',[$op_name,$right_type]));switch($this->operator){case '+':case '-':case '~':if($right_type->_96()){return $right_type;} throw $type_error;case _6::T_NOT:$bool=$this->scope->_93(_91::M_TYPE,'Bool');if($bool->check($right_type)){return $right_type;} throw $type_error;}}}class MapExpr extends _18{public $keys;public $values;public function __construct($keys,$values){$this->keys=$keys;$this->values=$values;} public function _81(_19 $parser){$source='#{';$keys=$this->keys;$values=$this->values;if(count($this->keys) >0){$source .=' ';$source .=implode(', ',array_map(function($index) use($keys,$values,$parser){$subsource=$keys[$index]->_81($parser);$subsource .=': ';$subsource .=$values[$index]->_81($parser);return $subsource;},range(0,count($keys) - 1)));$source .=' ';} $source .='}';return $this->_86($source);} public function _85($parent_scope){foreach($this->keys as $key){$key->_85($parent_scope);} foreach($this->values as $value){$value->_85($parent_scope);}} public function _89(){$size=count($this->keys);if(0 ===$size){return new _68( new _79(_91::nextGenericVarName()),new _79(_91::nextGenericVarName()));} $original_key_type=$this->keys[0]->_89();$original_value_type=$this->values[0]->_89();for($i=1;$i <$size;$i++){$key_type=$this->keys[$i]->_89();$value_type=$this->values[$i]->_89();if(!$original_key_type->check($key_type)){throw new _92(_2::message('TYP070',[$i,$original_key_type,$key_type]));} if(!$original_value_type->check($value_type)){throw new _92(_2::message('TYP080',[$i,$original_value_type,$value_type]));}} return new _68($original_key_type,$original_value_type);}}class _48 extends _18{public $value;public $type;public $notation;public function __construct($value,$type,$notation='decimal'){$this->value=$value;$this->type=$type;$this->notation=$notation;} public function _81(_19 $parser){$source=$this->value;return $this->_86($source);} public function _85($parent_scope){} public function _89(){return new _62(_63::T_NUMBER);}}class AccessExpr extends _18{public $left;public $index;public function __construct($left,$index){$this->left=$left;$this->index=$index;} public function _81(_19 $parser){$source=$this->left->_81($parser);$source .=' {';$source .=$this->index->_81($parser);$source .='}';return $this->_86($source);} public function _85($parent_scope){$this->left->_85($parent_scope);$this->index->_85($parent_scope);} public function _89(){$left_type=$this->left->_89();$index_type=$this->index->_89();if($left_type instanceof _61){if(!$index_type->_96()){throw new _92(_2::message('TYP040',[$index_type]));}  return $left_type->type;}  if($left_type instanceof _68){if(!$index_type->check($left_type->key)){throw new _92(_2::message('TYP050',[$left_type->key,$index_type]));}  return $left_type->value;}  if($left_type->_95()){if(!$index_type->_96()){throw new _92(_2::message('TYP040',[$index_type]));}  return $left_type;} throw new _92(_2::message('TYP060',[$left_type]));}}class _43 extends _18{public $condition;public $then;public $else;public function __construct($condition,$then,$else){$this->condition=$condition;$this->then=$then;$this->else=$else;} public function _81(_19 $parser){$source=$this->condition->_81($parser);$source .=' then ';$source .=$this->then->_81($parser);$source .=' else ';$source .=$this->else->_81($parser);return $source;} public function _85($parent_scope){$this->scope=$parent_scope;$this->condition->_85($parent_scope);$this->then->_85($parent_scope);$this->else->_85($parent_scope);} public function _89(){$bool=$this->scope->_93(_91::M_TYPE,'Bool');$condition=$this->condition->_89();if(!$bool->check($condition)){throw new _92(_2::message('TYP240',[$condition]));} $truthy=$this->then->_89();$falsy=$this->else->_89();if(!$truthy->check($falsy)){throw new _92(_2::message('TYP250',[$truthy,$falsy]));} return $truthy;}}class MatchExpr extends _18{public $expr;public $cases;public $else;public function __construct($expr,$cases,$else){$this->expr=$expr;$this->cases=$cases;$this->else=$else;} public function _81(_19 $parser){$source='match ';$source .=$this->expr->_81($parser);$source .=' with';$source .=PHP_EOL;$parser->_74();$source .=implode(',' .PHP_EOL,array_map(function($case) use($parser){$subsource=$parser->_76();$subsource .=(string) $case[0];$subsource .=' :- ';$subsource .=$case[1]->_81($parser);return $subsource;},$this->cases));if(count($this->cases) >0 && null !==$this->else){$source .=',';} if(null !==$this->else){$source .=$parser->_76();$source .='else ';$source .=$this->else->_81($parser);} $source .=PHP_EOL;$parser->_75();$source .=$parser->_76();$source .='end';return $source;} public function _85($parent_scope){} public function _89(){return null;}}class _49 extends _18{public $value;public $delimiter;public function __construct($value,$delimiter){$this->value=$value;$this->delimiter=$delimiter;} public function _81(_19 $parser){$source=$this->delimiter;$source .=$this->value;$source .=$this->delimiter;return $this->_86($source);} public function _85($parent_scope){} public function _89(){return new _62(_63::T_STR);}}} namespace _0\_17\_82{ use \_0\_17\Node;use \_0\_1\_2;use \_0\_19\_19;use \_0\_87\_90;use \_0\_87\_91;use \_0\_87\_88;use \_0\_17\_59\_65;use \_0\_87\_87;use \_0\_59\_92;use \_0\_17\_82\BlockStmt;use \_0\_59\_63;use \_0\_17\_59\_61;use \_0\_17\_59\_62;use \_0\_17\_59\_68;use \_0\_17\_59\NameType;use \_0\_17\_59\TypeNode;use \_0\_17\_59\_79;use \_0\_59\TaggedUnion;use \Exception;abstract class _82 extends Node{}class BreakStmt extends _82{public $label;public $is_explicit;public function __construct($label=null){$this->label=$label;$this->is_explicit=null !==$label;} public function _81(_19 $parser){$source='break';if($this->is_explicit){$source .=' ';$source .=$this->label;} $source .=PHP_EOL;return $source;} public function _85($parent_scope){if(!$this->is_explicit){$label=$parent_scope->getMetaInContext(_91::M_LABEL);if(null ===$label){throw new _88(_2::message('SCO140',['break']));}} else{$meta_label=$parent_scope->getMetaInContext(_91::M_LABEL);if(null ===$meta_label){throw new _88(_2::message('SCO140',['break']));} $label=$parent_scope->lookup($this->label);if(null ===$label){throw new _88(_2::message('SCO150',['break',$this->label]));}  if(~$label & _90::S_LABEL){throw new _88(_2::message('SCO160',['break',$this->label]));} $refcount=$parent_scope->_93(_91::M_REF_COUNT,$this->label);if(null ===$refcount){$parent_scope->_94(_91::M_REF_COUNT,$this->label,1);} else{$parent_scope->_94(_91::M_REF_COUNT,$this->label,$refcount + 1);}}} public function _97(){}}class FnStmt extends _82{public $signature;public $body;public $is_short;public function __construct(_83 $signature,$body,$is_short){$this->signature=$signature;$this->body=$body;$this->is_short=$is_short;$this->name=$this->signature->name;} public function _81(_19 $parser){$source='fn ';$source .=$this->signature->_81($parser);if($this->is_short){$source .=' :- ';$source .=$this->body->_81($parser);} else{$source .=PHP_EOL;$parser->_74();foreach($this->body as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();$source .=$parser->_76();$source .='end';} $source .=PHP_EOL;return $source;} public function _85($parent_scope){$parent_scope->insert($this->signature->name,_90::S_VARIABLE);$this->scope=new _87($parent_scope);$this->signature->_85($this->scope);if($this->is_short){$this->body->_85($this->scope);} else{foreach($this->body as $node){$node->_85($this->scope);}}} public function _97(){$parameters_types=$this->signature->getParametersTypes();if(null !==$this->signature->type){$function_type=new _65($parameters_types,$this->signature->type);$this->scope->_94(_91::M_TYPE,$this->signature->name,$function_type);$this->injectParametersTypes($parameters_types);$body_type=$this->body->_89();if(!$this->signature->type->check($body_type)){throw new _92(_2::message('TYP380',[$this->signature->type,$body_type]));}} else{$this->injectParametersTypes($parameters_types);$body_type=$this->body->_89();$function_type=new _65($parameters_types,$body_type);$this->scope->_94(_91::M_TYPE,$this->signature->name,$function_type);}} private function injectParametersTypes($parameters_types){$size=count($parameters_types);for($i=0;$i <$size;$i++){$parameter=$this->signature->parameters[$i]->name;$type=$parameters_types[$i];$this->scope->_94(_91::M_TYPE,$parameter,$type);}}}class ReturnStmt extends _82{public $expression;public function __construct($expression=null){$this->expression=$expression;} public function _81(_19 $parser){$source='^';if(null !==$this->expression){$source .=' ';$source .=$this->expression->_81($parser);} $source .=PHP_EOL;return $source;} public function _85($parent_scope){$this->expression->_85($parent_scope);}}class IfStmt extends _82{public $condition;public $body;public $elif;public $else;public function __construct($condition,$body,$elif,$else){$this->condition=$condition;$this->body=$body;$this->elif=$elif;$this->else=$else;} public function _81(_19 $parser){$source='if ';$source .=$this->condition->_81($parser);$source .=PHP_EOL;$parser->_74();foreach($this->body as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();foreach($this->elif as $elif){$source .=$elif->_81($parser);} if(null !==$this->else){$source .=$parser->_76();$source .='else';$source .=PHP_EOL;$parser->_74();foreach($this->else as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();} $source .=$parser->_76();$source .='end';$source .=PHP_EOL;return $source;} public function _85($parent_scope){$this->scope=$parent_scope;$this->condition->_85($parent_scope);$body_scope=new _87($parent_scope);foreach($this->body as $stmt){$stmt->_85($body_scope);}   foreach($this->elif as $elif){$elif->_85($parent_scope);}  if(null !==$this->else){$else_scope=new _87($parent_scope);foreach($this->else as $stmt){$stmt->_85($else_scope);}}} public function _97(){$bool=$this->scope->_93(_91::M_TYPE,'Bool');$condition_type=$this->condition->_89();if(!$bool->check($condition_type)){throw new _92(_2::message('TYP140',[$condition_type]));} foreach($this->body as $stmt){$stmt->_97();} foreach($this->elif as $elif){$elif->_97();} if(null !==$this->else){$this->else->_97();}}}class ForeachStmt extends _82{public $key;public $alias;public $generator;public $body;public function __construct($key,$alias,$generator,$body){$this->key=$key;$this->alias=$alias;$this->generator=$generator;$this->body=$body;} public function _81(_19 $parser){$source='foreach ';if(null !==$this->key){$source .=$this->key;$source .=': ';} $source .=$this->alias;$source .=' in ';$source .=$this->generator->_81($parser);$source .=PHP_EOL;$parser->_74();foreach($this->body as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();$source .=$parser->_76();$source .='end';$source .=PHP_EOL;return $source;} public function _85($parent_scope){$this->scope=new _87($parent_scope);$this->scope->setMetaInContext(_91::M_LABEL,_91::nextMetaLabel());if(null !==$this->key){$this->scope->insert($this->key,_90::S_VARIABLE |_90::S_INITIALIZED);} if($this->key ===$this->alias){throw new _88(_2::message('SCO180',[$this->alias]));} $this->scope->insert($this->alias,_90::S_VARIABLE |_90::S_INITIALIZED |_90::S_MUTABLE);$this->generator->_85($parent_scope);foreach($this->body as $node){$node->_85($this->scope);}} public function _97(){$generator_type=$this->generator->_89();if(!$generator_type->isIterable()){throw new _92(_2::message('TYP260',[$generator_type]));} if(null !==$this->key){$key_type=$generator_type instanceof _61 ?new _62(_63::T_NUMBER) :$generator_type->key;$this->scope->_94(_91::M_TYPE,$this->key,$key_type);} $value_type=$generator_type instanceof _61 ?$generator_type->type :$generator_type->key;foreach($this->body as $stmt){$stmt->_97();}}}class TypeStmt extends _82{public $name;public $value;public function __construct($name,TypeNode $value){$this->name=$name;$this->value=$value;} public function _81(_19 $parser){$source='type ';$source .=$this->name;$source .=' :- ';$source .=$this->value;$source .=PHP_EOL;return $source;} public function _85($parent_scope){$this->scope=$parent_scope;$flags=_90::S_TYPE |_90::S_ALIAS;$meta=[_91::M_TYPE =>$this->value];$this->value->bindScope($this->scope);$reference=$this->value->getReference();if(null !==$reference){list($ref_flags,$ref_meta)=$reference;$flags |=$ref_flags;$meta=$ref_meta;} $this->scope->insert($this->name,$flags);foreach($meta as $key =>$value){$this->scope->_94($key,$this->name,$value);}} public function _97(){}}class _84 extends _82{public $name;public $type;public $value;public $mutable;private $scope;public function __construct($name,$type,$value,$mutable){$this->name=$name;$this->type=$type;$this->value=$value;$this->mutable=$mutable;} public function _81(_19 $parser){$source='let ';if($this->mutable){$source .='mut ';} $source .=$this->name;if(null !==$this->type){$source .=' :: ' .$this->type;} if(null !==$this->value){$source .=' :- ' .$this->value->_81($parser);} $source .=PHP_EOL;return $source;} public function _85($parent_scope){$this->scope=$parent_scope;$mask=_90::S_VARIABLE |($this->mutable ?_90::S_MUTABLE :0x0);if(null ===$this->value){$this->scope->insert($this->name,$mask);} else{$this->scope->insert($this->name,$mask |_90::S_INITIALIZED);$this->value->_85($parent_scope);}} public function _97(){if(null ===$this->type && null ===$this->value){throw new _92(_2::message('TYP290',[$this->name]));} if(null !==$this->type){$this->type->bindScope($this->scope);} if($this->mutable){$this->checkMutable();} else{$this->checkImmutable();}} public function checkMutable(){if(null ===$this->value){$this->type->simplify();$this->scope->_94(_91::M_TYPE,$this->name,$this->type);return;}  if(null ===$this->type){$inferred_type=$this->value->_89();$this->scope->_94(_91::M_TYPE,$this->name,$inferred_type);return;}  $this->checkTypeAndValue();} public function checkImmutable(){if(null ===$this->value){throw new _92(_2::message('TYP270',[$this->name .' :: ' .$this->type]));}  if(null ===$this->type){$type=$this->value->_89();$this->scope->_94(_91::M_TYPE,$this->name,$type);return;} $this->checkTypeAndValue();} public function checkTypeAndValue(){$this->scope->_94(_91::M_TYPE,$this->name,$this->type);$inferred_type=$this->value->_89();if(!$this->type->check($inferred_type)){throw new _92(_2::message('TYP300',[ $this->name,$this->type,$inferred_type ]));}}}class ExprStmt extends _82{public $expr;public function __construct($expr){$this->expr=$expr;} public function _81(_19 $parser){return 'do ' .$this->expr->_81($parser) .PHP_EOL;} public function _85($parent_scope){$this->expr->_85($parent_scope);} public function _97(){$type=$this->expr->_89();var_dump((string) $type);}}class _83 extends _82{public $name;public $parameters;public $type;public function __construct($name,$parameters,$type){$this->name=$name;$this->parameters=$parameters;$this->type=$type;} public function _81(_19 $parser){$source=$this->name .'(';$source .=implode(', ',array_map(function($param){$parameter=$param->name;if(null !==$param->type){$parameter .=' :: ' .$param->type;} return $parameter;},$this->parameters));$source .=')';if(!is_null($this->type)){$source .=': ' .$this->type;} return $source;} public function _85($parent_scope){$this->scope=$parent_scope;foreach($this->parameters as $param){if($parent_scope->hasLocal($param->name)){throw new _88(_2::message('SCO060',[$param->name,$this->name]));}  $parent_scope->insert($param->name,_90::S_INITIALIZED |_90::S_MUTABLE |_90::S_VARIABLE |_90::S_PARAMETER);}} public function getParametersTypes(){return array_map(function($parameter){return null ===$parameter->type ?new _79(_91::nextGenericVarName()) :$parameter->type;},$this->parameters);} public function _97(){foreach($this->parameters as $parameter){$parameter->type->bindScope($this->scope);} if(null !==$this->type){$this->type->bindScope($this->scope);}}}class WhileStmt extends _82{public $condition;public $body;public function __construct($condition,$body){$this->condition=$condition;$this->body=$body;} public function _81(_19 $parser){$source='while ';$source .=$this->condition->_81($parser);$source .=PHP_EOL;$parser->_74();foreach($this->body as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();$source .=$parser->_76();$source .='end' .PHP_EOL;return $source;} public function _85($parent_scope){$this->scope=new _87($parent_scope);$this->scope->setMetaInContext(_91::M_LABEL,_91::nextMetaLabel());$this->condition->_85($parent_scope);foreach($this->body as $node){$node->_85($this->scope);}} public function _97(){$bool=$this->scope->_93(_91::M_TYPE,'Bool');$condition_type=$this->condition->_89();if(!$bool->check($condition_type)){throw new _92(_2::message('TYP010',[$condition_type]));} foreach($this->body as $node){$node->_97();}}}class LabelStmt extends _82{public $name;public $stmt;public function __construct($name,$stmt){$this->name=$name;$this->stmt=$stmt;} public function _81(_19 $parser){$source='[' .$this->name .']';$source .=PHP_EOL;$source .=$parser->_76();$source .=$this->stmt->_81($parser);return $source;} public function _85($parent_scope){$this->scope=new _87($parent_scope);$this->scope->insert($this->name,_90::S_LABEL);$this->stmt->_85($this->scope);} public function _97(){$this->stmt->_97();}}class UnionStmt{public $name;public $parameters;public $values;public function __construct($name,$parameters,$values){$this->name=$name;$this->parameters=$parameters;$this->values=$values;} public function _81(_19 $parser){$source='union ';$source .=$this->name;if(sizeof($this->parameters) >0){$source .='(';$source .=implode(', ',$this->parameters);$source .=')';} $source .=' :- ';$source .=implode(' or ',array_map(function($value){list($name,$types)=$value;$source=$name;if(sizeof($types) >0){$source .='(';$source .=implode(', ',$types);$source .=')';} return $source;},$this->values));$source .=PHP_EOL;return $source;} public function _85($parent_scope){$this->scope=new _87($parent_scope);foreach($this->parameters as $parameter){$this->scope->insert($parameter,_90::S_TYPE |_90::S_UNION_PARAM);$this->scope->_94(_91::M_TYPE,$parameter,new NameType($parameter,[]));} $declared=[];$tagged_union=new TaggedUnion($this->name,$this->parameters,$this->values);$parent_scope->insert($this->name,_90::S_TYPE |_90::S_UNION);$parent_scope->_94(_91::M_CONS,$this->name,$this->values);$parent_scope->_94(_91::M_TYPE,$this->name,$tagged_union);foreach($this->values as $value){list($name,$types)=$value;if(isset($declared[$name])){throw new _92(_2::message('SCO030',[$name,$this->name]));} $declared[$name]=true;$parent_scope->insert($name,_90::S_TYPE |_90::S_UNION_MEMBER);$parent_scope->_94(_91::M_TYPE,$name,$tagged_union);$parent_scope->_94(_91::M_CONS,$name,$types);} $tagged_union->bindScope($this->scope);} public function _97(){}}class ProgramStmt extends _82{public $stmt_list;public function __construct($stmt_list){$this->stmt_list=$stmt_list;} public function _81(_19 $parser){$source='';foreach($this->stmt_list as $stmt){$source .=$stmt->_81($parser);} return $source;} public function _85($parent_scope){$this->scope=new _87($parent_scope);foreach($this->stmt_list as $node){$node->_85($this->scope);}} public function _97(){foreach($this->stmt_list as $node){$node->_97();}} public function attachValidAST($ast){$safe_scope=clone $this->scope;try{foreach($ast->stmt_list as $node){$node->_85($this->scope);} foreach($ast->stmt_list as $node){$node->_97();} $this->stmt_list=array_merge($this->stmt_list,$ast->stmt_list);} catch(Exception $e){$this->scope=$safe_scope;throw $e;}}}class ContinueStmt extends _82{public $label;public $is_explicit;public function __construct($label=null){$this->label=$label;$this->is_explicit=null !==$label;} public function _81(_19 $parser){$source='continue';if($this->is_explicit){$source .=' ';$source .=$this->label;} $source .=PHP_EOL;return $source;} public function _85($parent_scope){if(!$this->is_explicit){$label=$parent_scope->getMetaInContext(_91::M_LABEL);if(null ===$label){throw new _88(_2::message('SCO140',['continue']));}} else{$meta_label=$parent_scope->getMetaInContext(_91::M_LABEL);if(null ===$meta_label){throw new _88(_2::message('SCO140',['continue']));} $label=$parent_scope->lookup($this->label);if(null ===$label){throw new _88(_2::message('SCO150',['continue',$this->label]));}  if(~$label & _90::S_LABEL){throw new _88(_2::message('SCO160',['continue',$this->label]));} $refcount=$parent_scope->_93(_91::M_REF_COUNT,$this->label);if(null ===$refcount){$parent_scope->_94(_91::M_REF_COUNT,$this->label,1);} else{$parent_scope->_94(_91::M_REF_COUNT,$this->label,$refcount + 1);}}} public function _97(){}}class BlockStmt extends _82{public $stmt_list;public function __construct($stmt_list){$this->stmt_list=$stmt_list;} public function _81(_19 $parser){$source='begin';$source .=PHP_EOL;$parser->_74();foreach($this->stmt_list as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();$source .=$parser->_76();$source .='end';$source .=PHP_EOL;return $source;} public function _85($parent_scope){$this->scope=new _87($parent_scope);foreach($this->stmt_list as $node){$node->_85($this->scope);}} public function _97(){foreach($this->stmt_list as $stmt){$stmt->_97();}}}class ElifStmt extends _82{public $condition;public $body;public function __construct($condition,$body){$this->condition=$condition;$this->body=$body;} public function _81(_19 $parser){$source=$parser->_76();$source .='elif ';$source .=$this->condition->_81($parser);$source .=PHP_EOL;$parser->_74();foreach($this->body as $stmt){$source .=$parser->_76();$source .=$stmt->_81($parser);} $parser->_75();return $source;} public function _85($parent_scope){$this->scope=new _87($parent_scope);$this->condition->_85($parent_scope);foreach($this->body as $node){$node->_85($this->scope);}} public function _97(){$bool=$this->scope->_93(_91::M_TYPE,'Bool');$condition_type=$this->condition->_89();if(!$bool->check($condition_type)){throw new _92(_2::message('TYP180',[$condition_type]));} foreach($this->body as $stmt){$stmt->_97();}}}} namespace _0\_17\_59{ use \_0\_87\_87;use \_0\_59\_63;use \_0\_1\_2;use \_0\_59\_92;use \_0\_87\_90;use \_0\_87\_91;abstract class TypeNode{protected $parentheses_level=0;protected $declaration_context=false;public function isInDeclarationContext(){return $this->declaration_context;} public function enableDeclarationContext(){$this->declaration_context=true;} public function getReference(){return null;} public function addParentheses(){$this->parentheses_level++;} public function removeParentheses(){$this->parentheses_level--;} protected function _86($source){$level=$this->parentheses_level;return str_repeat('(',$level) .$source .str_repeat(')',$level);} public function isAtom($atom){return $this instanceof AtomType && $this->name ===$atom;} public function _96(){return $this instanceof _62 && _63::T_NUMBER ===$this->code;} public function _95(){return $this instanceof _62 && _63::T_STR ===$this->code;} public function isRegex(){return $this instanceof _62 && _63::T_REGEX ===$this->code;} public function isIterable(){return $this instanceof _68 ||$this instanceof _61;} public function simplify(){return $this;} abstract function check(TypeNode $other);abstract function bindScope(_87 $parent_scope);}class _65 extends TypeNode{public $parameters;public $return;public function __construct($parameters,$return){$this->parameters=$parameters;$this->return=$return;} public function __toString(){return $this->_86( '&[' .join(', ',$this->parameters) .']: ' .$this->return );} public function bindScope(_87 $parent_scope){foreach($this->parameters as $parameter){$parameter->bindScope($parent_scope);} $this->return->bindScope($parent_scope);} public function check(TypeNode $other){$message=_2::message('TYP350',[$this,$other]);if(!($other instanceof _65)){return false;}  $self_arity=count($this->parameters);$other_arity=count($other->parameters);if($self_arity !==$other_arity){$message .='     > ' ._2::message('TYP360',[$self_arity,$other_arity]);throw new _92($message);}  for($i=0;$i <$self_arity;$i++){$self_type=$this->parameters[$i];$other_type=$other->parameters[$i];if(!$self_type->check($other_type)){$message .='     > ' ._2::message('TYP370',[$i + 1,$self_type,$other_type]);throw new _92($message);}}  if(!$this->return->check($other->return)){$message .='     > ' ._2::message('TYP380',[$this->return,$other->return]);throw new _92($message);} return true;}}class _61 extends TypeNode{public $type;public function __construct(TypeNode $type){$this->type=$type;} public function __toString(){return $this->_86('{' .$this->type .'}');} public function bindScope(_87 $parent_scope){$this->type->bindScope($parent_scope);} public function check(TypeNode $other){if(!($other instanceof _61)){return false;} return $this->type->check($other->type);}}class _68 extends TypeNode{public $key;public $value;public function __construct(TypeNode $key,TypeNode $value){$this->key=$key;$this->value=$value;} public function __toString(){return $this->_86( '#{' .$this->key .': ' .$this->value .'}' );} public function bindScope(_87 $parent_scope){$this->key->bindScope($parent_scope);$this->value->bindScope($parent_scope);} public function check(TypeNode $other){if(!($other instanceof _68)){return false;} $match_keys=$this->key->check($other->key);$match_values=$this->value->check($other->value);if(!$match_keys ||!$match_values){$message=_2::message('TYP350',[$this,$other]);if(!$match_keys){$message .='     > ' ._2::message('TYP340',['key',$this->key,$other->key]);} if(!$match_values){$message .=PHP_EOL .'     > ' ._2::message('TYP340',['value',$this->value,$other->value]);} throw new _92($message);} return true;}}class NameType extends TypeNode{public $name;public $values;public function __construct($name,$values){$this->name=$name;$this->values=$values;} public function __toString(){$source=$this->name;if(sizeof($this->values) >0){$source .='(';$source .=implode(', ',$this->values);$source .=')';} return $source;} public function bindScope(_87 $parent_scope){$this->scope=$parent_scope;$type_flags=$this->scope->lookup($this->name);if(null ===$type_flags){throw new _92(_2::message('TYP440',[$this->name]));}   if($this->isInDeclarationContext()){if($type_flags & _90::S_UNION_MEMBER){$parent_type=$this->scope->_93(_91::M_TYPE,$this->name);throw new _92(_2::message('TYP460',[$this->name,$parent_type]));}}} public function simplify(){$type=$this->scope->_93(_91::M_TYPE,$this->name);if($this ===$type){throw new _92(_2::message('TYP280',[$this->name]));} return $type->simplify();} public function check(TypeNode $other){$type=$this->scope->_93(_91::M_TYPE,$this->name);return $type->check($other);} public function getReference(){$flags=$this->scope->lookup($this->name);$meta=$this->scope->getMetaTable($this->name);if(null ===$flags){return null;} return [$flags,$meta];}}class _60 extends TypeNode{public $properties;public function __construct($properties){$this->properties=$properties;} public function __toString(){$source='%{';$source .=implode(', ',array_map(function($name){return "{$name}: {$this->properties[$name]}";},array_keys($this->properties)));$source .='}';return $this->_86($source);} public function bindScope(_87 $parent_scope){foreach($this->properties as $property){$property->bindScope($parent_scope);}} public function check(TypeNode $other){if(!($other instanceof _60)){return false;}  $different_properties=array_diff_key($this->properties,$other->properties);if(count($different_properties) >0){return false;}  foreach(array_keys($this->properties) as $property){if(!$this->properties[$property]->check($other->properties[$property])){return false;}} return true;}}class _62 extends TypeNode{public $code;public function __construct($code){$this->code=$code;} public function __toString(){$map=[ _63::T_STR =>'string',_63::T_NUMBER =>'number',_63::T_REGEX =>'regex',_63::T_BLOCK =>'block',_63::T_BYTE =>'byte',_63::T_ATOM =>'atom' ];return $map[$this->code];} public function bindScope(_87 $parent_scope){} public function check(TypeNode $other){if(!($other instanceof _62)){return $other instanceof AtomType && _63::T_ATOM ===$this->code;} return $this->code ===$other->code;}}class AtomType extends TypeNode{public $name;public function __construct($name){$this->name=$name;} public function __toString(){return $this->_86($this->name);} public function bindScope(_87 $parent_scope){} public function check(TypeNode $other){if(!($other instanceof AtomType)){return false;} return $this->name ===$other->name;}}class _79 extends TypeNode{public $name;public function __construct($name){$this->name=$name;} public function __toString(){return $this->_86($this->name);} public function bindScope(_87 $parent_scope){} public function check(TypeNode $other){return false;}}class _66 extends TypeNode{public $types;public $size;public function __construct(...$types){$this->types=$types;$this->size=count($types);} public function __toString(){return $this->_86('#(' .implode(', ',$this->types) .')');} public function bindScope(_87 $parent_scope){foreach($this->types as $type){$type->bindScope($parent_scope);}} public function check(TypeNode $other){if(!($other instanceof _66)){return false;} if($this->size !==$other->size){throw new _92(_2::message('TYP420',[$this->size,$other->size]));} for($i=0;$i <$this->size;$i++){$me=$this->types[$i];$you=$other->types[$i];if(!$me->check($you)){throw new _92(_2::message('TYP430',[$i + 1,$me,$you]));}} return true;}}class _70 extends TypeNode{public $operator;public $left;public $right;public function __construct($left,$operator,$right){$this->left=$left;$this->operator=$operator;$this->right=$right;} public function __toString(){return $this->_86( $this->left ." {$this->operator} " .$this->right );} public function simplify(){if('&' !==$this->operator){return $this;} $simple_left=$this->left->simplify();$simple_right=$this->right->simplify();if($simple_left instanceof _60 && $simple_right instanceof _60){$properties=[];foreach($simple_left->properties as $name =>$type){$properties[$name]=$type;} foreach($simple_right->properties as $name =>$type){if(array_key_exists($name,$properties)){if(!$properties[$name]->check($type)){throw new _92(_2::message('TYP400',[$this->left,$this->right,$name,$properties[$name],$type]));}} else{$properties[$name]=$type;}} return new _60($properties);} throw new _92(_2::message('TYP390',[$this->left,$this->right]));} public function bindScope(_87 $parent_scope){$this->left->bindScope($parent_scope);$this->right->bindScope($parent_scope);} public function check(TypeNode $other){return $this->simplify()->check($other);}}} namespace _0\_87{ use \_0\_1\_2;use \_0\_87\_91;use \Exception;class _87{public $table=[];public $parent;public $meta=[];public $child;public function __construct(_87 $parent=null){$this->parent=$parent;if(null !==$this->parent){$this->parent->child=$this;}} public function hasLocal($symbol){return array_key_exists($symbol,$this->table);} public function insert($symbol,$value){if($this->hasLocal($symbol)){throw new _88(_2::message('SCO130',[$symbol]));} $this->table[$symbol]=$value;} public function lookup($symbol){if($this->hasLocal($symbol)){return $this->table[$symbol];} return null !==$this->parent ?$this->parent->lookup($symbol) :null;} public function _94($property,$symbol,$value){$scope=$this->getSymbolScope($symbol);if(!array_key_exists($symbol,$scope->meta)){$scope->meta[$symbol]=[];} $scope->meta[$symbol][$property]=$value;} public function setMetaInContext($property,$value){$this->meta[$property]=$value;} public function getMetaTable($symbol){$scope=$this->getSymbolScope($symbol);if(null ===$scope){return null;} return $scope->meta[$symbol];} public function _93($property,$symbol){$scope=$this->getSymbolScope($symbol);if(null ===$scope ||!array_key_exists($symbol,$scope->meta)){return null;} return array_key_exists($property,$scope->meta[$symbol]) ?$scope->meta[$symbol][$property] :null;} public function getMetaInContext($property){if(array_key_exists($property,$this->meta)){return $this->meta[$property];} return null !==$this->parent ?$this->parent->getMetaInContext($property) :null;} public function getSymbolScope($symbol){if($this->hasLocal($symbol)){return $this;} return null !==$this->parent ?$this->parent->getSymbolScope($symbol) :null;}}class _91{const M_REF_COUNT='refcount';const M_TYPE='type';const M_LABEL='label';const M_CONS='construction';private static $label_num=0;private static $generic_num=0;public static function nextMetaLabel(){return 'LB' .static::$label_num++;} public static function nextGenericVarName(){return 'A' .static::$generic_num++;}}class _90{const S_VARIABLE=1 <<1;const S_TYPE=1 <<2;const S_LABEL=1 <<3;const S_UNION=1 <<4;const S_UNION_MEMBER=1 <<5;const S_UNION_PARAM=1 <<6;const S_MUTABLE=1 <<6;const S_PARAMETER=1 <<7;const S_INITIALIZED=1 <<11;const S_ALIAS=1 <<12;}class _88 extends Exception{protected $message;public function __construct($message){$this->message=$message;} public function __toString(){return join([ BEGIN_RED,"*** Quack, there is a ",BEGIN_GREEN,"semantic",END_GREEN,BEGIN_RED," issue, friend!",PHP_EOL,"    ",$this->message,PHP_EOL,END_RED ]);}}} namespace _0\_59{ use \_0\_17\_59\TypeNode;use \_0\_87\_87;use \Exception;class TaggedUnion extends TypeNode{private $name;private $parameters;private $values;public function __construct($name,$parameters,$values){$this->name=$name;$this->parameters=$parameters;$this->values=$values;} public function __toString(){return $this->name;} public function bindScope(_87 $scope){foreach($this->values as $value){foreach($value[1] as $type){$type->bindScope($scope);}}} public function check(TypeNode $other){if(!($other instanceof TaggedUnion)){return false;}  return $other ===$this;}}class _92 extends Exception{protected $message;public function __construct($message){$this->message=$message;} public function __toString(){return join([ BEGIN_RED,'**** Quack, I\'ve found a ',BEGIN_GREEN,'type error',END_GREEN,BEGIN_RED,', my dear!',PHP_EOL,'     ',$this->message,PHP_EOL,END_RED ]);}}class _63{const T_STR=0;const T_NUMBER=2;const T_OBJ=4;const T_ATOM=9;const T_REGEX=10;const T_BLOCK=12;const T_BYTE=15;}} namespace _0{ use \Exception;use \_0\Cli\Console;use \_0\Cli\Croak;use \_0\Cli\Repl;use \_0\_3\_14;use \_0\_19\_80;use \_0\_87\_87;if(count($argv) >1){$disable_typechecker=in_array('--disable-typechecker',$argv,true);$disable_scope=in_array('--disable-scope',$argv,true);$compilation_list=array_filter($argv,function($file){return preg_match('/\.qk$/',$file);});function compile($source,$scope){global $disable_scope,$disable_typechecker;$lexer=new _14($source);$parser=new _80($lexer);$parser->_22();if(!$disable_scope){$parser->ast->_85($scope);} if(!$disable_typechecker){$parser->ast->_97();} return $parser;} foreach($compilation_list as $file){try{if(!file_exists($file)){throw new Exception("File [$file] not found");} $scope=new _87();$prelude=file_get_contents(realpath(dirname(__FILE__) .'/../lib/prelude.qk'));$source=$prelude .PHP_EOL .file_get_contents($file);$script=compile($source,$scope);unset($script->ast->stmt_list[0]);unset($script->ast->stmt_list[1]);echo $script->_81();} catch(Exception $e){echo $e;exit(1);}} return;} $console=new Console(STDIN,STDOUT,STDERR);$console->subscribe([ 0x0 =>'handleListDefinitionsKey',0x1 =>'handleCtrlA',0x7F =>'handleBackspace',0xC =>'handleClearScreen',0x1B =>[ 0x4F =>[ 0x46 =>'handleEnd',0x48 =>'handleHome' ],0x5B =>[ 0x32 =>[ 0x7E =>'handleInsert' ],0x33 =>[ 0x7E =>'handleDelete' ],0x41 =>'handleUpArrow',0x42 =>'handleDownArrow',0x43 =>'handleRightArrow',0x44 =>'handleLeftArrow' ] ],0x3B =>[ 0x35 =>[ 0x43 =>'handleCtrlRightArrow',0x44 =>'handleCtrlLeftArrow' ] ] ]);$repl=new Repl($console,new Croak());$repl->welcome();$repl->start(['prelude']);}